[
  {
    "id": 44093598,
    "title": "我活好，但大厂不要",
    "description": "明明我活这么好，偏偏大厂就是不要？这是一个困扰我多年的问题：我活好要价又低，可大厂就是不要。今天无意中听了一场郑大的直播，突然受到启发，知道原因了。我的故事我面过好几次阿里的职位，有好几次都走到最后的 HR 面了，但就是从没有拿到过 Offer。其中最让我不可思议的一次是，几年前阿里文娱一个高...",
    "custom_description": null,
    "updated_at": "2021-04-22T12:10:57.000Z",
    "created_at": "2021-04-22T12:10:57.000Z",
    "slug": "ml2psw",
    "word_count": 2651,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1619090113625-cbc78ba7-459f-4c67-bef1-042c2476d85b.png",
    "body": "> 明明我活这么好，偏偏大厂就是不要？\n\n这是一个困扰我多年的问题：我活好要价又低，可大厂就是不要。今天无意中听了一场郑大的直播，突然受到启发，知道原因了。<br />\n\n<a name=\"rL5Ht\"></a>\n## 我的故事\n\n<br />我面过好几次阿里的职位，有好几次都走到最后的 HR 面了，但就是从没有拿到过 Offer。其中最让我不可思议的一次是，几年前阿里文娱一个高 P 通过 github 找到我的联系方式，说是看了我的个人项目以及代码提交记录，觉得我很不错，问我有没有意向考虑阿里的机会。我那时在一个创业小厂，一个人要干很多人的活，比 996 还狠，关键还经常拿不到工资，苦于没有好的机会，当然一口答应下来。<br />\n<br />但是，我也没有非常猴急，而是问了具体的项目情况。了解到是音视频相关，而且最近很着急做一个视频弹幕方案，我说能不能给我两天时间，我做一个 demo，再参加面试？面试官觉得这个态度很好，也答应了，并加了我的微信。两天后，我把做好的 demo 链接（[https://ass-editor.js.org/](https://ass-editor.js.org/)）通过微信发给了面试官，面试官看了后非常满意，并约了第二天的正式电话面试时间。<br />\n<br />我当时非常激动，觉得这个职位就是给我准备的，面试官明确表示了这个 demo 正是他们想要的，所以这是我的面试历史中，感到最有信心的一次。但是没有想到，我最有信心的一次面试，结果竟然终止于一面，连二面的机会都没有拿到！<br />\n<br />第二天，电话面试开始，面试官首先就告诉我，说把 demo 给他的主管看了，主管也感到非常满意！我听了开心极了，以为 Offer 唾手可得了。接下来，面试官说还是需要问一些技术问题，以做个全面考察。面试官非常有耐心，各种启发式提问，给我充足的时间思考，足足聊了一个小时。<br />\n<br />但是具体什么问题，我现在已经不记得了，因为完全不懂，根本不在我的涉猎范围内。但是面试官非常客气和礼貌，只是让我等通知。挂完电话我心想，虽然各种知识点都没有答上来，但是我的 demo 做得这么好，面试官可能在和主管沟通中会帮我争取一下，然后等几天后就接到他主管的面试电话了。没想到，挂完面试电话没过几分钟，就有 HR 打电话来，通知我面试失败！<br />\n<br />我懵了……<br />\n<br />后来我多次回想起这件事，越想越不能理解。虽然很多问题答不上来，但是我活好呀：遵循好的工程实践比如自动化部署、测试驱动开发。两天时间搞定最小可用产品并上线，代码放在 github 上，完全没有推广的情况下，得到 21 颗星，和 9 个 fork。这么棒的开发工程师，怎么连二面机会都没有拿到呢！<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1619090113625-cbc78ba7-459f-4c67-bef1-042c2476d85b.png#clientId=u76a68c61-5e44-4&from=paste&height=632&id=uf0a0a213&margin=%5Bobject%20Object%5D&name=image.png&originHeight=632&originWidth=1230&originalType=binary&size=78222&status=done&style=none&taskId=u84707254-605c-4595-9315-1f131e75915&width=1230)<br />\n\n<a name=\"NtMx4\"></a>\n## 别人的故事\n\n<br />**我活好，但大厂不要。**为什么？这难道是我一个人的困惑？非也，我后来发现别人也有同样的困惑。TDD 是程序员的专业素养（参见《代码整洁之道》），有很多 TDD 的拥趸们，为自己的 TDD 技能感到自豪，但同时又苦于大厂根本就不看重自己所自豪的地方。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1619090557472-b5a3108b-7e77-4844-a807-93f5e95fa556.png#clientId=u76a68c61-5e44-4&from=paste&height=516&id=uaeca6ad2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=516&originWidth=930&originalType=binary&size=86915&status=done&style=none&taskId=u79c67de0-8e24-4990-baf5-9377784e584&width=930)<br />难道是阿里的独特之处？非也，比如这位牛人，所有项目都达到近乎 100% 测试覆盖率（SonarQube 扫描结果）以及全部代码质量都在 A 的那种，去面试了腾讯，结果只通过了一面：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1619090970705-fa43c8b2-65b4-438d-99ca-481f79e72458.png#clientId=u76a68c61-5e44-4&from=paste&height=592&id=u37bd4e87&margin=%5Bobject%20Object%5D&name=image.png&originHeight=592&originWidth=958&originalType=binary&size=255699&status=done&style=none&taskId=u0facc913-8bdd-4fb1-bb1a-f564a43ee4e&width=958)\n<a name=\"ueiFk\"></a>\n## 为什么明明活好大厂却不要？\n\n<br />听了郑大的直播，听到郑大总结的一类老程序员，不能区分知识和技能，总是用自己的技能去理解知识，因此总是得不到提升（不记得原话，大意如此）。比如业界在长时间里总结出来的优秀设计模式沉淀下来，就属于知识。这类老程序员不愿意去学习，而是习惯于自己在实践中摸索，形成一套渐进于业界的标准设计模式，但是又不到位。这个总结让我顿悟了：<br />\n\n<a name=\"OIXMe\"></a>\n### 活好，只能证明你的技能；但是大厂，往往更注重对知识的考察。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1619091836483-fad23953-c877-4f06-a766-2ed6975d4cdd.png#clientId=u76a68c61-5e44-4&from=paste&height=624&id=LL9cU&margin=%5Bobject%20Object%5D&name=image.png&originHeight=624&originWidth=1294&originalType=binary&size=103317&status=done&style=none&taskId=ue4b4e204-4b29-4335-925d-52b03cc39ac&width=1294)<br />比如有人质疑过微软总是喜欢问各种算法，说如果有人把所有的算法背下来，既背下来实现代码，还背下来他们的复杂度、优劣区别等等，不是很容易通过你们的面试吗？微软给出的回答是：如果真有这样的候选人，那么肯定是我们要找的人。<br />\n<br />虽然有很多相反类型的人，只知道学知识，却不注重运用和练习，没有消化成自己的，于是就又忘记了，没有什么用。但是**作为程序员，更应该小心自己走到另一个极端**，就是太注重练习和不断提高自己在某方面的技能，却极少花时间学其他知识，于是坐井观天，对自己的局限性没有认知。不仅进不了大厂，在小厂里也长年没有提升。<br />\n<br />Bob 大叔做程序员做到 70 多岁，还在持续为业界作出贡献并且拥有极大的影响力，但是很多程序员到了 35 岁甚至 30 岁就开始焦虑自己的职业生涯，很大原因就是**只提高自己的技能，却忽视了扩展自己的知识面。**<br />\n\n<a name=\"Orj3W\"></a>\n## 总结\n\n<br />还是用 Bob 大叔的《代码整洁之道》中的关于**坚持学习**的一段话来总结吧（练习同样重要，书里也有同样强调，但本文是专门写给活好的程序员的，略去练习部分）： <br />\n\n> 你知道什么是N-S（Nassi-Schneiderman）图表吗？如果不知道，那为什么不了解一下呢？你知道“米利型”（Mealy）和“摩尔型”（Moore）这两种状态机的差别吗？你应该知道的。你能不需查阅算法手册就可写出一个快速排序程序吗？你知道“变换分析”（Transform Analysis）这个术语的意思吗?你知道如何用数据流图进行功能分解吗？你知道“临时传递数据”（Tramp Data）的意思吗？你听说过“耦合性”（Conascence）吗？什么是Parnas表呢？\n> \n\n> 近50年来，各种观点、实践、技术、工具与术语在我们这一领域层出不穷。你对这些了解多少呢？如果想成为一名专业开发者，那你就得对其中的相当一大部分有所了解，而且要不断扩展这一知识面。\n> \n\n> 下面列出了**每个**专业软件开发人员**必须精通**的事项。\n> \n\n> 设计模式。必须能描述GOF书中的全部24种模式，同时还要有POSA书中的多数模式的实战经验。\n> 设计原则。必须了解SOLID原则，而且要深刻理解组件设计原则。\n> 方法。必须理解XP、Scrum、精益、看板、瀑布、结构化分析及结构化设计等。\n> 实践。必须掌握测试驱动开发、面向对象设计、结构化编程、持续集成和结对编程。\n> 工件。必须了解如何使用UML图、DFD图、结构图、Petri网络图、状态迁移图表、流程图和决策表。\n> \n\n> 读书，看相关文章，关注博客和微博，参加技术大会，访问用户群，多参与读书与学习小组。不懂就学，不要畏难。如果你是.NET程序员，就去学学Java；如果你是Java程序员，就去学学Ruby；如果你是C语言程序员，就去学学Lisp；如果你真想练练脑子，就去学学Prolog和Forth吧！\n> \n\n> —— [美] Robert C. Martin《代码整洁之道：程序员的职业素养》\n\n<a name=\"ZjvpA\"></a>\n## \n<a name=\"F2Hjt\"></a>\n## 我的故事后续\n\n<br />看了我的那段最有信心然而惨败的面试经历，有人一定会追问，难道就没有找面试官了解详情吗？当然有，毕竟我们都相互加了微信，而且成了朋友圈的点赞之交，还是有些沟通的。甚至有一次他来上海玩，我还约了和他在星巴克喝了杯咖啡。他给我的反馈是，根据我的资历，他们期待我达到 P7，但是面试评定下来，只到 P6+，还是差了点。我当时还在某创业小厂，已经几个月没拿到工资了，我说给我 P6 也行啊。他说大可不必，让我千万不要自降身价。然后说在阿里的程序员，不懂 Java 的确少见，不太适合，但是别的地方也许可以。<br />\n<br />写到这儿，我很惭愧，竟然一直没有去学习 Java。就此打住，我要去学习 Java 了，以及好好研究 SpringCloud，有兴趣一起学习的程序员朋友，欢迎加我微信共同进步：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1619093316177-66d056b7-8afe-42b8-bbf8-877c9edb76c9.png#clientId=u76a68c61-5e44-4&from=paste&height=430&id=ubcee7cff&margin=%5Bobject%20Object%5D&name=image.png&originHeight=430&originWidth=430&originalType=binary&size=75332&status=done&style=none&taskId=u1aea9ec9-8b59-4514-ace9-3f52649cf4a&width=430)\n"
  },
  {
    "id": 44086005,
    "title": "【解决】jest 跑测试时找不到模块",
    "description": "【症状】项目配置了对模块的基于项目根目录的绝对路径引用方式，也可以正常跑起来，但是在跑测试时却碰到找不到模块的错误：➜ yarn test:e2eyarn run v1.22.10$ jest --config ./test/jest-e2e.json FAIL  test/app.e2e-s...",
    "custom_description": null,
    "updated_at": "2021-04-22T07:02:40.000Z",
    "created_at": "2021-04-22T07:02:40.000Z",
    "slug": "zvqg3g",
    "word_count": 400,
    "cover": null,
    "body": "<a name=\"BzYlf\"></a>\n## 【症状】\n项目配置了对模块的基于项目根目录的绝对路径引用方式，也可以正常跑起来，但是在跑测试时却碰到找不到模块的错误：\n```shell\n➜ yarn test:e2e\nyarn run v1.22.10\n$ jest --config ./test/jest-e2e.json\n FAIL  test/app.e2e-spec.ts\n  ● Test suite failed to run\n\n    Cannot find module '@/utils/aws.service' from '../src/app-bff-module.ts'\n\n    Require stack:\n      /Users/path/to/your/project/src/app-bff-module.ts\n      app.e2e-spec.ts\n\n       5 |\n       6 | import config from './config/index'\n    >  7 | import { AWSService } from '@/utils/aws.service'\n         | ^\n       8 | import { EngagementModule } from '@/domains/engagement/engagement.module'\n       9 |\n      10 | @Module({\n\n      at Resolver.resolveModule (../node_modules/jest-resolve/build/index.js:306:11)\n      at Object.<anonymous> (../src/app-bff-module.ts:7:1)\n\nTest Suites: 1 failed, 1 total\nTests:       0 total\nSnapshots:   0 total\nTime:        9.649 s\nRan all test suites.\nerror Command failed with exit code 1.\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\n```\n<a name=\"jhDbB\"></a>\n## 【原因分析】\n项目配置了对模块的基于项目根目录的绝对路径引用，减少了因为相对路径带来的不一致困扰。这是通过 `tsconfig.json`文件配置的，比如：\n```json\n{\n  \"compilerOptions\": {\n    ...\n    \"paths\": {\n      \"@/*\": [\n        \"src/*\"\n      ]\n    }\n  },\n  ...\n}\n  \n```\n但是看起来 jest 跑起来时并未自动解析 `tsconfig.json`，通过查看 `package.json`中的命令可以看出，跑测试时读取了 `jest-e2e.json`这个文件：\n```json\n{\n  ...\n  \"scripts\": {\n    ...\n    \"test:e2e\": \"jest --config ./test/jest-e2e.json\",\n    ...\n  }\n  ...\n}\n```\n于是，推测应该将基于项目根目录的绝对路径引用方式配置到 `jest-e2e.json`文件中。\n<a name=\"Ob1pF\"></a>\n## 【解决】\n打开 `test/jest-e2e.json`文件，加入如下配置：\n```json\n{\n  ...\n  \"rootDir\": \"..\",\n  \"moduleNameMapper\": {\n    \"@/(.*)\": \"<rootDir>/src/$1\"\n  }\n  ...\n}\n```\n注意，由于这个文件在 `test`目录下，所以其项目根目录的配置应该为上层目录：\"..\"。<br />重新运行 `yarn test:e2e`，成功！\n"
  },
  {
    "id": 42416447,
    "title": "机器学习之 AWS DeepRacer 初体验",
    "description": "机器学习这门科学所关注的问题是：计算机程序如何随着经验积累自动提高性能。近年来，机器学习被成功地应用于很多领域，从检测信用卡交易欺诈的数据挖掘程序，到获取用户阅读兴趣的信息过滤系统，再到能在高速公路上自动行驶的汽车。—— 美·Tom M. Mitchell 著《机器学习》 CIP 数据核字（2...",
    "custom_description": null,
    "updated_at": "2021-04-11T05:21:00.000Z",
    "created_at": "2021-04-11T05:08:15.000Z",
    "slug": "hk1ggb",
    "word_count": 3283,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1618056524073-12af5ea4-c4e7-4f73-8408-97cccac59356.png",
    "body": "> 机器学习这门科学所关注的问题是：计算机程序如何随着经验积累自动提高性能。近年来，机器学习被成功地应用于很多领域，从检测信用卡交易欺诈的数据挖掘程序，到获取用户阅读兴趣的信息过滤系统，再到能在高速公路上自动行驶的汽车。\n> \n\n> —— 美·Tom M. Mitchell 著《机器学习》 CIP 数据核字（2002）第 077094 号\n\n<a name=\"MvCtg\"></a>\n## <br />\n<a name=\"hI5gT\"></a>\n## 先炫耀一下\n\n\n看起来，机器学习应用于自动驾驶，至少也有 20 多年历史了。但是直到上周五，我才有幸第一次零距离参与了一把。<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618056524073-12af5ea4-c4e7-4f73-8408-97cccac59356.png#align=left&display=inline&height=944&margin=%5Bobject%20Object%5D&name=image.png&originHeight=944&originWidth=1080&size=778992&status=done&style=none&width=1080)<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618058503380-dfc8bba6-acce-45bf-91e1-7e4fb84c2372.png#align=left&display=inline&height=617&margin=%5Bobject%20Object%5D&name=image.png&originHeight=617&originWidth=1080&size=1058497&status=done&style=none&width=1080)<br />\n<br />昨天有幸参加了亚马逊云科技的“机器学习及自动驾驶体验日”活动，并且所在小组 Alpha Car 在比赛中竟以微弱优势拿了冠军。<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618056602018-4a19bf06-00a1-4a3d-80d9-aba8abd05f30.png#align=left&display=inline&height=1080&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1080&originWidth=1623&size=1416824&status=done&style=none&width=1623)<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618058169172-7b9a9baf-ff33-458f-9904-ca28b17eeeed.png#align=left&display=inline&height=1080&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1080&originWidth=1623&size=2592982&status=done&style=none&width=1623)<br />\n<br />还领到一张很有逼格的奖状：<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618058269554-d0a0b5ff-5f54-46e3-8039-e308d6e92f1f.png#align=left&display=inline&height=1080&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1080&originWidth=1440&size=1897260&status=done&style=none&width=1440)\n<a name=\"EMUcY\"></a>\n## \n<a name=\"vTFL5\"></a>\n## 感恩\n\n\n> 职业程序员用自己的时间来练习。老板的职责不包括避免你的技术落伍，也不包括为你打造一份好看的履历。医生练习手术不需要病人付钱，球员练习绕桩（通常）不需要球迷付钱，乐手练习音阶也不需要乐迷付钱。所以老板没有义务为程序员的练习来买单。\n> \n\n> —— 【美】Robert C. Martin 《代码整洁之道：程序员的职业素养》\n\n\n<br />Bob 大叔在强调程序员的专业素养时指出，保持自己的学习跟上时代节奏，是自己的责任，而且应该在业余时间完成，而不应该占用雇主的时间，也不应该期待雇主支付相关的费用。<br />\n<br />虽然如此，仍然有雇主会在工作日给员工提供培训的机会，甚至花费大量金钱。对这样的雇主，我心存感激！<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618115298138-ad929fea-854f-426e-bc20-96e617c78972.png#align=left&display=inline&height=718&margin=%5Bobject%20Object%5D&name=image.png&originHeight=718&originWidth=1080&size=1150076&status=done&style=none&width=1080)<br />\n\n<a name=\"VZjV8\"></a>\n## AWS DeepRacer 简介\n\n<br />官网：[https://aws.amazon.com/cn/deepracer/?nc2=type_a](https://aws.amazon.com/cn/deepracer/?nc2=type_a)<br />\n<br />使用 AWS DeepRacer，可以在云上进行自动驾驶赛车训练，随后既可以参加线上虚拟赛车，也可以将训练好的赛车模型导出为压缩文件，上传至真正的 AWS DeepRacer 赛车上，在真实跑道上进行比赛。<br />\n<br />它号称各种技能水平的开发人员都可以通过其基于云的 3D 赛车模拟器亲身体验机器学习，我实际体验下来，发现 AWS 真的做到了！最大的感受是，DeepRacer 整个系统解耦做得相当漂亮，多数步骤都使用界面引导，唯一需要写代码的部分，就是奖励函数，采用 Python 编码，相当简单，的确对于开发菜鸟，也能使用！<br />\n<br />你可以参加免费的在线培训：[https://www.aws.training/Details/eLearning?id=32143](https://www.aws.training/Details/eLearning?id=32143)，学完也可以拿一个很有逼格的结业证书，像这样：<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618109721016-545effe8-32c8-4b8b-82cf-e2fe3f3a3b74.png#align=left&display=inline&height=1416&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1416&originWidth=2048&size=207166&status=done&style=none&width=2048)<br />\n\n<a name=\"Ge0Zx\"></a>\n## 机器学习问题的标准描述\n\n<br />首先看一下机器学习的严格定义：对于某类任务 **T** 和性能度量 **P**，如果一个计算机程序在 **T** 上以 **P** 衡量的性能随着经验 **E** 而自我完善，那么我们成这个计算机程序在从经验 **E** 中**学习**。<br />\n<br />比如对于 AWS 的 DeepRacer 中的计时赛，就是这样一个机器人驾驶学习问题：<br />\n\n- 任务 **T**：通过视觉传感器在赛车道上行驶\n- 性能标准 **P**：无差错行驶指定圈数所花费的时间（时间越短越好，行驶过程中不能出轨道）\n- 训练经验 **E**：使用模型中配置好的驾驶指令在 AWS DeepRacer 提供的 3D 赛车赛道上进行驾驶\n\n\n<br />简而言之，机器学习就是“**通过经验提高性能的某类程序**”。<br />\n\n<a name=\"EZgFu\"></a>\n## 机器学习的一般套路\n\n<br />通过使用 AWS DeepRacer，你可以毫不费力地亲身体验到机器学习的一般套路，而且生动，令人难忘。<br />\n\n<a name=\"hDItf\"></a>\n### 选择训练经验\n\n<br />这是机器学习系统面临的第一个设计问题，在 AWS DeepRacer 中，预设计了各种赛道，你只需要点击选择就好。<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618061079851-44fcb559-7725-4d0c-b8e6-5f8bd14b5d22.png#align=left&display=inline&height=7608&margin=%5Bobject%20Object%5D&name=image.png&originHeight=7608&originWidth=1532&size=1887149&status=done&style=none&width=1532)<br />\n<br />具体地说，AWS DeepRacer 采用的强化学习方法，赛道信息在其中被称为环境，也就是轨道。轨道中定义了赛车可以走动的地方，以及被允许的状态。赛车在轨道中探索并搜集数据，这些被搜集的数据就被用作底层神经网络的训练经验。<br />\n\n<a name=\"gIJBo\"></a>\n### 选择目标函数\n\n<br />这是机器学习系统面临的第二个设计选择，它需要决定要学习的知识的确切类型以及执行程序怎样使用这些知识。对于赛车问题，由于只要不出轨道，前进方向正确，都是被允许的驾驶方式，最终的程序只要并且必须学会从所有的驾驶方式中选择最快速跑完指定圈数的驾驶策略。很明显，要学习的信息类型就是一个程序或者函数，该函数以赛车在轨道中所处的状态作为输入，并且从所有被允许的驾驶策略中产生某个驾驶行为作为输出。即 **V**: State -> Result。如前面所介绍的，这个函数被体现为奖励函数，是唯一需要写点代码的部分。<br />\n<br />这个函数写起来虽然简单，但却是产生好的结果的关键所在。根据我的体验，这个函数并不是越复杂越好，相信也没有人能预先写出最佳的奖励函数，一定是各种摸索，最终找到一个最好的，而且在未来被更好的奖励函数打败也是很正常的。<br />\n<br />具体来说，对于任意的赛车状态，奖励函数的准确值应该是多少呢？最简单的做法是不管什么状态，总是给予奖励。这显然不会产生好的结果；也许你会想到，应该奖励行进在轨道中间，离中线不要太远的驾驶行为。要写出自己想要的奖励函数，需要先了解一下 AWS DeepRacer 都提供了哪些赛车状态参数、可以产生哪些具体的驾驶行为以及奖励函数在 AWS DeepRacer 中的具体体现形式。\n\n如前所述，在 AWS DeepRacer 中，奖励函数是一段 Python 代码，它可以读取描述当前状态的参数，并返回一个奖励数值。参数描述了赛车状态的不同方面，比如位置、在轨道中的朝向、速度、转角等等。\n\n所谓状态，就是赛车所在的环境在指定时刻的快照，即赛车的前置摄像头所捕获的图片。AWS DeepRacer 系统可以为奖励函数提供的参数一共有 13 种：\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618106779003-123ff8ff-b903-40b1-9fc6-57ffe11ac976.png#align=left&display=inline&height=405&margin=%5Bobject%20Object%5D&name=image.png&originHeight=405&originWidth=720&size=39022&status=done&style=none&width=720)\n\n1. `x` and \n1. `y<br />`赛车在轨道上的位置<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618063138235-5bdcee6f-f485-4f69-b559-bb387db7cd3c.png#align=left&display=inline&height=900&margin=%5Bobject%20Object%5D&name=image.png&originHeight=900&originWidth=1054&size=83286&status=done&style=none&width=1054)\n1. `heading<br />`赛车在轨道上的朝向<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618101215709-b80ee8c9-f577-4f96-8671-8b353ed5495d.png#align=left&display=inline&height=604&margin=%5Bobject%20Object%5D&name=image.png&originHeight=604&originWidth=814&size=44809&status=done&style=none&width=814)\n1. `waypoints`<br />航路点坐标列表<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618063099341-0b93619b-29b2-455b-98fc-9990b338348f.png#align=left&display=inline&height=566&margin=%5Bobject%20Object%5D&name=image.png&originHeight=566&originWidth=816&size=74532&status=done&style=none&width=816)\n1. `closest_waypoints`<br />赛道上离赛车最近的 2 个航路点\n1. `progress`<br />跑完的轨道部分百分比\n1. `steps` 完成的步数<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618112811092-b6c61e8d-c87c-4a35-b54c-4f67b0ac7de7.png#align=left&display=inline&height=1822&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1822&originWidth=2998&size=1772231&status=done&style=none&width=2998)\n1. `track_width` <br />轨道宽度<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618063039534-552dd093-3c87-414a-983d-c4bceb1b81c5.png#align=left&display=inline&height=1110&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1110&originWidth=634&size=71530&status=done&style=none&width=634)\n1. `distance_from_center` <br />偏离轨道中线的距离<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618063020926-c6b1adda-c0d4-4d4c-96c1-637eb0f9b009.png#align=left&display=inline&height=1138&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1138&originWidth=652&size=77152&status=done&style=none&width=652)\n1. `is_left_of_center` <br />赛车是否在中线左边？\n1. `all_wheels_on_track` <br />赛车是否完全处于轨道界内？<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618063002298-20509d8a-2c34-48e2-9d5d-60b580d40f4d.png#align=left&display=inline&height=567&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1134&originWidth=648&size=80025&status=done&style=none&width=324) ![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618101515924-83c73f12-2d63-4198-8ea5-45d8168415c0.png#align=left&display=inline&height=566&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1132&originWidth=648&size=87977&status=done&style=none&width=324)\n1. `speed` <br />赛车车速<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618062967759-5207c2d8-ccd8-4a4c-9532-3731cd5f705c.png#align=left&display=inline&height=1120&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1120&originWidth=676&size=90973&status=done&style=none&width=676)\n1. `steering_angle` <br />前轮方向盘转角 <br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618062948608-9f4e36a7-0260-47d1-809c-65e5a57e0f1b.png#align=left&display=inline&height=1124&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1124&originWidth=686&size=81299&status=done&style=none&width=686)\n\n\n\n如前所述，你可以根本就不使用这些参数，全部情况下都给予奖励。或者利用全部的参数，但是并不一定就有好的结果。我在实验时，选择了对靠中线，以及不出界的情况给予奖励，奖励函数代码如下：\n\n<a name=\"O73PX\"></a>\n### ![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618101865809-39e94ce2-74bd-4dd6-b66f-a3ad325dcb54.png#align=left&display=inline&height=1110&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1110&originWidth=1482&size=191139&status=done&style=none&width=1482)\n编辑完奖励函数，就可以开始训练了，训练过程中可以查看过程详情：<br />![screencapture-console-aws-amazon-deepracer-home-2021-04-09-11_42_38.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618118388570-5773cd15-7050-48ac-93f4-91a518d5224a.png#align=left&display=inline&height=3804&margin=%5Bobject%20Object%5D&name=screencapture-console-aws-amazon-deepracer-home-2021-04-09-11_42_38.png&originHeight=3804&originWidth=3840&size=2036307&status=done&style=none&width=3840)\n<a name=\"8I9Fz\"></a>\n### <br />选择目标函数的表示\n\n\n前面一步的目标函数是形如** V**:** **State -> Result 的形式，即从当前状态可以映射称一个结果（好或者坏）。这是一个理想的函数，实际上只能得到 ![](https://cdn.nlark.com/yuque/__latex/6d06db0dc1d8f0f84c81e5a8e6d5ae9e.svg#card=math&code=%5Chat%7BV%7D%20&height=20&width=12) ，一个 **V** 的估计。学习的过程就是尽量较少估计值 ![](https://cdn.nlark.com/yuque/__latex/6d06db0dc1d8f0f84c81e5a8e6d5ae9e.svg#card=math&code=%5Chat%7BV%7D%20&height=20&width=12) 和理想值 **V **的误差的过程。\n\n这个具体的表示不用关心，只需要知道底层是一个 CNN 网络就行，具体表示可以理解为一个加权平均函数。也就是说，AWS DeepRacer 使用了一个 CNN 网络，然后通过类似加权平均这样的计算，努力使得这个结果值，和奖励函数的返回值接近。\n\n权重就是学习过程所要调整的数值，而参数除了上面介绍的 13 个状态参数外（模型之内），还有超参数（模型之外）。超参数是人工调整的，而模型参数则是学习过程自动调整的。所以机器学习，实际上是人机共同学习。机器学习负责模型参数的调整，有各种算法，但是归根结底是一种试错改进法。同样，需要人工调整的超参数，也是人通过试错调整的方式，慢慢改进得到的较好的值。\n\n<a name=\"OQa3c\"></a>\n### 选择函数逼近算法\n\n<br />这个算法的根本目的在于逐步减小目标函数估计值和理想值的误差，关键在于更新权值的策略。大致做法是从任意指定的初始权值开始，使用目标函数的具体表示计算出 ![](https://cdn.nlark.com/yuque/__latex/6d06db0dc1d8f0f84c81e5a8e6d5ae9e.svg#card=math&code=%5Chat%7BV%7D%20&height=20&width=12)，然后计算 **V** 和  的误差。注意这个 **V** 是奖励函数的返回值，因此实际奖励和实际模型拟合出的结果的误差就能指导学习过程去调整权重。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618110981190-450830b1-4593-49a0-981a-053b27e9867a.png#align=left&display=inline&height=751&margin=%5Bobject%20Object%5D&name=image.png&originHeight=751&originWidth=1098&size=170406&status=done&style=none&width=1098)<br />AWS DeepRacer 支持两种算法，默认选项是 Huber 算法，你也可以改成均方差算法。他们的区别是均方差算法带来的权值改动会使得误差波动更大，因此收敛性会逊于 Huber。<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618111089037-ead748e8-9bc3-42e6-86e1-3710b599231a.png#align=left&display=inline&height=1714&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1714&originWidth=3212&size=1149403&status=done&style=none&width=3212)\n<a name=\"LgzAW\"></a>\n### \n<a name=\"SKvew\"></a>\n### 最终设计\n\n<br />任何机器学习系统，最终会包含如下几个核心模块：<br />\n\n![](https://cdn.nlark.com/yuque/__puml/64bc8ec083c10d07227192f9f4b9c1d9.svg#lake_card_v2=eyJjb2RlIjoiQHN0YXJ0dW1sXG5zdGF0ZSBcIuWunumqjOeUn-aIkOWZqFwiIGFzIGdlbmVyYXRvclxuc3RhdGUgXCLms5vljJblmahcIiBhcyBnZW5lcmFsaXplclxuc3RhdGUgXCLpibTlrprlmahcIiBhcyByZXdhcmRlclxuc3RhdGUgXCLmiafooYzns7vnu59cIiBhcyBleGVjdXRvclxuIFxuZ2VuZXJhdG9yIC1yaWdodC0-IGV4ZWN1dG9yOiDmlrDpl67popjvvIjotZvpgZPvvIlcbmV4ZWN1dG9yIC1kb3duLT4gcmV3YXJkZXI6IOino-etlOi3r-e6v1xucmV3YXJkZXIgLWxlZnQtPiBnZW5lcmFsaXplcjog6K6t57uD5qC35L6L77yI5pGE5YOP5aS05o2V6I6355qE5Zu-5YOPXFxu5Lul5Y-K5a-55bqU55qE5a6e6ZmF5aWW5Yqx77yJXG5nZW5lcmFsaXplciAtdXAtPiBnZW5lcmF0b3I6IOWBh-iuvu-8iOaooeWei-aLn-WQiOe7k-aenO-8iVxuQGVuZHVtbCIsInR5cGUiOiJwdW1sIiwibWFyZ2luIjp0cnVlLCJpZCI6Im44QTVQIiwidXJsIjoiaHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlL19fcHVtbC82NGJjOGVjMDgzYzEwZDA3MjI3MTkyZjlmNGI5YzFkOS5zdmciLCJjYXJkIjoiZGlhZ3JhbSJ9)\n<br />AWS DeepRacer 采用了机器学习中的强化学习方法，这是区别于**有监督学习**和**无监督学习**之外的，第三种机器学习类型，其设计如下：<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618113266705-1acaa97f-fbcf-4c07-abd1-fd86cb004bf5.png#align=left&display=inline&height=822&margin=%5Bobject%20Object%5D&name=image.png&originHeight=822&originWidth=1066&size=136787&status=done&style=none&width=1066)<br />\n<br />其中环境对应实验生成器，奖励环节对应鉴定器，代理人对应执行系统。代理人在指定环境中探索通过执行能够带来奖励的动作并且避免带来惩罚的动作来学习需要完成的任务。\n<a name=\"BF7fU\"></a>\n## \n<a name=\"t8J9L\"></a>\n## 总结\n\n<br />机器学习分成三种类型：有监督学习、无监督学习以及强化学习。AWS DeepRacer 是一个设计得非常棒的系统，将非常复杂的机器学习课程，呈现得无比简单。它构建在已有的 AWS 资源上，比如环境、模型等静态数据存储在 S3 上，而训练过程中的动态数据存储在 Redis 中，并不断更新。各个组件解耦做得相当漂亮，用户只需要在奖励函数这部分写一点点代码，其他都通过友好的界面引导完成，这真的是名副其实的机器学习低代码平台！尽管 AWS DeepRacer 采用的强化学习，但是可以完整地体验到机器学习中的一般套路。<br />\n\n<a name=\"Rxwrh\"></a>\n## 彩蛋\n\n\n> （只要是）我不能创造的，我就（还）没有理解。\n> \n\n> —— 物理学家费曼\n\n\n<br />AWS DeepRacer 非常棒，但是要使用它，由于会使用到存储和计算，因此会产生费用。作为程序员，如果想要自己实现它，工程量又实在太大太大了。但是，凭一己之力，实现一个机器学习版的井字棋游戏，还是完全可能的。而且虽然不一定采用强化学习，但只要是机器学习，套路都是一样的。你可以先去 [https://tictactoe.js.org](https://tictactoe.js.org) 体验一下，然后按照本文介绍的套路自己撸一个。如果碰到困难可以参考它的源码：[https://github.com/Jeff-Tian/tic-tac-toe-ai](https://github.com/Jeff-Tian/tic-tac-toe-ai)，以及图文逐步指导：[https://mp.weixin.qq.com/s/xzE-kVvMqqtHOe276k706g](https://mp.weixin.qq.com/s/xzE-kVvMqqtHOe276k706g) 。\n<a name=\"TNXe2\"></a>\n### \n"
  },
  {
    "id": 34388573,
    "title": "代码如诗，牛刀小试 —— 一个小小编程练习",
    "description": "这道题的逻辑对我来说太简单了，但是，我的文言文水平，是在是令人捉急！https://github.com/josevalim/nested-data-structure-traversal/blob/master/wenyan/recursive.wy像诗一样优美的代码有人问雷军：“你写过诗吗...",
    "custom_description": null,
    "updated_at": "2021-04-08T12:03:41.000Z",
    "created_at": "2021-04-08T12:03:41.000Z",
    "slug": "yyt229",
    "word_count": 8356,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1617882990375-c665cdcd-3827-4ae2-bf9b-49185e53c6ad.png",
    "body": "> 这道题的逻辑对我来说太简单了，但是，我的文言文水平，是在是令人捉急！\n> [https://github.com/josevalim/nested-data-structure-traversal/blob/master/wenyan/recursive.wy](https://github.com/josevalim/nested-data-structure-traversal/blob/master/wenyan/recursive.wy)\n\n<a name=\"38zWR\"></a>\n## 像诗一样优美的代码\n有人问雷军：“你写过诗吗？”<br />雷军回答：“没有。但是有人说过，我写的代码，就像诗一样优美。哈哈哈哈哈哈哈哈哈哈”<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617882990375-c665cdcd-3827-4ae2-bf9b-49185e53c6ad.png#align=left&display=inline&height=2000&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2000&originWidth=725&size=1262022&status=done&style=none&width=725)<br />像诗一样优美，这样的代码，真的是艺术中的艺术了！<br />\n\n<a name=\"eUTlA\"></a>\n## 工欲善其事，必先利其器\n但是，工欲善其事，必先利其器。如果编程语言本身很丑，实在令程序员不爽。所以，要写出像诗一样的代码，得先找个足够优美的编程语言。到目前为止，文言文编程语言，是最惊艳我的一门编程语言。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617882259097-9dae431b-10a3-4311-8416-26ad5310c934.png#align=left&display=inline&height=906&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1812&originWidth=1976&size=551492&status=done&style=none&width=988)\n<a name=\"LQgDk\"></a>\n## 使用不熟悉的编程语言进行开源贡献\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617883299122-b249b8e6-cb2b-4368-b101-1bdd263bd98d.png#align=left&display=inline&height=438&margin=%5Bobject%20Object%5D&name=image.png&originHeight=438&originWidth=666&size=208076&status=done&style=none&width=666)\n> 专业人士都需要通过专门训练提升自己的技能，无一例外。乐手练习音阶，球员练习绕桩，医生练习开刀和缝针，律师练习论辩，士兵练习执行任务。要想表现优异，专业人士就会选择练习。\n> \n\n> 保持不落伍的一种方法是为开源项目贡献代码，就像律师和医生参加公益活动一样。开源项目有很多，为其他人真正关心的开源项目做一点贡献，应该可以算是提升技能的最好办法了。\n> \n\n> 所以，如果你是Java程序员，请为Rails项目做点贡献。如果你为老板写了很多C++，可以找一个Python项目贡献代码。\n> —— [美] Robert C. Martin 《代码整洁之道：程序员的职业素养》\n\nBob 大叔在《代码整洁之道：程序员的职业素养》中建议我们多用自己不熟悉的语言为开源项目贡献代码，我在工作中使用 TypeScript 语言，所以我决定使用文言语言编程语言，为开源项目 [nested-data-structure-traversal](https://github.com/josevalim/nested-data-structure-traversal) 做一点贡献。<br />这个开源项目目前一共有 149 星，并不是太知名。它主要是收集各种编程语言解决一个嵌套数据结构的遍历和标记问题，其 README 上给的 Python 示例，虽然行数较少，但是并不令人满意，因为它修改了传入的参数，有副作用。\n<a name=\"5vUFB\"></a>\n## 分析\n通过应用不可变思想，采用递归方案，不仅同样可以实现代码行数比较少，没有副作用，而且还能避免使用循环语句。\n<a name=\"VODDS\"></a>\n## 文言实现效果\n最终代码行数还是超过了 100 行，但是多数是测试代码。不过，主要由于文言水平太差，以及对文言编程语言不熟，所以最终没能写成诗。好在项目的作者并不介意，提了 PR，秒合！[https://github.com/josevalim/nested-data-structure-traversal/pull/69/files](https://github.com/josevalim/nested-data-structure-traversal/pull/69/files)\n```\n注曰：访问 https://ide.wy-lang.org/?file=%E9%81%8D%E5%8E%86%E5%B5%8C%E5%A5%97%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84，\n注曰：粘贴本页代码，即可运行。\n\n注曰：遍访并标记嵌套数据结构编程练习\n\n吾有一術名之曰「访问章节列表」：\n欲行是術必先得一物曰「章节列表」、一物曰「章节计数器」、一物曰「课程计数器」、一物曰「累积者」。\n乃行是術曰：\n    夫「章节列表」之一，名之曰「此章节」。\n    夫「章节列表」之其餘，名之曰「其餘章节」。\n    吾有一數、曰一，名之曰「索引一」。\n    吾有一數、曰一，名之曰「索引二」。\n    夫「此章节」之「「reset_lesson_position」」，變其，名之曰「课程计数未重置」。\n    \n    若「课程计数未重置」者：\n        夫「此章节」之「「lessons」」，名之曰「课程列表」。\n        夫「课程列表」之長，加「课程计数器」以其。\n        昔之「索引一」者、今其是矣。\n        昔之「索引二」者、今「课程计数器」是矣。\n    云云。\n\n    昔之「此章节」之「「position」」者、今「章节计数器」是矣。\n    夫「此章节」之「「lessons」」，名之曰「课程列表」。\n    吾有一列，名之曰「虚空」。\n    施「访问课程列表」於「课程列表」、於「索引二」、於「虚空」。\n    昔之「此章节」之「「lessons」」者、今其是矣。\n    充「累积者」以「此章节」。\n\n    若「其餘章节」之長不大於零者，乃得「累积者」云云。\n\n    加「章节计数器」以一，名之曰「新章节计数器」。\n    施「访问章节列表」於「其餘章节」、於「新章节计数器」、於「索引一」、於「累积者」，\n    名之曰「已访问之章节列表」，乃得 「已访问之章节列表」！\n是謂「访问章节列表」之術也。\n\n噫！吾有一術名之曰「访问课程列表」：\n欲行是術必先得一物曰「课程列表」、一物曰「课程计数器」、一物曰「累积者」。\n乃行是術曰：\n    變「课程列表」名之曰「未见课程列表」。\n    夫「课程列表」之長，名之曰「長度」。\n    吾有一爻，名之曰「或虚空」。若「長度」等於零者，昔之「或虚空」者今陽是矣云云。\n    夫「未见课程列表」「或虚空」中有陽乎？名之曰「無实」。\n    若「無实」者，乃得「累积者」云云。\n\n    夫「课程列表」之一，名之曰「此课程」；\n    夫「课程列表」之其餘，名之曰「其餘课程」。\n    昔之「此课程」之「「position」」者今「课程计数器」是矣。\n    \n    充「累积者」以「此课程」。\n    加「课程计数器」以一，名之曰「新课程计数器」。\n    施「访问课程列表」於「其餘课程」、於「新课程计数器」、於「累积者」，\n    名之曰「已访问课程列表」，乃得 「已访问课程列表」！\n是謂「访问课程列表」之術也。\n\n噫！吾有一術名之曰「遍访章节」：\n欲行是術必先得一物曰「章节列表」。\n乃行是術曰：\n    吾有一列，名之曰「虚空」。\n    施「访问章节列表」於「章节列表」、於一、於一、於「虚空」，\n    名之曰「已遍访章节」，乃得「已遍访章节」！\n是謂「遍访章节」之術也。\n\n噫！吾有一術名之曰「造测试数据」：\n乃行是術曰：\n    噫！吾有一列名之曰「庚未」，\n    吾有一物名之曰「丑甲」。\n    昔之「丑甲」之「「title」」者今「「Getting started」」是矣。\n    昔之「丑甲」之「「reset_lesson_position」」者今陰是矣。\n    吾有一列名之曰「辛戊」，\n    吾有一物名之曰「已访问课程列表」。\n    昔之「已访问课程列表」之「「name」」者今「「Welcome」」是矣。\n    吾有一物名之曰「戌丁」，\n    昔之「戌丁」之「「name」」者今「「Installation」」是矣。\n    充「辛戊」以「已访问课程列表」、以「戌丁」。\n    昔之「丑甲」之「「lessons」」者今「辛戊」是矣。\n    吾有一物名之曰「酉寅」，\n    昔之「酉寅」之「「title」」者今「「Basic operator」」是矣。\n    昔之「酉寅」之「「reset_lesson_position」」者今陰是矣。\n    吾有一列名之曰「未甲」，\n    吾有一物名之曰「二申」。\n    昔之「二申」之「「name」」者今「「Addition / Subtraction」」是矣。\n    吾有一物名之曰「未丑」，\n    昔之「未丑」之「「name」」者今「「Multiplication / Division」」是矣。\n    充「未甲」以「二申」、以「未丑」。\n    昔之「酉寅」之「「lessons」」者今「未甲」是矣。\n    吾有一物名之曰「二寅」，\n    昔之「二寅」之「「title」」者今「「Advanced topics」」是矣；\n    昔之「二寅」之「「reset_lesson_position」」者今陽是矣。\n    吾有一列名之曰「卯乙」，\n    吾有一物名之曰「寅丙」。\n    昔之「寅丙」之「「name」」者今「「Mutability」」是矣。\n    吾有一物名之曰「壬庚」，\n    昔之「壬庚」之「「name」」者今「「Immutability」」是矣。\n    充「卯乙」以「寅丙」、以「壬庚」。\n    昔之「二寅」之「「lessons」」者今「卯乙」是矣。\n    充「庚未」以「丑甲」、以「酉寅」、以「二寅」。\n    乃得「庚未」！\n是謂「造测试数据」之術也。\n\n施「造测试数据」之術，名之曰「测试数据」。\n施「遍访章节」於「测试数据」，名之曰「已遍访章节」。\n\n吾有一物曰「已遍访章节」，書之！\n\n夫「已遍访章节」之三，名之曰「末章节」；\n夫「末章节」之「「title」」，曰「标题」。\n\n吾有一物，曰「标题」。書之！\n\n夫「末章节」之「「lessons」」，名之曰「末章节之课程」；\n夫「末章节之课程」之一，名之曰「课程一」；\n夫「末章节之课程」之二，名之曰「课程二」。\n夫「课程一」之「「position」」，曰「位置一」；\n夫「课程二」之「「position」」，曰「位置二」。\n\n吾有二物，曰「位置一」、「位置二」。書之！\n```\n<a name=\"hCBM0\"></a>\n## 彩蛋\n附上雷军 1989 年写的汇编，能把汇编写成诗，实在是高手高手高高手。不过和我写的小诗不同，雷军写的那可是长篇史诗！\n```\n;\n; RI.ASM Revision 2.12 [ July 12, 1994 ]\nRevision equ 'V2.12 '\n;\n;\n;\n;  RAMinit Release 2.0 \n;  Copyright (c) 1989-1994 by Yellow Rose Software Co.\n;  Written by Mr. Leijun\n;\n;  Function:\n;  Press HotKey to remove all TSR program after this program\n;\n;\n\n; ..........................................................................\n; Removed Softwares by RI:\n; SPDOS v6.0F, WPS v3.0F\n; Game Busters III, IV\n; NETX ( Novell 3.11 )\n; PC-CACHE\n; Norton Cache\n; Microsoft SmartDrv\n; SideKick 1.56A\n; MOUSE Driver\n; Crazy (Monochrome simulate CGA program)\n; RAMBIOS v2.0\n; 386MAX Version 6.01\n; ..........................................................................\n; No cancel softwares:\n; Windows 3.1 MSD\n;\n; No removed TSR softwares:\n; MS-DOS fastopen\n; Buffers, Files ... (QEMM 6.0)\n; QCache (386MAX 6.01)\n; ..........................................................................\n;\nCOMMENT\n\nV2.04 Use mouse driver software reset function to initiation mouse\n2/17/1993 by Mr. Lei and Mr. Feng\nV2.05 RI cannot work in Windows DOS prompt\n3/9/1993 by Mr. Lei\nV2.06 1. When XMS cannot allocate 1K memory, RI halts.\n2. RI repeat deallocates EMS memory.\nV2.07 HotKey Setup Error\n4/25/1993 by Mr. Lei\nV2.08 KB Buffer\nV2.10 1. Release high memory blocks (EMM386 QEMM386 S-ICE 386MAX)\n2. RI copies flag\nV2.12 1. Exists a critical error in Init 8259 procedure\n2. Save [40:F0--FF] user data area\n\n\n\ndosseg\n.model tiny\n.code\nlocals @@\norg 100h\n\nStart: jmp Main\norg 103h\n\nTrue equ 1\nFalse equ 0\nMaxHandles equ 100h\n\nINT3 macro\nout 0ffh,al\nendm\n;\n; HotKey Status Test Var\n; --------------- ---------------\n;\n; 7 6 5 4 3 2 1 0 417 418 496\n; . . x . x . . . Left Alt is pressed 8 2\n; x . . . x . . . Right Alt is pressed 8 8\n; . . . x . x . . Left Ctrl is pressed 4 1\n; . x . . . x . . Right Ctrl is pressed 4 4\n; . . . . . . x . Left Shift is pressed 2\n; . . . . . . . x Right Shift is pressed 1\n;\nLeftAlt equ 00101000b\nRightAlt equ 10001000b\nLeftCtrl equ 00010100b\nRightCtrl equ 01000100b\nLeftShift equ 00000010b\nRightShift equ 00000001b\nHotKey db LeftCtrl or RightCtrl\n\nDataBegin dw 0\nNextDataSeg dw 0ffffh\noldInt2F_addr dw 0, 0\nXMS_control dw 0, 0\nHandle_begin dw 0\ncvtOfs dw 0 ; DOS 3.0 equ 0 and above DOS 4.0 is 1\norg 104h\ndb 0dh\ndb Revision\ndb ??date\ndb 26\norg 114h\ntsrLength dw 0\nMachineID db 0FCh ; IBM PC/AT\n\nAuxHotKey db 0 ; 2Dh ; 'X' Scan Code\nAuxHotKeyName db 'X$ '\nPower db True\nFlag db '!'\nKbd102 db 0\nNoFlag db 0\nStopFlag db 1\nDosEnv dw 0\nWorkSeg dw 0\nPrevDataSeg dw 0\nCopies db '1'\nold_8259 db 0 ; 21h port\ndb 0 ; a1h port\n\nStatus dw 0\nXMSbit equ 00000001b\nEMSbit equ 00000010b\nSKbit equ 10000000b\n\nGoINT1C: db 0eah\noldInt1C_addr dw 0, 0\nnewINT1C:\ntest cs:Status, SKbit\njnz GoINT1C\ncmp cs:StopFlag, 0\njz @@0\n;\n; Mr. Lei 2/8/1993\n; Problem: if WPS quit and reenter, old RI cann't control keyboard. ;\npush ds\npush ax\nxor ax, ax\nmov ds, ax\nmov ax, ds:[94]\ncmp ax, offset NewInt9\npop ax\npop ds\njnz GoINT1C\nmov cs:StopFlag, 0\n\n@@0: push ax\npush ds\npush es\nxor ax, ax\nmov ds, ax\nmov es, ds:[94+2]\ncmp word ptr es:[101h], 'IE' ; 'LEI'\njz @@1\ncli\nmov cs:StopFlag, 1\nmov ax, ds:[94]\nmov cs:oldINT9_addr2, ax\nmov ax, ds:[94+2]\nmov cs:oldINT9_addr2[2], ax\nmov ds:[94], offset newINT9_2\nmov ds:[94+2], cs\nsti\n@@1: pop es\npop ds\npop ax\njmp GoINT1C\n\n; ----------------------------------------------------------------------\n; INT2F Func\n;\n; AX = C0D7h Return RI segment in AX\n; AX = C0D8h Removes all TSR programs after RI\n; AX = C0D9h Removes all TSR programs include RI\n; AX = C0DAh Removes all RI copies\n; ----------------------------------------------------------------------\n\nnewINT2F:\ncmp ax, 0c0d7h ; LEI Hanzi GB Code\njnz @@1\npush cs\npop ax\niret\n@@1: cmp ax, 0c0d7h+1\njnz @@2\njmp KeepSelf\n@@2: cmp ax, 0c0d7h+2\njnz @@3\njmp NoKeepSelf\n@@3: cmp ax, 0c0d7h+3\njnz @@9\nmov cs:NextDataSeg, -1\nmov cs:Copies, '1'\njmp NoKeepSelf\n@@9: jmp dword ptr cs:oldInt2F_addr\n\n\nCallInt9:\nret\n\n\nnewINT9_2:\nmov cs:NoFlag, 1\npushf\ndb 9ah ; call far ptr oldint9_addr\noldInt9_Addr2 dw 0, 0\njmp newINT9_proc\n\nnewINT9:\npushf\ndb 9ah ; call far ptr oldint9_addr\noldInt9_Addr dw 0, 0 cmp cs:NoFlag, 0\njz newINT9_proc\nmov cs:NoFlag, 0\niret\nnewINT9_proc:\ncmp cs:Flag, '!' ; busy ?\njnz @@0\niret\n@@0:\nmov cs:Flag, '!' ; set busy flag\npush ax ; cmp hot key\npush bx\npush es\nmov ax,40h\nmov es,ax\n\ncmp cs:AuxHotKey, 0\njz @@_1\nmov bx, es:[1ah]\ncmp bx, es:[1ch]\njz @@10\npush bx\nmov bl, es:[bx+1]\ncmp bl, cs:AuxHotKey\npop bx\njnz @@10\n@@_1:\nmov ah,es:[17h] ; test CTRL SHIFT ALT\nmov al,cs:HotKey\npush ax\nand ax,0f0fh\ncmp al,ah\npop ax\njnz @@10 cmp cs:Kbd102, True\njnz @@1\nshr al, 1\nshr al, 1\nshr al, 1\nshr al, 1\npush ax\nmov ah, es:[18h]\nand ax, 303h\ncmp al, ah\npop ax\njnz @@10\nmov ah, es:[96h]\nshr ax, 1\nshr ax, 1\nand ax, 303h\ncmp al, ah\njnz @@10 cmp cs:AuxHotKey, 0\njz @@_3\ninc bx\ninc bx\ncmp bx, 3eh\njb @@_2\nmov bx, 1eh\n@@_2:\nmov es:[1ah], bx\n@@_3:\ncall IsWinDos\nor ax, ax\njz @@1\ncall Beep\n@@10:\nsti\npop es\npop bx\npop ax\nmov cs:Flag, ' ' ; no busy\niret\n@@1: ; OK\npop es\npop bx\npop ax\n\nKeepSelf:\ncall RemoveTSR\npush es\nmov es,cs:WorkSeg\nmov dx,es:tsrLength\nmov di,dx\nmov al,0h ; Aug 24, 1993\nmov cx,100h\nrep stosb\npop es\nint 27h\n\nNoKeepSelf:\nmov ax,0e07h\nint 10h\nmov cs:clsStr, 47h ; Color (White in Red)\ncall RemoveTSR\ndec cs:Copies\ncall RestoreSelfIntVec\npush es\ncmp cs:PrevDataSeg, 0\njz @@1\nmov es, cs:PrevDataSeg\nmov es:NextDataSeg, -1\n@@1: pop es\nmov ax, 4c00h\nint 21h\n\n; ---------------------------------------------------------------------------\n\nIsWinDOS:\nmov ax, 1600h\nint 2fh\ncmp al, 01h\njz @@9 cmp al, 0ffh\njz @@9 ; Windows/386 Version 2.X\ncmp al, 00h\njz @@1 cmp al, 80h\njnz @@9 ; Windows 3 in enhanced mode\n; Version number in AL/AH\n@@1:\nmov ax, 4680h\nint 2fh\ncmp al, 80h\njnz @@9\nxor ax, ax\njmp @@10\n@@9: mov ax, 1\n@@10: ret\n\n; -----------------------------------------------------------------------\nRestoreSelfIntVec:\ncmp Copies, '0'\njz @@0\nret\n@@0:\ncli\npush cs\npop ds\nxor ax, ax\nmov es, ax\nmov si, offset oldInt9_Addr\nmov di, 94\nmovsw\nmovsw\nmov si, offset oldInt2F_Addr\nmov di, 2Fh4\nmovsw\nmovsw\nmov si, offset oldInt1C_Addr\nmov di, 1Ch4\nmovsw\nmovsw\nsti\nret\n\n; ------------- KERNEL PROGRAM ----------------------------------------------\nRemoveTSR:\npop ax\ncli ; Set stack\nmov sp, cs\nmov ss, sp\nmov sp, 100h\nsti\npush ax\n\ncmp cs:Power, True\njnz @@1\ncall Init8259\n@@1:\npush cs\npop ds\n@@_0:\nmov ax,ds:NextDataSeg\ncmp ax, -1\njz @@_1\nmov cs:PrevDataSeg, ds\nmov ds, ax\njmp @@_0\n@@_1: mov si,ds:DataBegin\nmov cs:WorkSeg, ds\nlodsw\ncmp ax, 'XX'\njz @@_2\ncall Beep\nret\n@@_2:\ncall RestoreEnvStr\ncall RestoreMCB ; restore current mcb\ncall CloseFiles\ncall RestorePort\ncall RestoreLEDs\ncall RestoreVecList ; Restore vectors list\ncall RestoreFloppyParam\ncmp cs:Power, True\njnz @@2\ncall RestoreCVTchain ; Restore cvt chain\ncall RestoreMemoryManager\n@@2:\ncall RestoreBiosData\ncall Enable8259\nmov ah, 1 int 16h\n\ncall RestoreClockSpeed\ncall CloseSpeaker\ncall ResetDisk\ncall UpdateTime\n\ncall ClosePRN\nmov bx,cs:WorkSeg\nmov ah,50h\nint 21h ; Set PSP segment\nmov ax,3 int 10h ; Set display mode\n\ncall InitPRN\ncall InitMouse\nmov al, cs:Copies\ncmp al, '1'\nja @@_sh1\nmov cs:ShowCopies, ''\njmp @@_sh2\n@@_sh1: mov cs:ShowCopies, al\n@@_sh2:\nmov si, offset clsStr\ncall ColorPrintStr\nmov cs:Flag, ' ' ; no busy\ncmp Copies, '1'\njnz @@_end\nmov cs:StopFlag, 0\n@@_end:\ncall ClearKB_buffer\nret\n\nBeep:\nmov ax,0e07h\nint 10h\nret\n\n; #########################################################################\n\nClearKB_Buffer:\npush es\npush bx\nmov bx, 0040h\nmov es, bx\ncli\nmov bx, es:[1ah]\nmov es:[1ch], bx\nsti\npop bx\npop es\nret\n\n\nInit8259:\n; cmp cs:Copies, '1'\n; jz @@1\n; ret\n@@1:\ncmp cs:MachineID, 0fch\nja @@pc_xt\n@@AT:\nmov bx,870h ;\nmov al,0 ;\nout 0F1h,al ;\njcxz $+2\njcxz $+2\nmov al,11h ; ICW1\nout 0A0h,al\njcxz $+2\njcxz $+2\nout 20h,al\njcxz $+2\njcxz $+2\nmov al,bl ; ICW2\nout 0A1h,al\njcxz $+2\njcxz $+2\nmov al,bh\nout 21h,al\njcxz $+2\njcxz $+2\nmov al,2 ; ICW3\nout 0A1h,al\njcxz $+2\njcxz $+2\nmov al,4\nout 21h,al\njcxz $+2\njcxz $+2\nmov al,1 ; ICW4\nout 0A1h,al\njcxz $+2\njcxz $+2\nout 21h,al\njcxz $+2\njcxz $+2\nmov al,0FFh ; OCW1\nout 0A1h,al\njcxz $+2\njcxz $+2\nout 21h,al\nret\n@@PC_XT:\nmov al,13h ; ICW1\nout 20h,al\njcxz $+2\njcxz $+2\nmov al,8 ; ICW2\nout 21h,al\njcxz $+2\njcxz $+2\nmov al,9 ; ICW4\nout 21h,al\njcxz $+2\njcxz $+2\nmov al,0FFh ; OCW1\nout 21h,al\nret\n\nEnable8259:\nmov ax, word ptr cs:old_8259\nout 021h,al\njcxz $+2\njcxz $+2\nmov al,ah\nout 0a1h,al ; DEC PC Bus Mouse\nret ; July 1994 by Mr. Lei\n\n; -------------------------------------------------------------------------\n\nRestoreBiosData:\nlodsw\ncmp ax, '--'\njz @@1\ncall Beep\nret\n@@1: push es\npush di\nmov di, 40h\nmov es, di\n\nmov di, 10h\nmovsw\nmov di, 0a8h ; [40h:a8h]\nmovsw\nmovsw\nmov di, 49h\nmov cx, 1dh\nrep movsb\n\nmov di, 0f0h ; User data\nmov cx, 8\nrep movsw\n\npop di\npop es\nret\n\n; -------------------------------------------------------------------------\n\nRestoreMCB:\npush ds\npush es\nlodsw ; 'MZ'\n@@0: lodsw\ncmp ax, 'MM'\njz @@1\nmov es,ax\nxor di,di\nmovsb\nmovsw\nmovsw\ninc ax\nmov bx, ds\ncmp ax, bx\njz @@10\nmov byte ptr es:[8], 0 ; Aug 24, 1993\n@@10: cmp byte ptr es:[0], 'Z'\njnz @@0\nmov byte ptr es:[10h], 0\njmp @@0\n@@1:\npop es\npop ds\nret\n\n; -------------------------------------------------------------------------\nCloseFiles:\nmov ax, 5 ; Begin handle\npush ds\npush si\nmov cx, 15 ; Max handle\nsub cx, ax\ninc cx\nmov bx, ax\n@@1: push bx\npush cx\nmov ah, 3eh\nint 21h\npop cx\npop bx\ninc bx\nloop @@1\npop si\npop ds\nret\n\n; -------------------------------------------------------------------------\nRestorePort:\nmov di, 40h ; restore port\nmov es, di\nxor di, di\nmov cx, 8\nrep movsw\nret\n\n; -------------------------------------------------------------------------\nRestoreLEDs:\nlodsb\nand al, 11110000b ; LED status\nmov ah, es:[17h]\nand ah, 00001111b\nor ah, al\nand ah, 0f0h ; Clear CTRL ALT SHIFT\nmov es:[17h], ah\nret\n\n; -------------------------------------------------------------------------\nRestoreEnvStr:\nlodsw\npush si\npush di\npush ds\npush es\nmov es, cs:DosEnv\nmov ds, ax\nxor si, si\nmov di, si\n@@0: lodsb\nor al, al\njnz @@1 cmp byte ptr ds:[si], 0\njz @@2\n@@1: stosb\njmp @@0\n@@2: stosb\nstosb\npop es\npop ds\npop di\npop si\nret\n\n; -----------------------------------------------------------------------\nRestoreVecList:\nxor ax,ax\nmov di,ax\nmov es,ax\nmov cx,100h\n@@0: lodsw\nxchg dx, ax\nlodsw\ncmp dx, 'EL'\njnz @@1 cmp al, 'I'\njnz @@1\nsub cl, ah\npush cx\nmov cl, ah\nmov ax, es:[di-4]\nmov dx, es:[di-2]\n@@a: stosw\nxchg ax, dx\nstosw\nxchg ax, dx\nloop @@a\npop cx\nor cx, cx\njz @@9\njmp @@0\n@@1:\nxchg ax, dx\nstosw\nxchg ax, dx\nstosw\nloop @@0\n@@9:\nret\n\n;----------------------------------------------------------------------------\nRestoreFloppyParam: ; Mr. Lei 2/10/1992\npush es\npush ax\nxor ax, ax\nmov es, ax\nmov byte ptr es:[525h], 2\npop ax\npop es\nret\n\n;---------------------------------------------------------------------------\nRestoreCVTchain:\nlodsw\ncmp ax, 'VC'\njz @@_0\ncall Beep\nret\n@@_0:\npush ax\npush cx\npush es\n\n; -----------------------------------------------------------------\nlodsw ; DPB\nmov di, ax\nlodsw\nmov es, ax\n@@1: lodsb\ninc di\nstosb\nadd di, cs:cvtOfs\nadd di, 10h\nmovsw\nmovsw\nles di, es:[di+2]\ncmp di, -1\njnz @@1\n\n; -----------------------------------------------------------------\nlodsw ; DCB\nmov di, ax\nlodsw\nmov es, ax\nxor ax, ax\ndec ax\nstosw\n\n; -----------------------------------------------------------------\nlodsw ; Device Driver Chain\nmov di, ax\nlodsw\nmov es, ax\nxor cx, cx\n@@9: push di\nmov cl, 5\nrep movsw\npop di\nles di, es:[di]\nmov ax, di\ninc ax\njnz @@9\npop es\npop cx\npop ax\nret\n\n; ----------------------------------------------------------------------------\nRestoreMemoryManager:\ntest cs:Status, XMSbit\njz @@1\ncall LoadXMSstatus\n@@1:\ntest cs:Status, EMSbit\njz @@2\ncall LoadEMSstatus\n@@2:\nret\n\n\nLoadEMSstatus:\nlodsw\ncmp ax, 'ME'\njz @@_0\ncall Beep\nret\n@@_0:\nlodsw\nmov cx, ax\nxor dx, dx\n@@_1: push ds\npush si\npush dx\npush cx\n\n@@0: cmp dx, ds:[si]\njz @@1\nadd si, 4\nloop @@0\n\npush cx\nmov cx, 5\n@@0: mov ah, 45h ; Deallocate Handle and Memory\nint 67h\nor ah, ah\njz @@1\nloop @@0\n@@1: pop cx\n\n@@1:\npop cx\npop dx\npop si\npop ds\ninc dx\ncmp dx, 100h\njb @@_1\nshl cx, 1\nshl cx, 1\nadd si, cx\nret\n\n\nLoadXMSstatus:\nlodsw\ncmp ax, 'MX'\njz @@_0\ncall Beep\nret\n@@_0:\nlodsw\nmov cx, ax\njcxz @@5\n@@1:\nlodsw\nmov dx, ax\n@@2: push dx\nmov ah, 0ah ; free\ncall dword ptr cs:xms_control\nor ax, ax\npop dx\njnz @@4 cmp bl, 0abh\njnz @@4\npush dx\nmov ah, 0dh ; unlock\ncall dword ptr cs:xms_control\nor ax, ax\npop dx\njmp @@2\n@@4: loop @@1\n@@5: ret\nendp\n\n; -----------------------------------------------------------------------\nCloseSpeaker:\nin al, 61h\nand al, 0fch\nout 61h, al\nret\n\n; -----------------------------------------------------------------------\nRestoreClockSpeed:\nmov al, 00110110b\nout 43h, al\nxor ax, ax\nout 40h, al\nout 40h, al\nret\n\n; -----------------------------------------------------------------------\nResetDisk:\nxor ax, ax\nxor dx, dx\nint 13h ; Restore A\ninc dx\nint 13h ; Restore B\nmov dl, 80h\nint 13h ; Restore C\nret\n\n\n\n; --------------------------------------------------------------------------\nClosePRN:\nmov ah, 51h ; Get PSP seg\nint 21h\nmov es, bx\nmov ax, es:[16h] ; Prev PSP seg\ncmp ax, bx\njnz @@9\nmov ax, 3e00h ; COMMAND\nmov bx, 4 int 21h\n@@9:\nret\n\nInitPRN:\nmov ax, 3e00h\nmov bx, 4 ; PRN\nint 21h\nmov ax, 3d01h\nmov dx, offset PRNname\npush cs\npop ds\nint 21h\nret\nPRNname db 'PRN',0\n\nInitMouse: ; 2/16/1993 by Mr. Lei\npush es\nxor ax, ax\nmov es, ax\ncmp word ptr es:[33h4+2], 0\njz @@0 cmp word ptr es:[33h4], 0\njz @@0\nmov ax, 21h\nint 33h ; Hook Mouse Interrupt\n@@0: pop es\nret\n\n; ------------- CMOS CLOCK set to System -----------------------------------\nUpdateTime:\ncall GetRealTime\nmov ah, 2dh\nint 21h\nret\n\nGetRealTime:\nmov ah,2 int 1Ah\nmov al,ch\ncall bcdxchg\nmov ch,al\nmov al,cl\ncall bcdxchg\nmov cl,al\nmov al,dh\ncall bcdxchg\nmov dh,al\nmov dl,0\nret\n\nBCDxchg:\npush ax\npush cx\nmov cl,4\nshr al,cl\npop cx\nmov bl,0Ah\nmul bl\npop bx\nand bl,0Fh\nadd al,bl\nret\n\n; -----------------------------------------------------------------------\n; Display string\nColorPrintStr:\nlodsb\nmov bh, al ; color\nxor cx, cx\nmov dx, 014fh\nmov ax, 0600h\nint 10h\n\nmov ah, 02 ; GotoXY (0, 0)\nxor dx, dx\nmov bh, 0 int 10h\nPrintStr:\npush cs\npop ds\nxor bx, bx\n@@1: lodsb\ncmp al, '$'\njz @@2\nor al, al\njz @@2\nmov ah, 0eh\nint 10h\njmp short @@1\n@@2: mov al, cs:clsStrcolor\nmov cs:clsStr, al\nret\n\n; -----------------------------------------------------------------------\nSelf dw 0\nclsStrcolor db 17h\nclsStr db 17h ; Color (White in Blue)\ndb ' RAMinit Version 2.12 (c) 1989-1994 by KingSoft Ltd. Mr. Leijun'\ndb 0dh,0ah\ndb ' ['\nShowCopies db ''\ndb '] Activate...',0ah,0dh,'$'\n\nendTSR equ $\nmcbList equ offset endTSR + 2 + 2\nvecList equ mcbList + 710 + 2 + 10h + 1 + 400h\ndevLink equ vecList + 4 + 5  26 + 4 + 10  30h + 4\nxmsList equ devLink + 2 + MaxHandles  2\nemsList equ xmsList + 4 + 1024\ncrtMode equ emsList + 2 + 1Dh + 4 + 10h\ntsrLen equ crtMode + 1\n;\n; DOS Environment Reserved by RI\n; --------------------------------------------------\n; Flag 'XX' 2 bytes\n; Environment Segment 1 word\n; Free MCBs <=710 bytes\n; MCB segment 1 word\n; MCB 5 bytes\n; End flag 'MM' 1 word\n; COM LPT ports 10h bytes\n; LEDs status 1 bytes\n; Packed vectors list <=400h bytes\n; Flag 'CV' 2 bytes\n; CVT First DPB pointer 4 bytes\n; DPBs data <=526 bytes\n; First DCB pointer 4 bytes\n; Pointer to NUL 4 bytes\n; All device driver datas <=30h10 bytes\n; Flag 'XM' 2 bytes\n; XMS free handle counter 2 bytes\n; EMS free handle list <=100h4 bytes\n; Flag 'EM' 2 bytes\n; EMS free handle counter 2 bytes\n; EMS free handle list <=1024 bytes\n; EMS handle 1 word\n; Number of pages 1 word\n; Flag '--' 1 word\n; Equipment List 1 word\n; CRT 40:49h-66h 1dh bytes\n; 40:A8h 1 dword\n; BIOS User Data Area 40:F0--FF 10h bytes\n; **\n;\nmain: jmp main0\n\nPrint Macro Str\nLea dx, Str\ncall DisplayStr\nendm\n\nInstMsg db 'RAMinit Version 2.12 '\ndb 'Copyright (c) 1989-1994 by KingSoft Ltd. ',0dh,0ah,'$'\nMsg0 db 'Already installed !',0dh,0ah,0ah\ndb 'For Help, type RI /?. ',0dh,0ah,'$'\nMsg_0 db 0ah,'Residents a new RAMinit copy [y/n] ? $'\nMsg_2 db 'OK, RI No.'\nMsg_RI db '2'\ndb ' residents successful !', 0dh,0ah,'$'\nMsg1 db 'Activate with: $'\nKeyMsg db 'Right_Shift$'\ndb 'Left_Shift$ '\nKMsg1 db 'Left_Ctrl$ '\ndb 'Left_Alt$ '\ndb 'Right_Ctrl$ '\ndb 'Right_Alt$ '\nKMsg2 db 'Ctrl$ '\ndb 'Alt$ '\ndb 'Ctrl$ '\ndb 'Alt$ '\nPlusMsg db ' + $'\ncrlf db 0dh,0ah,'$'\n\nHelpMsg db 'Programmed by Mr. Leijun Dec 1992', 0dh,0ah,0ah\ndb 'Usage: RI [options]',0dh,0ah,0ah\ndb '/H,/? Display this screen',0dh,0ah\ndb '/CLS Removes all TSR programs after current RI',0dh,0ah\ndb '/RET Removes TSR programs include current RI',0dh,0ah\ndb '/NEW Residents a new data copy of current environment',0dh,0ah\ndb '/ALL Removes all RI copies and all other tsr programs',0dh,0ah\ndb '/Sxyy.. Define Hotkey x=AuxHotkey yy..=shift status',0dh,0ah\ndb ' x=auxiliary hotkey (default is X) ',0dh,0ah\ndb ' x equ 1 means need AuxHotkey',0dh,0ah\ndb ' yy..=shift status [CAScas]',0dh,0ah\ndb ' C: Left Ctrl A: Left Alt S: Left Shift',0dh,0ah\ndb ' c: Right Ctrl a: Right Alt s: Right Shift',0dh,0ah,0ah\ndb 'Example: RI /S1c means Hotkey is Right_Ctrl+X',0dh,0ah\ndb ' RI /S0Cc means HotKey is Left_Ctrl+Right_Ctrl',0dh,0ah\ndb ' RI /CLS equals simply press hotkey',0dh,0ah\ndb ' RI /RET Removes all TSRs after current RI and this RI',0dh,0ah\ndb 0ah\ndb 'Contact me for RAMinit problems: (01)2561155 Call 1997',0dh,0ah\ndb '$'\nErrMsg db 'ERROR: Invalid options !',0dh,0ah,0ah,'$'\nWinErr db 7, 'Sorry, I cannot work in Windows DOS environment.',0dh,0ah,'$'\nSetMsg db 7, 'Defines new Hotkey successful !',0dh,0ah,0ah,'$'\ntsrOK db False\n\nMain0:\ncld\nPrint instMsg\ncall IsWinDos\nor ax, ax\njz @@1\nPrint WinErr\nmov ax, 4c00h\nint 21h\n@@1:\ncall HotKeyValid\nmov cs:Status, 0\ncall EMS_test\ncall CmpDosVer\ncall CmpSideKick\ncall GetMachineID\ncall ModifyHotKeyPrompt\n\nmov ax, 0c0d7h\nint 2fh\nmov es, ax\ncmp word ptr es:[101h], 'IE' ; 'LEI'\njnz @@0\nmov cs:Self, ax\n@@0:\ncall CmdLine\ncall PrintHotKeyPrompt\n\ncmp cs:tsrOK, true\njz @@2\ncall tsrReplyOK\n@@2: cmp cs:tsrOK, true\njnz @@_2\ncall PrintCopies\n@@_2:\nmov word ptr cs:[100h], 'EL'\nmov byte ptr cs:[102h], 'I'\n\npush cs\npop es\npush cs\npop ds\nstd\nmov si, offset eof\nmov cx, eof - offset Here\nmov di, tsrLen\nadd di, cx\ninc cx\nrep movsb\ncld\nmov bx, tsrLen\njmp bx\n\nHere:\nmov ax,cs\nmov es,ax\nmov di,offset endTSR\nmov cs:DataBegin, di\nmov cs:NextDataSeg, -1\nmov ax, 'XX'\nstosw\nin al, 0a1h\nmov ah, al\nin al, 21h\npush ax\nmov word ptr cs:old_8259, ax\nxor ax, ax\nout 21h,al ; CLI\ncall SaveOthers\ncall SetSelfInt\ncall BackupVecList\ncmp cs:Power, true\njnz @@20\ncall BackupCVTchain\ncall BackupMemoryManager\n@@20:\ncall BackupBiosData\n\nsti\nmov cs:Flag, ' ' ; no busy\nmov cs:StopFlag, 0 ;\n\nmov cs:tsrLength, di\ncall SetDosEnvSeg\ncmp cs:Self, 0\njz @@29\npush cs\npop ds\npush cs\npop es\ncld\nmov cx, cs:tsrLength\nmov si, cs:DataBegin\nsub cx, si\nmov di, 120h\nmov cs:DataBegin, di\nrep movsb\nmov cs:tsrLength, di\n@@29:\npop ax\nout 21h, al ; STI\nmov al, ah\nout 0a1h, al\nmov dx, cs:tsrLength\ninc dx\nint 27h\n\n; ----------------------------------------------------------------------------\nSetDosEnvSeg:\npush ds\npush es\nmov ax, cs\n@@10: mov es, ax\nmov ax, es:[16h] ; Get father process psp segment\nor ax, ax\njz @@11\nmov bx, es\ncmp ax, bx\njnz @@10\n@@11:\nmov es, word ptr es:[2ch] ; Get father process env segment\nmov cs:DosEnv, es\npop es\npop ds\nret\n\n; ----------------------------------------------------------------------------\n\nSaveOthers:\nmov ax, cs:[2ch] ; Env Seg\nstosw\ncall backupMCB ; Current MCB\nmov ax, 40h ; COM LPT Port\nmov ds, ax\nmov si, 0h\nmov cx, 8\nrep movsw\n\nmov si, 17h ; LED status\nlodsb\nstosb\n; call OpenLEDs\nret\n\n; --------------------------------------------------------------------------\nbackupMCB:\nmov ax, 'ZM'\nstosw\npush ds\npush es\nmov ah, 52h\nint 21h ; Get MCB chain head\nmov ax, es:[bx-2]\npop es\n@@0: mov ds, ax\ncmp byte ptr ds:[0], 'Z' ; End ?\njz @@20 cmp byte ptr ds:[0], 'M' ; Memory control block\njnz @@30 cmp word ptr ds:[3], 0 ; Nul mcb\njz @@10 cmp word ptr ds:[1], 0 ; Free MCB\njnz @@10\ncall SaveFreeMCB\n@@10: inc ax\nadd ax, ds:[3]\njmp @@0\n@@20:\ncall SaveFreeMCB\ncmp ax, 0a000h\ninc ax\njnb @@30\nmov ax, 9fffh ; MS-DOS UMB\njmp @@0\n\n@@30:\ncmp ax, 0c000h ; 386MAX\nja @@90\nmov ax, 0c020h\njmp @@0\n\n@@90: ; Error ?\npop ds\nmov ax, 'MM' ; Set MCB flag\nstosw\nret\n\nSaveFreeMCB:\nstosw\nxor si,si\nmovsb\nmovsw\nmovsw\nret\n;\n; push ax\n; stosw\n; xor si,si\n; movsb\n; movsw\n; movsw\n; pop ax\n; cmp ax, 09fffh\n; jnb @@3\n; push ax\n; push ds\n; mov ds,ax\n; cmp byte ptr ds:[0], 'M'\n; pop ds\n; pop ax\n; jnz @@4\n; mov ax, 09fffh ; MS-DOS UMB\n; jmp @@0\n; @@4: cmp ax, 0c000h\n; ja @@3\n; mov ax, 0c020h ; 386MAX\n; jmp @@0\n;\n; --------------------------------------------------------------------------\n\nOpenLEDs: push ax ; Open all LEDs\nor al, 070h\nmov ds:[17h], al\nmov ah, 1 int 16h\nmov cx, 4 ; Delay\n@@20: push cx\nxor cx, cx\n@@21: loop @@21\npop cx\nloop @@20\npop ax\nmov ds:[17h], al\nmov ah, 1 int 16h\nret\n\n; --------------------------------------------------------------------------\nSetSelfInt:\npush es\npush di\n\ncmp cs:self, 0\njnz @@1\npush cs\npop ds\nmov ax,3509h\nint 21h\nmov word ptr cs:oldInt9_addr,bx\nmov word ptr cs:oldInt9_addr[2],es\nmov dx,offset NewInt9\nmov ax,2509h\nint 21h\n\nmov ax,352Fh\nint 21h\nmov word ptr cs:oldInt2F_addr,bx\nmov word ptr cs:oldInt2F_addr[2],es\nmov dx,offset newInt2F\nmov ax,252Fh\nint 21h\n\nmov ax,351Ch\nint 21h\nmov word ptr cs:oldInt1C_addr,bx\nmov word ptr cs:oldInt1C_addr[2],es\nmov dx,offset newInt1C\nmov ax,251ch\nint 21h\ncli\njmp @@2\n@@1:\nmov es, cs:Self\ninc es:Copies\n@@_0: cmp es:NextDataSeg, -1\njz @@_1\nmov es, es:NextDataSeg\njmp @@_0\n@@_1: mov es:NextDataSeg, cs\n@@2:\npop di\npop es\nret\n\n; -----------------------------------------------------------------------\nSaveCounter:\nmov word ptr es:[di], 'EL'\nmov byte ptr es:[di+2], 'I'\nmov byte ptr es:[di+3], bl\nxor bx, bx\nadd di, 4\nret\n\n; -----------------------------------------------------------------------\nDisplayStr: push cs\npop ds\nmov ah, 9 int 21h\nret\n\n; -----------------------------------------------------------------------\nCmdLine:\npush cs\npop ds\nxor ax, ax\nmov si, 80h\nlodsb\nor al, al\njnz @@1\nret\n@@1:\nmov cx, ax\ndec ax\npush ax\npush si\n@@0: lodsb\ncmp al, ' '\njz @@0 cmp al, '/'\njnz @@2\nlodsb\ncmp al, 'S'\njz @@_2\ncmp al, 's'\njnz @@2\n@@_2:\ncall SetHotKey\nPrint SetMsg\nmov ax, 4c00h\nint 21h\n@@2:\npop si\npop ax\npush ax\npush si\n@@_3: lodsb\ncmp al, 'A'\njb @@3 cmp al, 'Z'\nja @@3\nadd byte ptr ds:[si-1],20h ; DownCase\n@@3: loop @@_3\npop si\npop cx\n\nadd si, cx\nlodsb\ncmp al, 's' ; CLS\njnz @@5 cmp word ptr ds:[si-3], 'lc'\njnz @@5 cmp cs:Self, 0\njz @Err\nmov ax, 0c0d7h+1 int 2fh\n\n@@5: cmp al, 'h' ; HELP\njz @help\ncmp al, '?'\njz @help\ncmp al, 't' ; RET\njnz @@6 cmp word ptr ds:[si-3], 'er'\njnz @@6\n@@7:\ncmp cs:Self, 0\njz @Err\nmov ax, 0c0d7h+2 int 2fh\n@@6: cmp al, 'w' ; NEW\njnz @@8 cmp word ptr ds:[si-3], 'en'\njnz @@8\nmov cs:tsrOK, true\nret\n@@8:\ncmp al, 'l' ; ALL\njnz @@9 cmp word ptr ds:[si-3], 'la'\njnz @@9\nmov ax, 0c0d7h+3 int 2fh\n@@9:\ncmp al, ' '\njnz @Err\nret\n\n@Err:\nPrint ErrMsg\n@help:\nPrint HelpMsg\nmov ax, 4c00h\nint 21h\n\n;---------------------------------------------------------------------------\ntsrReplyOK:\ncmp cs:Self, 0\njz @@1\nPrint Msg0\n\npush es\nmov ax, cs:Self\n@@_10: mov es, ax\nmov ax, es:NextDataSeg\ncmp ax, -1\njnz @@_10\nmov ax, es\n\n@@_0: push ax\ndec ax\nmov es, ax\nmov bx, es:[3]\npop ax\n\nadd ax, bx\ninc ax\nmov es, ax\ncmp word ptr es:[0], 'OC'\njz @@_0\n\nmov bx, cs\ncmp ax, bx\npop es\njz @@2\nPrint Msg_0\nmov ah, 1 int 21h\n\npush ax\nPrint crlf\npop ax\n\ncmp al, 'y'\njz @@3 cmp al, 'Y'\njz @@3\n@@2: ; Print Msg_1\nmov ax, 4c01h\nint 21h\n@@3:\n@@1: mov cs:tsrOK, true\nret\n\nPrintCopies:\ncmp cs:Self, 0\njz @@1\npush es ; Added -by- Mr. Lei\nmov es, cs:Self ; Aug 24, 1993\nmov al, es:Copies\ninc al ; Total RI copies\npush ax ; Set es = current mcb\nmov ax, cs\ndec ax\nmov es, ax\npop ax\nmov cx, 5 ; Search end of file name\nmov bx, 8\n@@10: inc bx\ncmp byte ptr es:[bx], 20h\njz @@20 cmp byte ptr es:[bx], 0ffh\njz @@20 cmp byte ptr es:[bx], 00h\njz @@20\nloop @@10\n@@20: ; Set current RI no\nmov byte ptr es:[bx], ':' ; RI:2\nmov byte ptr es:[bx+1], al\ncmp bx, 8+7\njnb @@30\nmov byte ptr es:[bx+2], 0\n@@30:\npop es\n\nmov cs:Msg_RI, al\nPrint Msg_2\n@@1: ret\n\n;---------------------------------------------------------------------------\n; Backup Interrupt Vector List\n;\nBackupVecList:\npush ds\npush cs\npop es\nxor si,si ; Vectors\nmov ds,si\nmovsw\nmovsw\nxor bx, bx\nmov cx,00ffh\n@@0: lodsw\nxchg dx, ax\nlodsw\ncmp ax, es:[di-2]\njnz @@1 cmp dx, es:[di-4]\njz @@2\n@@1: or bx, bx\njz @@3\ncall SaveCounter\n@@3: xchg dx, ax\nstosw\nxchg dx, ax\nstosw\nloop @@0\njmp @@4\n@@2: inc bx\nloop @@0\ncall SaveCounter\n@@4:\npop ds\nret\n;\n;-----------------------------------------------------------------------------\nBackupCVTchain:\nmov ax, 'VC'\nstosw\npush ax\npush bx\npush cx\npush ds\npush es\nmov ah, 52h\nint 21h ; ES:BX -- DOS table as described below\n\n; --------------------------------------------------------------------\npush es ; DPB chains\npush bx\nlds si, es:[bx]\npush cs\npop es\nmov ax, si\nstosw\nmov ax, ds\nstosw\nmov bx, cs:cvtOfs\nxor cx, cx\n@@1: mov al, ds:[si+1]\nstosb\nmov ax, ds:[si+bx+12h]\nstosw\nmov ax, ds:[si+bx+14h]\nstosw\ninc cx\nlds si, ds:[si+bx+18h]\ncmp si, -1\njnz @@1\n; mov ax, 5\n; mul cl\n; add ax, 4\n; add cs:tsrLength, ax\npop bx\npop es\n\n; --------------------------------------------------------------------\npush es ; DCB file control blocks\npush bx\nles bx, es:[bx+4]\n@@11: cmp word ptr es:[bx], -1\njz @@10\nles bx, es:[bx]\njmp @@11\n@@10:\nmov ax, es\nxchg ax, bx\npush cs\npop es\nstosw\nxchg ax, bx\nstosw\npop bx\npop es\n; add cs:tsrLength, 4\n\n; ---------------------------------------------------------------------\npush es ; Device Driver Chains\npop ds\nadd bx, 22h\nmov si, bx ; NUL\n\npop es\nmov ax, si\nstosw\nmov ax, ds\nstosw\nxor cx, cx\nxor bx, bx\n@@9: push si\nmov cl, 5\nrep movsw\ninc bx\npop si\nlds si, ds:[si]\nmov ax, si\ninc ax\njnz @@9\n\npop ds\npop cx\npop bx\npop ax\nret\n\n; ----------------------------------------------------------------------------\n\nBackupBiosData:\nmov ax, '--'\nstosw\npush ds\npush si\nmov si, 40h\nmov ds, si\nmov si, 10h\nmovsw\nmov si, 0a8h\nmovsw\nmovsw\nmov si, 49h\nmov cx, 1dh\nrep movsb\n\nmov si, 0f0h\nmov cx, 8\nrep movsw\npop si\npop ds\nret\n\n; ---------------------------------------------------------------------------\n\nBackupMemoryManager:\npush cs\npop es\npush ds\npush es\ncall SaveXMSstatus\ncall SaveEMSstatus\npop es\npop ds\nret\n\n;---------------------------------------------------------------------\n\nSaveEMSstatus:\ntest cs:status, EMSbit\njnz @@1\nret\n@@1:\nmov ax, 'ME'\nstosw\ninc di\ninc di\npush di\nmov ah, 4dh\nint 67h\npop di\nmov es:[di-2], bx\nshl bx, 1\nshl bx, 1\nadd di, bx\nret\n; -------------------------------------------------------------------\n\nSaveXMSstatus:\ncall XMS_test\ntest cs:status, XMSbit\njnz @@1\nret\n@@1:\nmov ax, 'MX'\nstosw\n\nmov dx, 1\ncall XMS_alloc\njnz @@_1\nxor cx, cx ; XMS alloc failure\nstosw\nret\n@@_1:\npush dx\nsub dx, MaxHandles  10\n@@2:\npush dx\ncall XMS_Lock\npop dx\njnz @@3 cmp bl, 0a2h\njnz @@4\nadd dx, 10\njmp @@2\n@@3: push dx\ncall XMS_unlock\npop dx\n@@4:\nmov cs:handle_begin, dx\npop dx\npush dx\ncall XMS_bstat\nxor cx, cx\nmov cl, bl\ninc cx\npop dx\ncall XMS_Free\nmov dx, cs:Handle_begin\n\npush cx\npush cs\npop es\nmov ax, cx\nstosw\n@@5: push dx\ncall XMS_Lock\npop dx\njnz @@6 cmp bl, 0a2h ; Handle invalid\njz @@7\n@@6: call XMS_unlock\nadd dx, 10\njmp @@5\n@@7: mov ax, dx\nstosw\nadd dx, 10\nloop @@5\npop cx\nret\n; ------------------------------------------------------------------\n\nXMS_test:\npush es\nmov ax, 4300h\nint 2fh\ncmp al, 80h\njnz @@9\nmov ax, 4310h\nint 2fh\nmov cs:XMS_control, bx\nmov cs:XMS_control[2], es\nor cs:Status, XMSbit\n@@9:\npop es\nret\n\nXMS_stat:\nmov ah, 0\ncall dword ptr cs:xms_control\nmov hma_exist, dl\nret\nhma_exist db 0\n\nXMS_alloc:\nmov ah, 9\ncall dword ptr cs:xms_control\nor ax, ax\nret\n\nXMS_lock:\nmov ah, 0ch\ncall dword ptr cs:xms_control\nor ax, ax\nret\n\nXMS_unlock:\nmov ah, 0dh\ncall dword ptr cs:xms_control\nor ax, ax\nret\nXMS_bstat:\nmov ah, 0eh\ncall dword ptr cs:xms_control\nor ax, ax\nret\n\nXMS_free:\nmov ah, 0ah\ncall dword ptr cs:xms_control\nor ax, ax\nret\n\n; ----------------------------------------------------------------------------\nEMS_test:\npush cs\npop ds\nmov dx, offset EMMname\nmov ax, 3d00h\nint 21h\njc @@2\nmov bx, ax\nmov ah, 3eh\nint 21h\nor cs:Status, EMSbit\n@@2:\nret\nEMMname db 'EMMXXXX0',0\n\n; -----------------------------------------------------------------------------\n\nSetHotKey:\nxor bx, bx\nlodsb\npush ax\n\n@@1: lodsb\ncmp al, 0dh\njz @@9 cmp al, 'C'\njnz @@2\nor bl, LeftCtrl\njmp @@1\n@@2:\ncmp al, 'c'\njnz @@3\nor bl, RightCtrl\njmp @@1\n@@3:\ncmp al, 'A'\njnz @@4\nor bl, LeftAlt\njmp @@1\n@@4:\ncmp al, 'a'\njnz @@5\nor bl, RightAlt\njmp @@1\n@@5:\ncmp al, 'S'\njnz @@6\nor bl, LeftShift\njmp @@1\n@@6:\ncmp al, 's'\njnz @@7\nor bl, RightShift\njmp @@1\n@@7: pop ax\njmp @Err\n@@9:\nmov cs:HotKey, bl\npop ax\nmov cs:AuxHotKey, 2dh ; 'X' scan key\ncmp al, '1'\njz @@29\nmov cs:AuxHotKey, 0\n@@29:\ncmp cs:Self, 0\njz @@30\npush es\nmov es, cs:Self\nmov es:HotKey, bl\nmov bl, cs:AuxHotKey\nmov es:AuxHotKey, bl\npop es\n@@30:\ncall GetRunFileName\nmov ax, 3d02h\nint 21h\njc @@10\npush cs\npop ds\nmov bx, ax\nmov cx, 4\nmov dx, 100h\nmov ah, 40h\nint 21h\njc @@10\nmov ax, 4200h\nxor cx, cx\nmov dx, 17h\nint 21h\njc @@10\nmov cx, 1\nmov dx, offset AuxHotKey\nmov ah, 40h\nint 21h\njc @@10\nmov ah, 3eh\nint 21h\n@@10:\nret\n\n\n; -----------------------------------------------------------------------\nGetRunFileName:\n; Return:\n; DS:DX Pointer of this run file name ASCIIZ string\npush ax\npush bx\npush cx\npush si\npush di\npush es\n\npush cs\npop es\nmov ax, es:[2ch]\nmov es, ax\nxor di, di\nmov cx, 1000h\nxor al, al\n@@1: repnz scasb\ncmp es:[di], al\nloopnz @@1\nmov dx, di\nadd dx, 3\npush es\npop ds\n\npop es\npop di\npop si\npop cx\npop bx\npop ax\nret\n\n; ---------------------------------------------------------------------------\nGetMachineID:\npush es\nmov KBD102,True\nmov ax,40h\nmov es,ax\ntest byte ptr es:[96h], 00010000b\njnz @@1\nmov Kbd102,False\n@@1:\nxor ax,ax\ndec ax\nmov es,ax\nmov al,es:[0eh]\nmov cs:MachineID, al\npop es\nret\n\n; ---------------------------------------------------------------------------\nModifyHotKeyPrompt:\ncmp cs:Kbd102, True\njz @@9\npush cs\npop es\npush cs\npop ds\nmov cx, 124\nmov si, offset KMsg2\nmov di, offset KMsg1\nrep movsb\n@@9: cmp cs:MachineID, 0fch\njna @@10\nmov cs:clsStrcolor, 70h ; Mono\nmov cs:clsStr, 70h\n@@10:\nret\n\n; ---------------------------------------------------------------------------\nPrintHotKeyPrompt:\nPrint Msg1\nmov al, cs:HotKey\nmov ah, al\nshr al, 1\nshr al, 1\nand ax, 33ch\nor al, ah\nmov dx, offset KeyMsg\n@@40:\nor ax, ax ; Mr. Lei 4/25/1993\njz @@_42\nshr al, 1\npush ax\njnc @@41\n\npush ax\ncall ColorDisplayStr\n; mov ah, 9\n; int 21h\npop ax\n\nor al, al\njz @@42\n\npush dx\nmov dx, offset PlusMsg\ncall ColorDisplayStr\n; Print PlusMsg\npop dx\n\n@@41: add dx, 12\npop ax\njmp @@40\n@@42: pop ax\n@@_42: cmp cs:AuxHotKey, 0\njz @@43 cmp cs:HotKey, 0 ; Mr. Lei\njz @@_43\nmov dx, offset PlusMsg\ncall ColorDisplayStr\n; Print PlusMsg\n@@_43: mov dx, offset AuxHotKeyName\ncall ColorDisplayStr\n; Print AuxHotKeyName\n@@43:\nPrint crlf\nret\n\nColorDisplayStr:\npush bx\npush cx\npush dx\npush si\nmov bl, 0fh\nmov si, dx\nxor bh, bh\nmov cx, 1\n@@1: lodsb\ncmp al, '$'\njz @@2\nor al, al\njz @@2\npush cx\nmov ah, 09h\nint 10h\nmov ah, 3 int 10h\ninc dl\nmov ah, 2 int 10h\npop cx\njmp short @@1\n@@2:\npop si\npop dx\npop cx\npop bx\nret\n\n; ---------------------------------------------------------------------------\nCmpSideKick:\nxor ax, ax\nmov es, ax\nles bx, es:[20h]\ncmp word ptr es:[bx-4], 4b53h\njnz @@1 cmp word ptr es:[bx-2], 4942h\njz @@2\n@@1: mov es, ax\nles bx, es:[94h]\ncmp word ptr es:[bx-2], 4b53h\njz @@2\nret\n@@2: or cs:Status, SKbit\nret\n\n; ---------------------------------------------------------------------------\nCmpDosVer: mov ah, 30h\nint 21h\ncmp al, 3\njb @@1 cmp al, 3\njna @@2\nmov cs:cvtOfs, 1\nret\n@@2: mov cs:cvtOfs, 0\nret\n@@1: Print DosVerErr\nmov ax, 4cffh\nint 21h\n\nDosVerErr db 'Sorry, DOS version too lower !',0dh,0ah,'$'\n\nHotKeyValid:\ncmp cs:HotKey, 0\njnz @@_1\ncmp cs:AuxHotKey, 0\njnz @@_1\nPrint HotKeyErr\nmov ax, 4cfeh\nint 21h\n@@_1: ret\n\nHotKeyErr db 'Sorry, please setup hotkey again. ',0dh,0ah,'$'\n\neof:\nends\nend Start\n\n; ------------- The End ! ---------------------------------------------------\n```\n"
  },
  {
    "id": 34385274,
    "title": "记录一个生产环境惨案",
    "description": "生产环境偶现一个 BUG，几率非常低。但是自动化测试从来没有失败过，测试环境中也重现不了，当然，生产环境上也很难出现，但是一旦出现，几乎没有办法排查，因为一旦这个 BUG 发生，关联的现象是相关日志也没有打印出来。分析日志没有打印出来，也提供了相关线索。通过查看日志打印逻辑，看到有使用 ​JS...",
    "custom_description": null,
    "updated_at": "2021-04-08T10:53:49.000Z",
    "created_at": "2021-04-08T10:53:49.000Z",
    "slug": "grzk22",
    "word_count": 549,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1617878536208-ae4dd834-141f-4cef-8b21-742a47a5d0f1.png",
    "body": "生产环境偶现一个 BUG，几率非常低。但是自动化测试从来没有失败过，测试环境中也重现不了，当然，生产环境上也很难出现，但是一旦出现，几乎没有办法排查，因为一旦这个 BUG 发生，关联的现象是相关日志也没有打印出来。<br />\n\n<a name=\"GJT3w\"></a>\n## 分析\n\n<br />日志没有打印出来，也提供了相关线索。通过查看日志打印逻辑，看到有使用 `JSON.stringify` ，于是猜想是不是被打印的对象中存在循环引用，导致 `JSON.stringify` 崩溃。但是看了下被序列化的对象，只是一个发 HTTP 请求的 `options` ，而且详细查看 `options` 的赋值操作，只是一个 Plain Old JavaScript Object，按理说不会造成 `JSON.stringify` 崩溃才对。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617878536208-ae4dd834-141f-4cef-8b21-742a47a5d0f1.png#align=left&display=inline&height=556&margin=%5Bobject%20Object%5D&name=image.png&originHeight=556&originWidth=1316&size=299180&status=done&style=none&width=1316)<br />\n<br />这个 HTTP 请求使用了一个公共库，难道是这个公共库修改了 `options` ？非常不愿意这样设想，但还是去查看了这个公共库的源码，一看果然，它给 `options` 增加了一个 `agent` 属性：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617878049070-c797a443-7afc-455b-88d4-3b1109860b57.png#align=left&display=inline&height=652&margin=%5Bobject%20Object%5D&name=image.png&originHeight=652&originWidth=2510&size=139830&status=done&style=none&width=2510)\n<a name=\"9Pf9Y\"></a>\n### 为什么只是偶现？\n没有进一步花时间调研，只是根据现象，可以断定在某些网络环境下，这个 `httpAgent` 或者 `httpsAgent` ，才会出现循环引用。而且，如果由于并不是所有该公共库的使用者，都会 `JSON.stringify(options)` ，所以，之前一直没有人发现和上报这个问题。<br />\n\n<a name=\"HvEDj\"></a>\n## 修复\n在向这个公共库传入 `options` 前，拷贝一个副本，并在后续打印日志时，确保使用那个未受污染的副本。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617879050086-627f04b6-cb10-4f5b-a5b5-91c162e9cb3e.png#align=left&display=inline&height=512&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1024&originWidth=2218&size=282288&status=done&style=none&width=1109)<br />\n\n<a name=\"Moo3h\"></a>\n## 教训\n\n- **不要修改入参！**尤其是 API 的提供者，只能读取上游传来的参数，而不能修改入参。否则就会造成副作用，而且很难被发现。\n- **不要滥用 `JSON.stringify` **，大多数日志目的的变量打印，可以用 `util.inspect` 代替。\n"
  },
  {
    "id": 33777562,
    "title": "使用 OIDC 在一个 Keycloak 中集成另一个 Keycloak 用户认证",
    "description": "这是一篇价值 7 元的文章，有人已经付费，免费分享给你！周末有人在知乎上通过付费咨询频道问我，如何在一个 Keycloak 中集成另一个 Keycloak 用户认证。由于目前知乎付费咨询只支持手机端，因此我当时的回答比较简略的。今天再用电脑把实现步骤一步一步写下来，争取让小白也能够顺利集成，因...",
    "custom_description": null,
    "updated_at": "2021-03-30T01:42:43.000Z",
    "created_at": "2021-03-29T12:56:37.000Z",
    "slug": "olenk1",
    "word_count": 4718,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1617022548905-6994bae0-6682-473e-93c1-2022d6e991d9.png",
    "body": "> 这是一篇价值 7 元的文章，有人已经付费，免费分享给你！\n> ![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617022548905-6994bae0-6682-473e-93c1-2022d6e991d9.png#align=left&display=inline&height=1122&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2244&originWidth=1080&size=749757&status=done&style=none&width=540)\n\n\n<br />周末有人在知乎上通过[付费咨询频道](https://www.zhihu.com/consult/conversation/1358907868830470144/question)问我，如何在一个 Keycloak 中集成另一个 Keycloak 用户认证。由于目前知乎付费咨询只支持手机端，因此我当时的回答比较简略的。今天再用电脑把实现步骤一步一步写下来，争取让小白也能够顺利集成，因此文章会略显啰嗦，高手请选择性地跳跃阅读或者直接忽略。<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616994682876-43c371de-5e90-426c-bbcf-31fe07238ed2.png#align=left&display=inline&height=1122&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2244&originWidth=1080&size=477275&status=done&style=none&width=540)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617068555108-7bb84ba2-5ce5-48c0-bfcd-0d3bc4ac6f8a.png#align=left&display=inline&height=1122&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2244&originWidth=1080&size=1087024&status=done&style=none&width=540)<br />\n\n<a name=\"kMshr\"></a>\n## 问题重述\n\n\n> 我看了你关于《[基于 keycloak 的关注公众号即登录功能的设计与实现](https://zhuanlan.zhihu.com/p/349504145)》的文章，有点问题想和你沟通下。\n> 我现在有2个系统，a和b。它们都接入了keycloak，是2个realm。数据库也是隔离的。现在想要实现a系统通过b系统的账号登录。我想用类似微信登录的方式，把b系统当成微信。不知道这样是否合适，以及具体的实现感觉有点困难。\n\n<br />\n<a name=\"qu96G\"></a>\n## 最终实现\n\n\n完全可行，不用一行代码。\n\n<a name=\"PBWXz\"></a>\n## 在线演示\n\n<br />在《[基于 keycloak 的关注公众号即登录功能的设计与实现](https://zhuanlan.zhihu.com/p/349504145)》里已经搭建了一个 Keycloak 站点：https://keycloak.jiwai.win。在这名同学的问题里，即是系统 b。\n\n为了演示这名同学的系统 a，我搭建了另一个 Keycloak 站点：[https://lemur-2.cloud-iam.com/](https://lemur-2.cloud-iam.com/)。你可以点击[这里](https://lemur-2.cloud-iam.com/auth/realms/uniheart/protocol/openid-connect/auth?client_id=security-admin-console&redirect_uri=https%3A%2F%2Flemur-2.cloud-iam.com%2Fauth%2Fadmin%2Funiheart%2Fconsole%2F%23%2Fforbidden&state=3c79a33d-1849-4715-a5ab-ffdd449ffe2f&response_mode=fragment&response_type=code&scope=openid&nonce=d70ad94e-3b8d-45a4-9d95-fec3a956c3d6&code_challenge=5xGNw7hdadcP8DYRhVJOzEZJ3xVgIAyuWSeUH4JbBUE&code_challenge_method=S256)，然后选择使用系统 b 登录，就可以看到效果：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616995827736-655bebc5-be8a-40f2-9e9c-b744505978c9.png#align=left&display=inline&height=769&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1538&originWidth=1630&size=423561&status=done&style=none&width=815)<br />显然，Keycloak a 是一个刚部署好的 Keycloak，默认只支持用户名密码登录。但是为了使用 Keycloak b 登录，所以又增加了一个登录方式：UniHeart At Jiwai Win，这就是 https://keycloak.jiwai.win。选择这个登录方式，页面跳转到了 Keycloak a 的登录界面（如果看过前面的《[基于 keycloak 的关注公众号即登录功能的设计与实现](https://zhuanlan.zhihu.com/p/349504145)》，对这个界面很熟悉了吧）。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616996125963-96e683c0-0c1e-4b4a-84f0-588353391798.png#align=left&display=inline&height=745&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1490&originWidth=2066&size=223144&status=done&style=none&width=1033)<br />使用 Keycloak b 的任何登录方式（正好这个 Keycloak b 支持关注微信公众号即登录功能，但这个不是必须的），成功登录后，都会回到 Keycloak a，并且是已经登录状态：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616996372763-c30e5da5-828f-4f82-994a-c38a697c7404.png#align=left&display=inline&height=527&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1054&originWidth=1792&size=128991&status=done&style=none&width=896)<br />虽然页面显示用户没有权限查看该页面，但是说明登录已经成功。关于如何给该用户配置相关权限，可以自行探索。<br />如果已管理员账号登录 Keycloak a，在用户管理界面可以看到已经多了一个 Keycloak b 中的账号：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616996493374-edfd6ba2-ed07-4faa-b98c-b6385c184566.png#align=left&display=inline&height=668&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1336&originWidth=3236&size=322119&status=done&style=none&width=1618)\n<a name=\"ElirL\"></a>\n## 问题分析\n这名同学希望将两个不同的 Keycloak realm 用户打通，可以使用 Keycloak realm b 登录 Keycloak realm a。或者说，使用 Keycloak b 登录 Keycloak a，这是等价的。为了说明问题，我们不如建立两个 2 个 Keycloak 实例，不仅 realm 不同，整个 Keycloak 实例都不同（数据库也是独立的）。<br />\n<br />另外，这名同学看了之前的《[基于 keycloak 的关注公众号即登录功能的设计与实现](https://zhuanlan.zhihu.com/p/349504145)》一文，可能受到微信登录的影响。其实他这里想表达的和微信登录没有任何关系。\n\n<a name=\"XrgEP\"></a>\n## 基础知识回顾\n\n<br />正如前面所说，整个实现过程不需要一行代码，而且配置步骤也非常简单。但是在实施过程中，为什么会感到困难呢？很可能是需要补充一些基础知识。这里在详细列出实现步骤前，对相关知识做一个简单回顾，从而在阅读详细步骤时，不仅知其然，还能知其所以然。<br />\n\n<a name=\"lv7Ob\"></a>\n### 单点登录\n\n<br />Keycloak 是一个优秀的开源的单点登录工具。想使用系统 B的用户直接登录系统 A，而不用再次去系统 A 里注册，这也是典型的单点登录场景。单点登录有多种协议：<br />\n\n<a name=\"Eo5GO\"></a>\n### 单点登录认证协议\n\n<br />最知名的单点登录认证协议主要是 OpenId Connect 和 SAML。下面就来看看认证服务器和被保护的应用是怎么和这些协议打交道的。<br />\n\n<a name=\"5e6Ga\"></a>\n### OpenId Connect\n\n<br />OpenId Connect 通常简称为 OIDC，它是在 OAuth 2.0 的基础上扩展而成的认证协议。OAuth 2.0 只是一个构建认证协议的框架，并且很不完整，但是 OIDC 确实一个羽翼丰满的认证与授权协议。OIDC 严重使用 Json Web Token（JWT）标准。这些标准用紧凑和对网络友好的方式定义了 JSON 格式的唯一标记以及对数据进行数字化签名和加密的方法。<br />\n<br />OIDC 在 Keycloak 中的使用场景分为两种类型。第一种是应用请求 Keycloak 服务器来认证用户。当成功登录后，应用会收到一个名称为 `access_token` 的唯一身份标志符。这个唯一身份标志符包含了诸如用户名、电子邮箱、以及其他个人资料等等信息。 `access_token` 会被 realm 进行数字签名，并且包含用户的可访问信息（比如用户-角色映射），从而应用可以使用它来决定该用户被允许访问应用中的哪些资源（上面的在线演示中显示的已登录用户没有权限页面，就是因为拿到的 `access_token` 中没有相关的可访问信息）。<br />\n<br />第二种使用场景类型是客户端想获取远端服务的访问权限。在这个场景下，客户端请求 Keycloak 来获取一个访问令牌来代表用户调用远端服务。Keycloak 认证该用户后询问用户是否同意为该客户端授予访问权限。一旦用户同意授权，客户端就会收到访问令牌。这个访问令牌是由 realm 数字化签名过的。该客户端随后就可以使用这个访问令牌向远端服务发起 REST 调用了。这个 REST 服务抽取出访问令牌，验证令牌的签名，然后基于令牌中的可访问信息决定是否保护这个调用请求。<br />\n\n<a name=\"5csSS\"></a>\n### OIDC 认证流程\n\n<br />OIDC 有多种不同的方式为客户端或者应用提供用户认证并接收身份标记和访问令牌。你要使用那种方式很大程度上取决于应用或者客户端请求访问权限的类型。所有这些认证流程都在 OIDC 和 OAuth 2.0 的规格文档中详细描述了，所以这里只是稍稍提及一些必要内容。<br />\n\n<a name=\"2S8mC\"></a>\n#### 授权码流程\n\n<br />这是一个基于浏览器的协议，也是在验证和授权基于浏览器的应用时所推荐使用的。它严重依赖浏览器重定向来获取身份标记与访问令牌。总结如下：<br />\n\n1. 使用浏览器访问应用。这个应用会提醒用户当前还未登录，所以它指示浏览器重定向到 Keycloak 来认证。该应用会以查询参数的形式在浏览器重定向时向 Keycloak 传递一个回调 URL（即演示截图中的 redirect_uri），Keycloak 在完成认证后会使用到它。\n1. Keycloak 认证用户，并创建一次性、非常短时间有效的临时码。Keycloak 通过前面提供的回调 URL 重定向回到应用，同时将临时码作为查询参数附加到回调 URL 上。\n1. 应用抽取临时码，并且在后端通过不同于前端的网络渠道向 Keycloak 发起 REST 调用，使用临时码交换身份标记、访问令牌以及刷新令牌。一旦这个临时码在获取令牌中被使用过了，它就不能再次被使用了。这防止了潜在的重放攻击。\n\n\n<br />非常重要的一点是访问令牌通常有效期很短，一般在分钟级别过期。而刷新令牌由登录协议传送，允许应用在访问令牌过期后去获取一个新的访问令牌。这样一个刷新协议在受损系统中非常重要。如果访问令牌有效期很短，那么整个系统仅仅在被盗用的令牌剩余的有效期内是处于被攻击状态的。如果管理员吊销了访问权限，那么接下来的令牌刷新请求会失败。这样更加安全并且可伸缩性更好。<br />\n<br />该流程另一个重要的方面是所谓的开放客户端还是保密客户端的概念。保密的客户端在使用临时码交换令牌时需要提供客户端密钥。开放客户端则不需要。只要严格使用 HTTPS 并且客户端的重定向 URI 被严格注册，那么采用开放客户端完全没有问题。由于无法使用安全的方式传输客户端密钥，所以 HTML5/JavaScript 客户端不得不天然就属于开放客户端。再次强调，这仅仅在严格使用 HTTPS 并严格注册重定向 URI 时是可以的。<br />\n\n<a name=\"zBUCs\"></a>\n#### 隐式流程\n\n<br />这也是一个基于浏览器的协议，很类似授权码流程，只是请求量更少，也不需要刷新令牌。该流程不被推荐，因为存在访问令牌泄漏的可能性。比如由于令牌通过重定向 URI （详见下）传输，所以可能通过浏览器历史记录泄漏。并且，由于该流程没有为客户端提供刷新令牌的服务，所以访问令牌不得不设置一个更长的时间，不然当令牌失效后用户需要再次认证。Keycloak 不推荐这种流程但是仍然支持这种流程，因为它存在于 OIDC 和 OAuth 2.0 的规格文档中。总结如下：<br />\n\n1. 使用浏览器访问应用。应用提示用户当前还未登录，所以它指示浏览器重定向到 Keycloak 去认证。应用将回调 URL （一个重定向 URI）作为查询参数传递给 Keycloak，在认证完成后会被其使用。\n1. Keycloak 认证用户并且创建身份标记和访问令牌。Keycloak 使用之前提供的回调 URL 重定向回到应用并使用查询参数的方式额外添加身份标记和访问令牌在回调 URL zhong。\n1. 应用从回调 URL 中抽取身份标记和访问令牌。\n\n\n\n<a name=\"f0QOa\"></a>\n#### 资源拥有者密码凭据授权（直接访问授权）\n\n<br />这在 Keycloak 管理员控制台中指直接访问授权。当 REST 客户端希望代表用户获取令牌时使用该流程。这是一个 HTTP POST 请求，该请求中包含了用户的安全凭据和客户端 id，以及客户端的密钥（如果是保密客户端的话）。该用户的安全凭据随请求中的表单参数发送。这个 HTTP 响应中包含的身份标记、访问权限，以及刷新令牌。<br />\n\n<a name=\"s0IVA\"></a>\n#### 客户端凭据授权\n\n<br />这也是由 REST 客户端使用的，但不是代表一个外部用户去获取令牌，而是基于和客户端相关的元数据与服务账号的权限来创建一个令牌。<br />\n\n<a name=\"PwRyK\"></a>\n### Keycloak 服务器的 OIDC URI 端点\n\n<br />这一小节非常简单，但是对本文来说，却非常非常重要。因为在配置时，是直接要用到相关的端点的。<br />\n<br />Keycloak 会公布一系列的 OIDC 端点。当你使用客户端适配器与认证服务器进行 OIDC 沟通时，这些 URL 非常有用。这些全部都是相对 URL，且其根 URL 是使用 HTTP(S) 协议的，并且会在其 hostname 的基础上添加 /auth 路径。比如，典型的根 URL 是： https://keycloak.jiwai.win/auth，或者 http://localhost:8080/auth。<br />\n\n<a name=\"uMhfI\"></a>\n#### /realms/{realm-name}/protocol/openid-connect/auth\n在授权码流程中这个 URL 端点用来获取临时码，在隐式流程、直接授权或者客户端授权中，这个 URL 端点用来获取令牌。<br />\n\n<a name=\"o78hm\"></a>\n#### /realms/{realm-name}/protocol/openid-connect/token\n这个 URL 端点用来在授权码流程中将临时码转换成令牌。<br />\n\n<a name=\"fJOH9\"></a>\n#### /realms/{realm-name}/protocol/openid-connect/logout\n这是用来执行退出登录操作的 URL 端点。<br />\n\n<a name=\"xcJaM\"></a>\n#### /realms/{realm-name}/protocol/openid-connect/userinfo\n这个 URL 端点是用来提供用户信息服务的，其详细描述参见 OIDC 规格说明。<br />\n\n<a name=\"Vdser\"></a>\n#### /realms/{realm-name}/protocol/openid-connect/revoke\n这个 URL 端点用来做 OAuth 2.0 中的令牌吊销，其详细描述见 [RFC7009](https://tools.ietf.org/html/rfc7009)。<br />\n\n<a name=\"EFk1l\"></a>\n### SAML\nSAML 2.0 类似 OIDC，但是产生得更早并且更加成熟。由于本文使用 OIDC 解决这名知乎用户的问题，因此不对 SAML 做详细介绍。<br />\n\n<a name=\"gsa5V\"></a>\n### OpenID Connect 和 SAML 的对比\n\n<br />选择 OpenID Connect 还是 SAML？并不推荐简单的使用新的协议（OIDC）而不是用更老的但是更成熟的协议（SAML）这种一刀切的决策思路。<br />\n<br />但是 Keycloak 在大多数情况下都推荐使用 OIDC，这也是本文解决知乎网友问题时的做法。<br />\n<br />SAML 要比 OIDC 更加啰嗦一些。<br />\n<br />除了交换数据更加啰嗦之外，如果你仔细对比规格说明文档，你会发现 OIDC 是围绕 Web 相关的工作而设计的，但是 SAML 却是在 Web 的基础上增加了新的设施。比如，相对 SAML 来说，OIDC 在客户端的实现更加容易，因此 OIDC 更加适合 HTML5/JavaScript 应用。由于令牌是 JSON 格式的，他们更容易被 JavaScript 所消费。当然，OIDC 还有其他好特性使得在 Web 应用中实现安全更加容易。比如规格文档中提到的，使用 iframe 技巧，就很容易探测用户是否还处于登录状态。<br />\n<br />当然 SAML 也还是有其用武之地的。随着 OIDC 的规格文档的演进，你会发现它实现的越来越多的特性，早在几年前 SAML 就已经有了。人们一般使用 SAML 的原因是已有系统已经使用了 SAML 加固，以及 SAML 更加成熟。<br />\n\n<a name=\"frE9I\"></a>\n## 集成步骤\n\n<br />好了，说了这么多，是为了在后续实现步骤中，不迷失方向。实现步骤本身特别简单，关键是需要了解这些基础知识，否则就会觉得莫名其妙。<br />\n\n<a name=\"vG1u4\"></a>\n### 准备工作：搭建两个 Keycloak 系统\n\n- **Keycloak b**，我们将用它来登录其他系统，包括 Keycloak a。处于免费的考虑，可以使用 Heroku 平台。但是由于 Heroku 平台的限制，不得不对 Keycloak 做小的改造。改造后的 Keycloak 我放在了 Github 上：[https://github.com/Jeff-Tian/keycloak-heroku](https://github.com/Jeff-Tian/keycloak-heroku)，你可以点击 ReadMe 中的按钮一键部署到 Heroku 上。比如我部署好的 Keycloak b 是：https://keycloak.jiwai.win 。\n- **Keycloak a**，你同样可以使用 Heroku 再部署一个实例。也可以利用 [https://www.cloud-iam.com/](https://www.cloud-iam.com/) 提供的免费托管 Keycloak，它的限制是只能有 100 个用户。比如我部署好的 Keycloak a 是 [https://lemur-2.cloud-iam.com/](https://lemur-2.cloud-iam.com/)。\n\n\n\n<a name=\"s7frN\"></a>\n### 在 Keycloak b 中注册一个客户端 Keycloak a\n这很简单，如下图所示。关键配置已用红色框圈起来。\n\n用 Keycloak b 的管理员账号密码登录 Keycloak b，在相应的 Realm 中点击新建一个客户端，首先需要起个名字，比如命名为 UniHeart-Cloud-IAM。<br />\n<br />然后需要在客户端协议中选择“openid-connect”。所以说基础知识很重要，不然会在众多选项里迷失方向。<br />\n<br />随后在访问类型中，选择保密（如前面的基础知识里讲的，如果能够保证严格的 HTTPS 实施以及重定向 URI 的严格匹配，那么选择开放也是可以的）。<br />\n<br />最后，在重定向 URI 里配置好 Keycloak a 的重定向 URI（我填的是我在 Cloud IAM 中新部署的实例：https://lemur-2.cloud-iam.com/*），如果是选择开发的访问类型，那么这里的重定向 URI 必须一字不差。但是我这里选择了保密的访问类型，所以这里使用了通配符，保持灵活性。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617021266558-9dc9736a-3198-43ad-881b-47cf68383593.png#align=left&display=inline&height=929&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1858&originWidth=2360&size=340566&status=done&style=none&width=1180)<br />保存好后，切换到安全凭据面板，复制客户端密钥，后续步骤需要用到：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617021645842-86d215bf-5eb8-47a2-8ea3-3d1a8fa34dcb.png#align=left&display=inline&height=497&margin=%5Bobject%20Object%5D&name=image.png&originHeight=994&originWidth=2050&size=295950&status=done&style=none&width=1025)<br />注意在客户端认证中选择第二项：客户端 Id 和密钥的方式，然后复制密钥。\n<a name=\"PZEKc\"></a>\n### \n<a name=\"1by2F\"></a>\n### 在 Keycloak a 中添加 Keycloak b 为一个身份认证服务（idp）\n完成 Keycloak b 中的配置工作后，现在回到 Keycloak a，即新部署的 Cloud IAM 实例，使用 Keycloak a 的管理员账号密码登录，然后点击添加一个身份认证服务，选择 Keycloak openid connect 方式：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617021990702-8c3283b4-ce41-44bd-bf81-5e98b072dc8a.png#align=left&display=inline&height=528&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1056&originWidth=1758&size=439063&status=done&style=none&width=879)<br />首先为这个身份认证服务起个名字，比如 UniHeart At Jiwai Win<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617022010876-754deb05-f7cf-475f-89c7-1938fc4d46a9.png#align=left&display=inline&height=398&margin=%5Bobject%20Object%5D&name=image.png&originHeight=796&originWidth=2010&size=146715&status=done&style=none&width=1005)<br />然后的重点就是配置 OpenID Connect 了，基础知识又派上用场。这里最重要的是把 Keycloak b 服务器的 OIDC URI 端点中的\n\n- /realms/{realm-name}/protocol/openid-connect/auth 以及\n- /realms/{realm-name}/protocol/openid-connect/token \n- /realms/{realm-name}/protocol/openid-connect/userinfo 三个端点配置进去：\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617022164077-2fccf7a5-d8da-451b-b0bc-3ed26beac2b4.png#align=left&display=inline&height=982&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1964&originWidth=1942&size=255993&status=done&style=none&width=971)<br />注意在客户端认证项里选择以 POST 方式发送客户端密钥，并将 UniHeart-Cloud-IAM 填写在客户端 ID 中，同时将上一步复制好的密钥粘贴进入客户端密钥一栏。<br />\n\n<a name=\"siLvb\"></a>\n### 完成\n保存好就完成了。这时候点击右上角，退出当前管理员用户，就进入到了登录页面。你可以看到除了使用用户名密码登录方式之外，已经多了一个登录选项，这就是使用 Keycloak b 登录：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617022349248-b98ba6de-3870-4b3e-b455-b631a6d2d253.png#align=left&display=inline&height=260&margin=%5Bobject%20Object%5D&name=image.png&originHeight=520&originWidth=1608&size=114583&status=done&style=none&width=804)<br />[https://lemur-2.cloud-iam.com/auth/admin/uniheart/console/#/realms/uniheart/identity-provider-settings/provider/keycloak-oidc/uniheart-jiwai-win](https://lemur-2.cloud-iam.com/auth/admin/uniheart/console/#/realms/uniheart/identity-provider-settings/provider/keycloak-oidc/uniheart-jiwai-win)，这个链接，就是使用 Keycloak b 登录 Keycloak a 的完整链接。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617022405326-b48ecaa4-9cda-4e45-bf81-ffd738b483ee.png#align=left&display=inline&height=713&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1426&originWidth=1468&size=291986&status=done&style=none&width=734)\n"
  },
  {
    "id": 33498483,
    "title": "10 年前老博客以 JAM Stack 方式满血复活！",
    "description": "我是从 2009 年开始写博客的，当时出于对技术的无知和对 .NET 的痴迷，采用了 BlogEngine.NET 作为博客站，并且部署到了国外的托管虚拟主机。后来穷得越来越支付不起虚拟主机的月租费，最终在 2014 年将其迁移到了 Azure 的免费托管平台：https://be-net.a...",
    "custom_description": null,
    "updated_at": "2021-03-25T10:58:54.000Z",
    "created_at": "2021-03-25T07:59:46.000Z",
    "slug": "hqz5vc",
    "word_count": 4077,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1616653088932-4ec7e8f4-1816-4a0a-97a7-80399ea2ec36.png?x-oss-process=image%2Fresize%2Cw_1500",
    "body": "我是从 2009 年开始写博客的，当时出于对技术的无知和对 .NET 的痴迷，采用了 BlogEngine.NET 作为博客站，并且部署到了国外的托管虚拟主机。后来穷得越来越支付不起虚拟主机的月租费，最终在 2014 年将其迁移到了 Azure 的免费托管平台：[https://be-net.azurewebsites.net/](https://be-net.azurewebsites.net/)，似乎不错，然而它在中国的访问速度并不理想，于是放弃了维护，不再在该平台上更新博文。<br />\n<br />不是不再写博文，只是换到其他免费平台上了。当然想过将自己的 BlogEngine.NET 迁移到其他平台，但是很不顺利，于是将其归档，准备等自己技术更加成熟后再重启它。<br />\n<br />直到今天，觉得自己的技术已经足够成熟，开始着手重启它，过程可以说是相当顺利和高效，最后的效果是 10 年前的自己想像不到的：[https://jeff-tian.jiwai.win/](https://jeff-tian.jiwai.win/) 。<br />\n\n- 免费\n- 全静态\n- 有强大的 CDN 支持\n- https\n- 和 git 无缝集成\n\n\n\n<a name=\"0Gn5S\"></a>\n## 总结\n\n<br />10 年前的基于 SQLite 数据库和 .NET 服务端的单站点动态博客系统，被改造成了 JAMStack 技术栈的全静态拥有 CDN 和 https 支持的单页应用。<br />\n\n<a name=\"TLYW7\"></a>\n## JAMStack\nJAMStack 是一种让网站更快、更安全、并且更易于伸缩的架构。它构建在开发者热爱的众多工具链和工作流基础之上，使得生产力最大化。<br />\n<br />其核心原则是预渲染和解耦，从而让站点和应用的发布拥有前所未有的信心和弹性。<br />\n<br />JAM 最早可能是 JavaScript、API 和 Markup 的缩写，即使用标记语言写好站点视图，数据和交互通过 JavaScript 和 API 技术进行增强。但是现在成为了一个架构范式。<br />\n\n<a name=\"4bOsP\"></a>\n### 特性\n<a name=\"a4sDW\"></a>\n#### 预渲染\n在 JAMStack 中，整个前端都是在构建过程中预生成为高度优化过的静态页面和资源。这个预渲染的过程使得站点可以直接从 CDN 加载，节省了成本、减少了复杂度和风险，不再依赖关键的基础设施和动态服务器。<br />\n<br />因为有很多流行的工具用来生成站点，像 Gatsby，Hugo，Jekyll，Eleventy，NextJs 等等，很多网页开发者已经熟悉了所需要的这些工具，所有转变成更有生产力的 JAMStack 开发者是很容易的。\n<a name=\"vfn75\"></a>\n#### 利用 JavaScript 增强\n通过标记语言和直接从 CDN 加载的 JAMStack 站点中的其他用户接口资源，这些站点可以很快并且安全的发布。在这个基础上，JAMStack 站点可以使用 JavaScript 和 API 和后端服务沟通，从而允许增强和个性化用户体验。\n<a name=\"n1lLE\"></a>\n#### 利用服务更进一步增强\n丰富的 API 生态成为了 JAMStack 站点的显著赋能者。由于拥有利用域名专家的能力，这些专家可以通过 API 来提供产品和服务，从而团队可以构建出更加复杂的应用，相比自己实现这样的能力需要承担更多的风险和额外的负担。现在我们可以将诸如身份认证、支付、内容管理、数据服务、搜索以及更多的事情外包出去了。<br />\n<br />JAMStack 站点可以在构建时利用这些服务，并且在运行时直接通过 JavaScript 在浏览器里直接利用这些服务。清晰解耦的这些服务带来了更大的可移植性和灵活性，同时还显著降低了风险。<br />\n\n<a name=\"OohZ3\"></a>\n### 好处\n采用 JAMStack 架构的站点和项目工作流拥有各种好处，其中的关键是：\n<a name=\"EY1Aq\"></a>\n#### 安全\nJAMStack 从托管基础设施中移除了变动的部分和系统，从而只需要更少的服务器和系统，减少了攻击面。<br />页面和资源都是预生成的文件，从而支持只读托管，这更进一步减少了可能的攻击向量。同时支持由提供商提供动态的工具和服务，这些专业提供商有专门的团队来对其专业的产品做安全加固，并且提供高标准的服务。<br />\n\n<a name=\"q3dHW\"></a>\n#### 可扩展\n流行的处理高流量负载的架构是通过额外添加缓存热门视图和资源的逻辑来实现的，而在 JAMStack 架构中，这是<br />默认提供的：它不再需要额外的复杂逻辑和工作流来决定哪些资源何时需要缓存，因为整个站点是完全通过 CDN 来提供服务的。\n\n采用 JAMStack 的站点，所有的一切都被缓存在内容分发网络中。拥有更简单的部署，天然内置的冗余，以及难以置信的高负载能力等特性。\n\n<a name=\"5iEXm\"></a>\n#### 高性能\n页面加载速度对用户的体验和交互影响非常大。 JAMStack 站点不再需要服务器在请求时生成页面视图，而是在构建时提前生成页面。<br />\n<br />因为所有的页面已经在离用户最近的 CDN 节点中可获取，所以没有昂贵和复杂的基础设施，也能达到极高的性能。<br />\n\n<a name=\"r96D2\"></a>\n#### 可维护\n托管复杂性降低后，维护性任务也减少了。一个预生成的站点，无论直接从单主机还是直接从 CDN 加载都不再需要专家团队来护航。<br />\n<br />这些维护工作都在构建时完成了，所以现在是一个生成好的站点，它非常稳定并且可以无服务器托管，从而不存在打补丁、升级或者运维的工作。<br />\n\n<a name=\"FjxFt\"></a>\n#### 可移植\nJAMStack 站点是预生成的。这意味着你可以使用各种托管服务来托管它们，并且可以在你喜欢的托管服务中自由转移。任何简单的静态托管方案就足够了。<br />\n<br />基础设施绑定，再见。<br />\n\n<a name=\"XBzif\"></a>\n#### 开发体验\nJAMStack 站点可以使用各种工具构建。它们不依赖特定技术或者奇怪的小众框架。相反，它们构建在被广泛使用的工具之上并且遵守被广泛使用的约定。这样的结果就是，寻找具有激情和天赋的开发者就没那么困难了。<br />\n<br />效率和效益相得益彰。<br />\n\n<a name=\"CYuaB\"></a>\n### 最佳实践\n如果你坚持使用一点点最佳实践，那么在构建 JAMStack 项目时，你就可以真的从这个技术栈里得到最大的收益。<br />\n\n<a name=\"yipmU\"></a>\n#### 将整个站点部署在 CDN\n因为 JAMStack 项目不依赖服务端代码，所以可以分布式部署而不是存活在单台服务器上。直接将整站托管在 CDN  解锁了无可匹敌的速度和性能。你的应用推到边缘的东西越多，用户体验就越好。\n<a name=\"wwTRL\"></a>\n#### 现代化的构建工具链\n充分利用现代化的构建工具。浏览器的世界变化太快就像一片难以适应的丛林，但是你仍然希望不必等到明天的浏览器问世而在今天就用上明天的网页标准。那么目前这意味着你要使用 Babel、PostCSS、Webpack 以及相关的工具。\n<a name=\"aast2\"></a>\n#### 自动化构建\n因为 JAMStack 标记是预生成的，所以改变内容后只有在下一次构建才可能发不到生产环境。自动化这个过程将节省你很多精力。你可以利用 webhooks，或者使用一个包含自动化服务的发布平台。\n<a name=\"I8qtw\"></a>\n#### 原子化部署\n由于 JAMStack 项目增长得非常之大，新的改变可能需要重新部署成百上千的文件。一个一个的文件上传方式会导致在这个过程结束前系统处于一个不一致的状态。你可以利用让你实现“原子化部署”的系统来避免这个情况的发生，这种平台只在所有改变的文件全部更新后才会发布到生产环境。\n<a name=\"wf1Cd\"></a>\n#### 即时缓存失效方案\n当构建-部署的循环变成一个常规行为后，你需要确保当一个部署上线后，它就真的上线了。通过确保你的 CDN 能够处理即时缓存清空来打消你的任何疑虑。\n<a name=\"FFfMA\"></a>\n#### 将所有东西都放在 Git 里\n在 JAMStack 项目中，任何人都能够通过 git 克隆，然后使用标准流程安装需要的依赖（比如 npm install）之后在本地运行整个项目。不需要数据库克隆，不需要复杂的安装。这减少了贡献者的难题，也简化了 staging 和 testing 工作流。<br />\n\n<a name=\"RlmFi\"></a>\n## 复活过程\n\n<br />在了解到了 JAMStack 架构后，我感觉自己的技术储备准备好了。其实博客文章一旦写好，就应该是一份静态文件，毕竟没有什么太多的动态信息。静态文件的好处是没有服务器端性能损耗，并且可以缓存到 CDN 的终端节点。所以完全没有必要去使用 .NET 之类的服务器端程序。整个复活过程如下：<br />\n\n<a name=\"sYP15\"></a>\n### 静态站点生成工具的选择\n这样的工具非常多，我最终选择了 Stackbit。通过创建一个 Stackbit 站点，就能看到项目目录结构，这个项目其实是一个典型的 Gatsby JS 项目加上一个 Stackbit 工具链。博客文章主要在 src/pages/posts 目录下，并且每篇博客都是一个如下结构的 markdown 文件：\n```markdown\n---\nstackbit_url_path: posts/url\ntitle: 标题\ndate: '时间'\nexcerpt: >-\n  摘要...\nthumb_img_path: >-\n  头图URL\ncomments_count: 评论数\npositive_reactions_count: 点赞数\ntags:\n  - 标签1\n  - 标签2\ncanonical_url: >-\n  原文链接\ntemplate: post\n---\n正文部分\n```\n因此在后续就需要将数据导出成上面的结构\n<a name=\"hKdmI\"></a>\n### 数据导出\n之前的 BlogEngine.NET，我使用了 SQLite 作为数据库，现在需要将里面的结构化数据导出成为一个 JSON 文件。\n<a name=\"pzcFx\"></a>\n#### 工具\n以前用过 SQLite Browser、DBeaver 等等桌面软件，这些 GUI 工具都支持 SQLite。但是今天隆重推荐使用 Metabase，自从我使用了它，就爱不释手，再也不想用以前的那些桌面软件了。它是一个 Web 应用，启动非常简单：<br />先去官网下载一个 jar 包文件 metabase.jar。然后在命令行输入： `java -jar metabase.jar` 。这样就在本定环境启动了 metabase，打开浏览器，输入 http://localhost:3000 即可打开 metabase，输入 SQLite 文件路径，就进入到主页面。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616653088932-4ec7e8f4-1816-4a0a-97a7-80399ea2ec36.png#align=left&display=inline&height=370&margin=%5Bobject%20Object%5D&name=image.png&originHeight=740&originWidth=1612&size=80133&status=done&style=none&width=806)<br />点击打开 BlogEngine.NET，可以看到表结构，对于迁移博文来说，比较关注 Be Posts 和 Be Post Tag：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616653259820-a2102261-366e-4244-8f42-4023376acd85.png#align=left&display=inline&height=877&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1754&originWidth=1860&size=304082&status=done&style=none&width=930)<br />你可以很方便地浏览一下自己发布博文的频率情况，只需要点击进入 Be Posts 然后选择 Date Created 字段并且点击分布：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616653416214-98ea0e96-5ffe-4b9e-9c63-782c603388ca.png#align=left&display=inline&height=392&margin=%5Bobject%20Object%5D&name=image.png&originHeight=784&originWidth=1372&size=104958&status=done&style=none&width=686)<br />就能立即得到曲线图：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616653470226-a0d98a4d-a902-4576-a721-037e24aa3319.png#align=left&display=inline&height=794&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1588&originWidth=2000&size=186843&status=done&style=none&width=1000)\n<a name=\"pftEL\"></a>\n#### SQL 查询\n我们需要将数据导出成在前面分析过的数据结构，最终的 SQL 查询如下：\n```sql\nSELECT PostId, 'src/pages/posts/' ||  (case when ltrim(Slug) <> '' then Slug else PostId end) || '.md' as filePath, 'posts/' || (case when ltrim(Slug) <> '' then Slug else PostId end)  as urlPath, '---\n' || \n    'stackbit_url_path: >-\n' || '  posts/'  || (case when ltrim(Slug) <> '' then Slug else PostId end) ||\n    '\ntitle: ''' || replace(Title, '''', '\"') || '''\n' ||\n    'date: ''' || DateCreated || '''\n' ||\n    'excerpt: >-\n  ' ||\n    replace(Description, '\n', '\n  ') || '\n' ||\n    'comments_count: 0\n' ||\n    'positive_reactions_count: 0\n' ||\n    'tags: \n  - ' ||\n    ifNull((select tags from (select PostId, GROUP_CONCAT(tag, '\n  - ') as tags\nFROM (select distinct PostId, tag from be_PostTag) as be_PostTag\nwhere be_PostTag.PostId = POST.PostId group by be_PostTag.PostId)), '') || '\n' ||\n    'canonical_url: https://be-net.azurewebsites.net/post/' || strftime('%Y', DateCreated) || '/' || strftime('%m', DateCreated) || '/' || strftime('%d', DateCreated) || '/' || (case when ltrim(Slug) <> '' then Slug else PostId end) || '\n' ||\n    'template: post\n' ||\n    '---\n' || PostContent AS data\nFROM\n(\nSELECT \"be_Posts\".\"PostRowID\" AS \"PostRowID\", \"be_Posts\".\"BlogID\" AS \"BlogID\", \"be_Posts\".\"PostID\" AS \"PostID\", \"be_Posts\".\"Title\" AS \"Title\", \"be_Posts\".\"Description\" AS \"Description\", \"be_Posts\".\"PostContent\" AS \"PostContent\", \"be_Posts\".\"DateCreated\" AS \"DateCreated\", \"be_Posts\".\"DateModified\" AS \"DateModified\", \"be_Posts\".\"Author\" AS \"Author\", \"be_Posts\".\"IsPublished\" AS \"IsPublished\", \"be_Posts\".\"IsCommentEnabled\" AS \"IsCommentEnabled\", \"be_Posts\".\"Raters\" AS \"Raters\", \"be_Posts\".\"Rating\" AS \"Rating\", \"be_Posts\".\"Views\" AS \"Views\", \"be_Posts\".\"Slug\" AS \"Slug\", \"be_Posts\".\"IsDeleted\" AS \"IsDeleted\"\nFROM \"be_Posts\"\nWHERE \"be_Posts\".\"IsDeleted\" = 0 \nLIMIT 1048576\n) as POST\n```\n主要就是从 BePosts 和 BePostTag 两张表中，把数据组合成需要的样子。\n<a name=\"GtIoX\"></a>\n#### 标签聚合\n标签表结构如下：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616654311214-cf55ef49-be36-403f-a33f-5e8502b4ac87.png#align=left&display=inline&height=339&margin=%5Bobject%20Object%5D&name=image.png&originHeight=678&originWidth=1674&size=154921&status=done&style=none&width=837)<br />首先需要将同一个 PostId 的 Tag 聚合到一行，然后将他们用 “【回车符】  -  ” 分割串联。可以这样做：\n```sql\nifNull((select tags from (select PostId, GROUP_CONCAT(tag, '\n  - ') as tags\nFROM (select distinct PostId, tag from be_PostTag) as be_PostTag\nwhere be_PostTag.PostId = POST.PostId group by be_PostTag.PostId)), '')\n```\n以上考虑到了数据为空的情况，这样就组成了 markdown 文件中的 Tags 部分。\n<a name=\"JrAeg\"></a>\n#### URL 生成\n博文 URL 的生成，优先使用 Slug，当 Slug 为空时，回退到使用 PostId：\n```sql\n'posts/' || (case when ltrim(Slug) <> '' then Slug else PostId end)  as urlPath\n```\n<a name=\"TLwpw\"></a>\n#### 导出为 JSON\n除了以上两个比较特殊的 SQL 处理，其他的 SQL 都是平凡的。将他们运行，得到结果后，选择导出为 JSON 文件：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616655400934-6c85976a-8e81-454b-a49e-8b944e0fac59.png#align=left&display=inline&height=863&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1726&originWidth=1776&size=347844&status=done&style=none&width=888)<br />得到的 JSON 文件是这样的：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616655491959-c4b8f7d0-fb9e-4b24-80f9-419d003d2d15.png#align=left&display=inline&height=708&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1416&originWidth=3392&size=854775&status=done&style=none&width=1696)\n<a name=\"XcETK\"></a>\n### 静态文件生成\n如上所示，得到的 JSON 文件是一个数组，需要为其中每一个元素创建一个对应的文件。通过分析 Stackbit 官方的 stackbit-pull 库，可以发现我们只需要将其从远端服务拉取 JSON 响应的过程简化成直接从本地读取即可，剩下的创建文件的逻辑一模一样。所以，我对其稍加改造后，可以这样来运行：\n```shell\nnpx -p @jeff-tian/stackbit-pull stackbit-pull-json --json-file=/path/to/json\n```\n这时，项目的 src/pages/posts 目录下已经有了成百上千的文件。通过 `npm run develop` 本地运行起来，完美！\n```shell\n➜ npm run develop\n\n> @jeff-tian/space@0.0.1 develop /Users/tianjef/jeff-tian/unicms-copy-01\n> gatsby develop\n\nsuccess open and validate gatsby-configs - 0.088s\nYou can now view @jeff-tian/space in the browser.\n⠀\n  http://localhost:8000/\n⠀\nView GraphiQL, an in-browser IDE, to explore your site's data and schema\n⠀\n  http://localhost:8000/___graphql\n⠀\nNote that the development build is not optimized.\nTo create a production build, use gatsby build\n```\n打开 http://localhost:8000 <br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616657619347-2f2de750-55a7-4b64-8c8e-b231a1ab88a0.png#align=left&display=inline&height=964&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1928&originWidth=2720&size=3226428&status=done&style=none&width=1360)\n<a name=\"DKdC7\"></a>\n#### 图片 URL 替换\n其实没有那么完美，比如图片全部显示不了。原因是图片上传到 BlogEngine.NET 后，其 src 被设置成了一个需要动态处理的 URL：image.axd?picture=xxxx。通过 VSCode 或者 WebStorm 这样的 IDE 打开项目，使用正则表达式做一个替换，就可以解决问题。具体的正则表达式是这样的：\n```bash\n查找：(href|src)=\"[^\"]+?zizhujy\\.com\\/blog\\/image\\.axd\\?picture=([^\"]+?)\"\n\n替换成：$1=\"https://raw.githubusercontent.com/Jeff-Tian/blogeng\nine.net/master/Source/BlogEngine/BlogEngine.NET/App_Data/files/$2\"\n```\n以及：\n```bash\n查找: (href|src)=\"[^\"]+?zizhujy\\.com\\/BlogEngine\\/BlogEngine\\/BlogEngine.NET\\/image\\.axd\\?picture=([^\"]+?)\" \n\n替换成： $1=\"https://raw.githubusercontent.com/Jeff-Tian/blogengine.net/master/Source/BlogEngine/BlogEngine.NET/App_Data/files/$2\"\n```\n<a name=\"hpIEY\"></a>\n### 上传到 github\n将整个项目推到 github\n```shell\ngit commit -am \"sync blogengine.net\"\ngit push -u origin master\n```\n<a name=\"EjV9M\"></a>\n### netlify 自动部署\n使用 github 登录 netlify，同步 github 项目。当 GitHub 项目有新的推送时，netlify 会自动生成网站并且部署：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616657735012-7298e081-02fa-4a04-bea6-28b007b0d585.png#align=left&display=inline&height=695&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1390&originWidth=2654&size=298401&status=done&style=none&width=1327)<br />netlify 发布成功后，就可以访问生产站点了：[https://jeff-tian.jiwai.win](https://jeff-tian.jiwai.win) 。\n"
  },
  {
    "id": 33412660,
    "title": "如何评价需求提得好不好？",
    "description": "答案：评审的问题数量一页纸需求参考五步法教你几招发现需求的问题1. 是否描述完整了场景。场景的描述是否以用户为视角；如果改为以对象为视角，会不会有新发现。2. 条件完整性。是否采用了判定矩阵（基于笛卡尔积）列举了所有的可能性。（通常都会在这里栽跟头）3. 是否统一了术语。（通常都做不到）4. ...",
    "custom_description": null,
    "updated_at": "2021-03-23T08:19:23.000Z",
    "created_at": "2021-03-23T08:18:47.000Z",
    "slug": "vrrwbf",
    "word_count": 353,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1616487447549-4b8f02dc-215c-4d41-b383-dac741497d14.png?x-oss-process=image%2Fresize%2Cw_1500",
    "body": "答案：评审的问题数量<br />\n\n<a name=\"A0zyu\"></a>\n## 一页纸需求参考五步法\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616487447549-4b8f02dc-215c-4d41-b383-dac741497d14.png#align=left&display=inline&height=870&margin=%5Bobject%20Object%5D&name=image.png&originHeight=870&originWidth=1516&size=732534&status=done&style=none&width=1516)<br />\n\n<a name=\"89qro\"></a>\n## 教你几招发现需求的问题\n1. 是否描述完整了场景。场景的描述是否以用户为视角；如果改为以对象为视角，会不会有新发现。<br />2. 条件完整性。是否采用了判定矩阵（基于笛卡尔积）列举了所有的可能性。（通常都会在这里栽跟头）<br />3. 是否统一了术语。（通常都做不到）<br />4. 边界的定义。所有涉及到时间、费用、距离、容量等的地方都有上限，下限，是否考虑了计算机本身的时间、容量等的限制。<br />5. 异常条件。是否写了反面的情况，是否写了计算机不能工作的情况（比如磁盘容量满了）。<br />6. 是否容易阅读。长篇文字的，直接打回。肯定有问题。<br />7. 能否测试。比如说：随机算法怎么测试？<br />8. 是否考虑了并发。一般都没考虑。<br />9. 是否有逻辑错误，前后矛盾的地方。小的需求不容易出现这种问题，多个人写的，容易出现。\n\n10. 是否考虑了安全。通常都会被忽略。\n"
  },
  {
    "id": 33352510,
    "title": "在 eggjs 中集成 Keycloak 用户认证",
    "description": "Keycloak 是一个优秀的开源身份与访问管理系统，旨在为现代的应用程序和服务提供包含身份管理和访问管理功能。不少企业包含红帽公司，都将其作为其站点的单点登录工具，通过使用 Keycloak，只需要少量编码甚至不用编码，就能很容易地使应用程序和服务更安全。今天以 eggjs 为例子，展示只需...",
    "custom_description": null,
    "updated_at": "2021-03-22T10:28:41.000Z",
    "created_at": "2021-03-22T10:28:41.000Z",
    "slug": "evgbbz",
    "word_count": 768,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1616407284550-318d0e4f-ce1a-4bba-b1ac-a54a27718203.png?x-oss-process=image%2Fresize%2Cw_1500",
    "body": "> Keycloak 是一个优秀的开源身份与访问管理系统，旨在为现代的应用程序和服务提供包含身份管理和访问管理功能。不少企业包含红帽公司，都将其作为其站点的单点登录工具，通过使用 Keycloak，只需要少量编码甚至不用编码，就能很容易地使应用程序和服务更安全。\n\n<br />\n<br />今天以 eggjs 为例子，展示只需要少量代码，便可以利用 Keycloak 来保护你的 eggjs 服务。eggjs 是一个基于 NodeJs 的优秀企业级应用框架，不少企业使用它构建自己的服务（我曾经服务过的一个创业公司，基本上所有服务都是一个 eggjs 实例）。\n\n\n\n<a name=\"rXAzh\"></a>\n## 效果演示\n\n<br />请访问 [https://uniheart.pa-ca.me/keycloak/login](https://uniheart.pa-ca.me/keycloak/login) 体验。（**请忍受比较慢的响应速度，因为服务器端使用了免费的服务，并且部署在国外**）<br />\n<br />**打开 [https://uniheart.pa-ca.me/keycloak/login](https://uniheart.pa-ca.me/keycloak/login) 链接，会自动跳转到 Keycloak 登录页面：**<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616407284550-318d0e4f-ce1a-4bba-b1ac-a54a27718203.png#align=left&display=inline&height=635&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1270&originWidth=1840&size=162629&status=done&style=none&width=920)\n\n以上“微信”按钮，是按照《[基于 keycloak 的关注公众号即登录功能的设计与实现](https://zhuanlan.zhihu.com/p/349504145)》一文的介绍，实现的关注公众号即登录功能。推荐使用，因为更方便，但是仅对前 100 名用户有效，因为这是一个测试公众号，受此限制。\n\n\n<br />**无论是通过邮箱/密码的方式，还是关注公众号的方式，登录完成后，会跳转回 **[**https://uniheart.pa-ca.me/keycloak/login**](https://uniheart.pa-ca.me/keycloak/login)** 页面，目前这个页面只返回认证通过的 Keycloak 信息，比如：**<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616407601445-c9115200-bc00-45d0-b94c-3a97abfba8da.png#align=left&display=inline&height=937&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1874&originWidth=3074&size=986071&status=done&style=none&width=1537)<br />\n\n<a name=\"l89aI\"></a>\n## 将 Keycloak 集成到 eggjs 的步骤\n<a name=\"iIXoN\"></a>\n### 首先在 Keycloak 中新建一个 Realm\n只需要取个名字就好：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616408010616-a74120da-a9e3-439c-9c67-81d68fc6be01.png#align=left&display=inline&height=349&margin=%5Bobject%20Object%5D&name=image.png&originHeight=698&originWidth=2356&size=129902&status=done&style=none&width=1178)\n<a name=\"M5hFC\"></a>\n### 然后在这个 Realm 中创建一个客户端\n取一个名字，后面要用到。然后配置好你的 eggjs 服务所公开的终端节点（域名+路径），可以使用通配符。比如：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616407827840-05b8e780-76e8-4317-8a23-3dd48d23c6b4.png#align=left&display=inline&height=924&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1848&originWidth=2380&size=328345&status=done&style=none&width=1190)\n<a name=\"UzH7x\"></a>\n### 然后，在你的 eggjs 项目根目录下添加一个 `keycloak.json` 文件\n内容如下，注意相关字段要和 Keycloak 对应。realm 对应于刚刚创建的 Realm，resource 对应于刚刚创建的客户端名称。\n```json\n{\n    \"realm\": \"UniHeart\",\n    \"auth-server-url\": \"https://keycloak.jiwai.win/auth\",\n    \"ssl-required\": \"external\",\n    \"resource\": \"UniHeart-Client\"\n}\n\n```\n<a name=\"a5mcg\"></a>\n### 随后，添加 @jeff-tian/egg-keycloak 插件\n```shell\nnpm install --save @jeff-tian/egg-keycloak\n```\n<a name=\"aQE6s\"></a>\n### 在 config/plugin.ts 文件中，增加如下配置：\n```typescript\n...\n  keycloak: {\n    enable: true,\n    package: '@jeff-tian/egg-keycloak',\n  },\n...\n```\n<a name=\"4KvGd\"></a>\n### 最后，在你想要保护的路由前，增加 Keycloak 中间件：\n比如，在 /app/router/keycloak/index.ts 文件中，这样保护 /keycloak/login 路由（正如示例所做的）。**关键就在于添加的 `keycloak.protect()` 中间件。**\n```typescript\nimport { Application } from 'egg'\n\nexport default (app: Application) => {\n  const { router } = app\n\n  const subRouter = router.namespace('/keycloak')\n\n  subRouter.get(\n    'keycloak.login',\n    '/login',\n    app.keycloak.protect(),\n    async ctx => {\n      ctx.body = ctx.session['keycloak-token']\n    },\n  )\n}\n\n```\n<a name=\"MOP4Q\"></a>\n### 完成！\n"
  },
  {
    "id": 33145677,
    "title": "微服务架构、框架与平台",
    "description": "微服务架构微服务架构是一种架构风格，这种架构下的应用是由一系列的细粒度、互相连接的服务组成的，其发展如火如荼，甚至已经成为构建弹性可扩展应用的新标准。The Software House发布的2020年微服务状态报告显示微服务首先在扩张性和性能上表现不俗，其次在搭建新项目、可维护性和可调试性、...",
    "custom_description": null,
    "updated_at": "2021-03-18T12:38:37.000Z",
    "created_at": "2021-03-18T12:38:37.000Z",
    "slug": "erao9g",
    "word_count": 783,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1616067954989-3510742e-9ea8-4139-9aae-f5aa962621c3.png",
    "body": "<a name=\"rpdtP\"></a>\n## 微服务架构\n微服务架构是一种架构风格，这种架构下的应用是由一系列的细粒度、互相连接的服务组成的，其发展如火如荼，甚至已经成为构建弹性可扩展应用的新标准。The Software House发布的2020年微服务状态报告显示微服务首先在扩张性和性能上表现不俗，其次在搭建新项目、可维护性和可调试性、工作效率、团队协作上都得到高分。<br />\n\n<a name=\"jqoif\"></a>\n## 应用现状\n奥莱利技术咨询最近发布的关于云计算增长的技术雷达问卷调查报告显示, 52%以上的企业或组织正在使用微服务架构。其中使用年限超过3年的占比在28%以上。![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616067954989-3510742e-9ea8-4139-9aae-f5aa962621c3.png#align=left&display=inline&height=370&margin=%5Bobject%20Object%5D&name=image.png&originHeight=370&originWidth=836&size=35432&status=done&style=none&width=836)<br />\n\n<a name=\"GoLi2\"></a>\n## 开发语言分布\n微服务架构对编程语言没有要求，其解耦能力使得不同项目可以用不同的编程语言实现，只需要提供标准接口供互相调用即可。虽然如此，但调查显示，NodeJs占据了统治地位（本来很长的一段时间里，微服务都是和通常由Java或者.NET实现的企业级的大型解决方案相关联的），占比65%，远超出第二名Java和第三名.NET；而其中的26%将NodeJs作为其微服务里唯一的技术栈。可以看出NodeJs不仅变得越来越流行，还和微服务结合得相当好。而当前“微服务加Serverless”模型正在成为云计算的新趋势，在各个云厂商提供的Serverless服务中，NodeJs都是绝对的一等公民。<br />![Picture1.jpg](https://cdn.nlark.com/yuque/0/2021/jpeg/221736/1616068112909-a4c2533d-3b3e-44f8-b2a8-bc78ac8031c8.jpeg#align=left&display=inline&height=925&margin=%5Bobject%20Object%5D&name=Picture1.jpg&originHeight=925&originWidth=1274&size=94012&status=done&style=none&width=1274)\n<a name=\"kLjMG\"></a>\n## 趋势\n主流的微服务开源框架有阿里的 Dubbo 和 Netflix 的 Spring Cloud，而 Google 的 Kubernetes 则是平台级的微服务框架。虽然微服务架构本身对语言没有要求，而且 NodeJs 被广泛使用，但是主流的微服务开发框架比如 Dubbo 和 Spring Cloud 还是只支持 Java。尽管如此， Kubernetes 的出现使得其他语言也能应用在微服务架构中。比如以上报告显示出的 NodeJs 的极高使用占比，很可能就是因为使用 NodeJs 的公司同时也使用了 Kubernetes。正好我本身服务过的两家公司，一家是小型创业公司，一家是全球知名跨国企业，都是使用了 Kubernetes 和 NodeJs 技术栈。可以预见到 Kubernetes 是一个长期趋势。<br />\n\n<a name=\"LtDtE\"></a>\n## Dubbo、Spring Cloud 和 Kubernetes 对比\n个人只用过 Kubernetes，对 Dubbo 和 Spring Cloud 一窍不通，这里贴上几张架构师杨波在极客时间的视频课上分享的对比图，相信看了之后小白也能秒懂：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616070738717-9bb0b1b9-9728-428e-b071-96f77c689bb6.png#align=left&display=inline&height=1027&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2054&originWidth=3274&size=2798275&status=done&style=none&width=1637)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616070751873-e9601ceb-c238-49e1-b845-66d78f97dfec.png#align=left&display=inline&height=1027&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2054&originWidth=3274&size=2372963&status=done&style=none&width=1637)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616070752867-631656a7-5cb8-42b0-8ad3-065704f29ca1.png#align=left&display=inline&height=1027&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2054&originWidth=3274&size=2097267&status=done&style=none&width=1637)<br />\n\n<a name=\"1T0Fm\"></a>\n## 参考文献\n\n- [MAGOULAS R, SWOYER S. Cloud Adoption in 2020[EB/OL]. 2020.https://www.oreilly.com/radar/cloud-adoption-in-2020/.]()\n- [HOUSE T S. State of Microservices 2020[EB/OL]. 2020.https://tsh.io/state-of-microservices/.]()\n- 杨波. Dubbo、SpringCloud和Kubernetes该如何选型？[EB/OL]. 2020. [http://gk.link/a/107fZ](http://gk.link/a/107fZ) .\n\n\n\n"
  },
  {
    "id": 33013354,
    "title": "缓存重定向方案设计",
    "description": "缓存重定向这个名字，是我的杜撰，指的是一个不带缓存的接口，通过重定向，跳转到一个缓存接口来为客户端提供服务。本质上这个不带缓存的接口，只实现缓存键的计算，从而引导客户端拿到缓存的结果。一个实际应用查询离我最近功能需求：下拉列表展示商店，并将这些商店按照离手机当前地理位置的距离从近到远排序。接口...",
    "custom_description": null,
    "updated_at": "2021-03-17T05:39:17.000Z",
    "created_at": "2021-03-17T05:39:17.000Z",
    "slug": "bzr09l",
    "word_count": 1238,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1615952980703-30ca44f2-f070-4b02-b1d5-73569a8680e0.png",
    "body": "> 缓存重定向这个名字，是我的杜撰，指的是一个不带缓存的接口，通过重定向，跳转到一个缓存接口来为客户端提供服务。本质上这个不带缓存的接口，只实现缓存键的计算，从而引导客户端拿到缓存的结果。\n\n\n\n<a name=\"lz5tJ\"></a>\n## 一个实际应用\n查询离我最近功能需求：下拉列表展示商店，并将这些商店按照离手机当前地理位置的距离从近到远排序。<br />\n\n<a name=\"N0xDE\"></a>\n## 接口设计\n终端节点：GET /locations<br />参数：query string，包含 经度、纬度<br />\n\n<a name=\"9yP97\"></a>\n## 查询的后端实现\n简单起见，可以认为最终从数据库查询时的 SQL 大致长这样：\n```sql\nSELECT * \nFROM location_table\nWHERE coordinates IS NOT NULL and \n\tcoordinates ST_CONTAINS(ST_GeomFromText(:wkxString)\n```\n其中 wksString 参数使用了 `wks` 库将传入的经纬度进行地理位置编码。<br />\n\n<a name=\"wXvx6\"></a>\n## 挑战点\n如果每次请求过来都从数据库查询，在请求量超过一定数量时，数据库会扛不住。<br />\n\n<a name=\"zTvdi\"></a>\n## 分析\n由于商店数据更新特别低频，所以对于同样的请求，返回结果在长时间内都是一样的，显然可以做缓存。这样的话，只需要在返回头里指定对于同样的查询参数，给一个比较长的缓存时间就好了。<br />但是，再进一步优化，如果有两个人相隔很近，手机传过来的请求里的经纬度，只有小数点后几位的差别，那么结果也是一样的，但是由于请求参数不是严格一致，因此不能击中缓存从而查询链条又会走到数据库。如果要将经纬度相近的查询请求，对应到同一个缓存键，那么，可以让客户端再传参时对经纬度数字做一个四舍五入，从而击中同一个缓存键。如果客户端不受控，那么这个四舍五入的逻辑，需要放到服务器端来做。<br />比如第一期预计只有少量用户，因此以上接口和对应的客户端也已上线。上线后吸引了大量用户，在用户量剧增的情况下，眼看着服务器在短期内就快要扛不住了，需要将现有版本进行迭代升级，就可以采用缓存重定向方案，从而不需要改动客户端。<br />\n\n<a name=\"Q63E6\"></a>\n## 缓存重定向方案\n经过以上分析后，得出的结论是 GET /locations 终端节点，其返回结果不设置缓存。它只负责四舍五入的逻辑，将请求重定向至 GET /locations/cached 终端节点，将同一个位置附近范围的请求，都能对应到同样的查询参数，从而实现一片区域内，只有第一个人搜索时会查询到数据，后续请求的结果都从缓存获取。<br />\n\n<a name=\"C6tvY\"></a>\n### 架构图大致如下\n![arch.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1615952980703-30ca44f2-f070-4b02-b1d5-73569a8680e0.png#align=left&display=inline&height=112&margin=%5Bobject%20Object%5D&name=arch.png&originHeight=112&originWidth=642&size=26592&status=done&style=none&width=642)\n<a name=\"g9qfs\"></a>\n### 请求响应的时序图如下\n![](https://cdn.nlark.com/yuque/__puml/f25a4909eca27e771f1634796ec90388.svg#lake_card_v2=eyJjb2RlIjoiQHN0YXJ0dW1sXG5cbmF1dG9udW1iZXJcblxuYWN0b3IgXCLnlKjmiLdcIiBhcyBVc2VyXG5wYXJ0aWNpcGFudCBcIuWuouaIt-err1wiIGFzIEJyb3dzZXJcbnBhcnRpY2lwYW50IFwiQ0ROXCIgYXMgY2RuXG5wYXJ0aWNpcGFudCBcIuacjeWKoeerr1wiIGFzIFNlcnZlciAjb3JhbmdlXG5wYXJ0aWNpcGFudCBcIuaVsOaNruW6k1wiIGFzIGRiXG5cbmFjdGl2YXRlIFVzZXJcblxuVXNlciAtPiBCcm93c2VyOiDngrnlh7vigJznprvmiJHmnIDov5HigJ3nmoTllYblupdcbmFjdGl2YXRlIEJyb3dzZXJcblxuQnJvd3NlciAtPiBjZG46IEdFVCAvbG9jYXRpb25zP2xhdD0xLjEyMzQ1JmxuZz0yLjU0MzIxXG5hY3RpdmF0ZSBjZG5cbmNkbiAtPiBjZG46IOayoeaciSAvbG9jYXRpb25zP2xhdD0xLjEyMzQ1JmxuZz0yLjU0MzIxIOeahOe8k-WtmFxuY2RuIC0-IFNlcnZlcjogR0VUIC9sb2NhdGlvbnM_bGF0PTEuMTIzNDUmbG5nPTIuNTQzMjFcbmRlYWN0aXZhdGUgY2RuXG5hY3RpdmF0ZSBTZXJ2ZXJcblNlcnZlciAtPiBCcm93c2VyOiBSZWRpcmVjdCAvbG9jYXRpb25zL2NhY2hlZD9sYXQ9MS4xJmxuZz0yLjVcbmRlYWN0aXZhdGUgU2VydmVyXG5cbkJyb3dzZXIgLT4gY2RuOiBHRVQgL2xvY2F0aW9ucy9jYWNoZWQ_bGF0PTEuMSZsbmc9Mi41XG5hY3RpdmF0ZSBjZG5cbmNkbiAtPiBjZG46IOayoeaciSAvbG9jYXRpb25zL2NhY2hlZD9sYXQ9MS4xJmxuZz0yLjUg55qE57yT5a2YXG5jZG4gLT4gU2VydmVyOiBHRVQgL2xvY2F0aW9ucy9jYWNoZWQ_bGF0PTEuMSZsbmc9Mi41XG5hY3RpdmF0ZSBTZXJ2ZXJcblNlcnZlciAtPiBkYjogU1FMIOafpeivolxuYWN0aXZhdGUgZGJcbmRiIC0-IFNlcnZlcjogW-WVhuW6lzEsIOWVhuW6lzIsIC4uLl1cbmRlYWN0aXZhdGUgZGJcblNlcnZlciAtPiBjZG46IFvllYblupcxLCDllYblupcyLCAuLi5dXG5ub3RlIGxlZnQgb2YgU2VydmVyOiDorr7nva7nvJPlrZjlpLRcbmRlYWN0aXZhdGUgU2VydmVyXG5cbmNkbiAtPiBCcm93c2VyOiBb5ZWG5bqXMSwg5ZWG5bqXMiwgLi4uXVxuZGVhY3RpdmF0ZSBjZG5cblxuQnJvd3NlciAtLT4gVXNlclxuZGVhY3RpdmF0ZSBCcm93c2VyXG5cblVzZXIgLT4gVXNlcjog6LWw5Yiw5Y-m5LiA5Liq5L2N572uXG5cblVzZXIgLT4gQnJvd3Nlcjog54K55Ye74oCc56a75oiR5pyA6L-R4oCd55qE5ZWG5bqXXG5hY3RpdmF0ZSBCcm93c2VyXG5Ccm93c2VyIC0-IGNkbjogR0VUIC9sb2NhdGlvbnM_bGF0PTEuMTIzNDYmbG5nPTIuNTQzMTlcbmFjdGl2YXRlIGNkblxuY2RuIC0-IGNkbjog5rKh5pyJIC9sb2NhdGlvbnM_bGF0PTEuMTIzNDYmbG5nPTIuNTQzMTkg55qE57yT5a2YXG5jZG4gLT4gU2VydmVyIDogR0VUIC9sb2NhdGlvbnM_bGF0PTEuMTIzNDYmbG5nPTIuNTQzMTlcbmRlYWN0aXZhdGUgY2RuXG5hY3RpdmF0ZSBTZXJ2ZXJcblxuU2VydmVyIC0-IEJyb3dzZXI6IFJlZGlyZWN0IC9sb2NhdGlvbnMvY2FjaGVkP2xhdD0xLjEmbG5nPTIuNVxuZGVhY3RpdmF0ZSBTZXJ2ZXJcbkJyb3dzZXIgLT4gY2RuOiBHRVQgL2xvY2F0aW9ucy9jYWNoZWQ_bGF0PTEuMSZsbmc9Mi41XG5hY3RpdmF0ZSBjZG5cbmNkbiAtPiBjZG46IOWtmOWcqCAvbG9jYXRpb25zL2NhY2hlZD9sYXQ9MS4xJmxuZz0yLjUg55qE57yT5a2YXG5jZG4gLT4gQnJvd3NlcjogW-WVhuW6lzEsIOWVhuW6lzIsIC4uLl1cbmRlYWN0aXZhdGUgY2RuXG5cbkJyb3dzZXIgLT4gVXNlcjpcbm5vdGUgcmlnaHQgb2YgVXNlcjog5ou_5Yiw5ZCM5qC355qE57uT5p6cXG5kZWFjdGl2YXRlIEJyb3dzZXJcbmRlYWN0aXZhdGUgVXNlclxuXG5AZW5kdW1sIiwidHlwZSI6InB1bWwiLCJtYXJnaW4iOnRydWUsImlkIjoiUnAwN3kiLCJ1cmwiOiJodHRwczovL2Nkbi5ubGFyay5jb20veXVxdWUvX19wdW1sL2YyNWE0OTA5ZWNhMjdlNzcxZjE2MzQ3OTZlYzkwMzg4LnN2ZyIsImNhcmQiOiJkaWFncmFtIn0=)<a name=\"FALe9\"></a>\n## 注意事项\n\n- 排序逻辑需要客户端实现。这样的话，在一定的范围内的不同设备，虽然拿到的响应列表是一样的，但是排序可能会有所不同。\n- 在搜索时需要在配置的搜索半径基础上增加一个额外的距离。比如配置的搜索半径为 100 公里，那么实际搜索时需要在 110 公里范围内搜索。因为在对经纬度进行四舍五入时，使得中心点变成了如下图所示的黑色正方形。也就是说，在黑色正方形区域内移动，得到的结果都是一样的，这个黑色正方形的变长是 20 公里的话，就需要以输入的经纬度为圆心，在配置好的搜索半径 100 公里外额外增加 10 公里。这样可以保证当位置移动时不会漏掉某些边缘结果。![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1615958705843-6b91c9c4-b96b-4c33-a4f2-da09607bd6cb.png#align=left&display=inline&height=151&margin=%5Bobject%20Object%5D&name=image.png&originHeight=301&originWidth=324&size=94494&status=done&style=none&width=162)\n\n\n<br />\n\n<a name=\"TCkgZ\"></a>\n## 总结\n当需要对某些查询做缓存，但是又要应对缓存键（URL）变化时，可以通过将原始接口逻辑改造成只计算缓存键，然后重定向到可缓存接口的方式实现。这个可以缓存的接口，往往涉及到数据库操作，无法很好地横向扩展，因此可以通过 CDN 缓存的能力来解决效率问题。而原始接口则不设置缓存，由于它是纯计算，可以横向扩展，因此也没有必要缓存了。\n"
  },
  {
    "id": 32601310,
    "title": "循环 vs 递归（反转链表示例）",
    "description": "在昨天的文章中提到，循环是一个正向线性思维，但是递归确实一种一种为始的反向思维。多数人习惯与正向思维，因为反向思维实际上有点儿反本能的，但是往往反向思维却能很好地解决一些看上去复杂正向思维难以解决的问题，比如汉诺塔问题。今天以一个常见的算法面试题，来对比循环和递归在代码上的差别，以及为什么更推...",
    "custom_description": null,
    "updated_at": "2021-03-09T12:04:49.000Z",
    "created_at": "2021-03-09T12:04:49.000Z",
    "slug": "nry4dw",
    "word_count": 1644,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1615287608904-e816e6d1-6171-4e95-b935-f3b4ba903f32.png",
    "body": "在昨天的文章中提到，循环是一个正向线性思维，但是递归确实一种一种为始的反向思维。多数人习惯与正向思维，因为反向思维实际上有点儿反本能的，但是往往反向思维却能很好地解决一些看上去复杂正向思维难以解决的问题，比如汉诺塔问题。<br />\n<br />今天以一个常见的算法面试题，来对比循环和递归在代码上的差别，以及为什么更推荐递归的写法以简化代码。这个常见的算法面试题，就是反转链表（[https://leetcode-cn.com/problems/reverse-linked-list/](https://leetcode-cn.com/problems/reverse-linked-list/)）。<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1615287608904-e816e6d1-6171-4e95-b935-f3b4ba903f32.png#align=left&display=inline&height=782&margin=%5Bobject%20Object%5D&name=image.png&originHeight=782&originWidth=1190&size=100470&status=done&style=none&width=1190)\n<a name=\"fzzvb\"></a>\n## 准备工作\n\n<br />为了方便起见，可以打开浏览器，F12 进入开发控制台，使用 JavaScript 来实现和验证。首先写一些帮助函数来方便自动化测试：\n```javascript\nfunction test(expect, sut, message) {\n  console.log(message)\n\n  let sutString = linkToArray(sut).join('->');\n  let actual = reverseLink(sut);\n  let left = linkToArray(expect).join('->');\n  let right = linkToArray(actual).join('->');\n  \n  if(left === right){\n    console.log('\\t\\t' + left + ' == revert(' + sutString + '): PASS');\n  } else {\n    console.error('\\t\\t' + left + ' == revert(' + sutString + '): FAIL');\n  }\n}\n\nfunction linkToArray(head){\n  const res = [];\n  let set = new Set();\n  \n  while(head) {\n    if(set.has(head)) {\n      res.push('loop!');\n      return res;\n    }\n    \n    res.push(head.val);    \n    set.add(head);\n    head = head.next;\n  }\n  \n  return res;\n}\n\n```\n\n<br />然后，将设计好的测试用例列出来：\n```javascript\n// 测试用例：\ntest(null, reverseLink(null), '测试 null')\n\nlet headA = {val: 1, next: null}\ntest(headA, (headA), '测试一个节点')\n\nheadA.next = {val: 2, next: null};\nlet reversed = {val: 2, next: {val: 1, next: null}}\ntest(reversed, (headA), '测试两个节点');\n\nheadA = {val: 1, next: {val: 2, next: {val: 3, next: null }}}\nreversed = {val: 3, next: {val: 2, next: {val: 1, next: null }}}\ntest(reversed, (headA), '测试三个节点');\n\nlet cycle = {val: 1, next: null}\ncycle.next = cycle;\n\ntest(cycle, (cycle), '测试指向自己的一个节点的循环链表');\nconsole.assert(linkToArray(cycle).join('->') === '1->loop!', 'cycle');\n\nlet next = {val: 2, next: null};\ncycle.next = next;\nnext.next = cycle;\n\ntest(next, (cycle), '测试两个互相指向的节点组成的循环链表');\nconsole.assert(linkToArray(cycle).join('->') === '1->2->loop!', 'cycle');\n\nnext = {val: 3, next:null};\ncycle = {val: 1, next: {val: 2, next: next}}\nnext.next = cycle;\n\ntest(next, (cycle), '测试由三个节点组成的循环链表');\n```\n<a name=\"5XMQq\"></a>\n## 循环实现\n\n<br />比较容易想到的方案就是从头开始循环，每次对前后节点的指针进行倒转。在实现过程中，会发现指针的倒转，需要特别注意。\n```javascript\n// 假设不存在重复节点\nfunction reverseLink(head) {\n  if(head === null) {\n    return head;\n  }\n    \n  let prev = head;\n  \n  let next = prev.next;\n  prev.next = null;\n  \n  while(prev && next) {\n    let temp = next.next;\n    next.next = prev;\n    prev = next;\n    next = temp;\n    \n    if(next === head) {\n      head.next = prev;\n      return prev;\n    }\n  }\n  \n  return prev;\n}\n```\n注意以上 while 循环体中，开头 4 行的顺序特别重要！顺序错误就会导致程序 BUG。将以上实现和测试用例在开发者控制面板中运行，测试全部通过：<br />\n\n<a name=\"eYKss\"></a>\n## 递归实现\n\n<br />递归实现的关键在于思考方式，你要设想一个小一点的问题，已经被解决了。在这里，可以设想除了头节点，从下一个节点开始到末尾的子链表已经被反转了，这时候，只需要将关注点放在如何将头节点放置到子链表的末尾，这样就实现了整个链表的反转：<br />\n\n```javascript\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    if(!head){\n        return null;\n    }\n    \n    if(head.next === null){\n        return head;\n    }\n    \n    const rev = reverseList(head.next);\n    head.next.next = head;\n    head.next = null;\n    \n    return rev;\n};\n```\n可以看出，除了一些边界检查和循环类似之外，主要逻辑简单了很多！将头节点放置在已经被反转的子链表之后，这个逻辑很自然，因此代码上没有需要特别注意的地方。这个实现和测试结果可以参见：[https://leetcode-cn.com/submissions/detail/43900191/](https://leetcode-cn.com/submissions/detail/43900191/)<br />\n<br />但是要注意的是，在循环实现中，支持了环链表（参见后面的测试用例）。如果要让递归实现也支持环链表，需要再做一些改进：<br />\n```javascript\nvar reverseList = function(head) {\n  return ((head, cycleStart) {\n    if(!head){\n        return null;\n    }\n    \n    if(head.next === null || head.next === head){\n        return head;\n    }\n  \n    if (head.next === cycleStart) {\n      return head;\n    }\n    \n    const rev = reverseList(head.next, cycleStart);\n    head.next.next = head;\n  \n  \tif(!cycleStart) {\n    \thead.next = null;\n    } else {\n      head.next = rev;\n    }\n    \n    return rev;\n  })(head, head);\n};\n```\n\n\n<a name=\"fjU7L\"></a>\n## 彩蛋\n\n<br />递归方式会导致一个问题，相同的操作会做很多次。有一个简单粗暴的改进方案，就是使用空间换时间，不需要改动实现代码，只要使用前面文章中介绍过的 memoized 将其包装起来即可。\n```javascript\n const reverseList = memoized(\n  (head) => {\n    return ((head, cycleStart) {\n      if(!head){\n          return null;\n      }\n\n      if(head.next === null || head.next === head){\n          return head;\n      }\n\n      if (head.next === cycleStart) {\n        return head;\n      }\n\n      const rev = reverseList(head.next, cycleStart);\n      head.next.next = head;\n\n      if(!cycleStart) {\n        head.next = null;\n      } else {\n        head.next = rev;\n      }\n\n      return rev;\n  \t})(head, head);\n  }\n);\n```\n完整的代码和测试见：[https://github.com/Jeff-Tian/JobInterviewTests/blob/dev/ByteDance/src/reverseList.ts](https://github.com/Jeff-Tian/JobInterviewTests/blob/dev/ByteDance/src/reverseList.ts)。<br />\n\n"
  },
  {
    "id": 32531058,
    "title": "以终为始：假设问题已经解决",
    "description": "最近有一些思考，发现都可以总结为：要解决一个问题，先假设问题已经得到解决。我恍然大悟，这是一种以终为始的态度，以前只是听到以终为始，现在对这个词有了自己的理解。我的多篇文章里，反复提到测试驱动开发，在写实现代码之前，先把测试写出来，这个潜台词就是说：假设这个功能已经实现了，那么下面这段代码将如...",
    "custom_description": null,
    "updated_at": "2021-03-08T11:19:37.000Z",
    "created_at": "2021-03-08T10:43:17.000Z",
    "slug": "gkw7ci",
    "word_count": 1168,
    "cover": null,
    "body": "最近有一些思考，发现都可以总结为：要解决一个问题，先假设问题已经得到解决。我恍然大悟，这是一种以终为始的态度，以前只是听到以终为始，现在对这个词有了自己的理解。<br />\n<br />我的多篇文章里，反复提到测试驱动开发，在写实现代码之前，先把测试写出来，这个潜台词就是说：假设这个功能已经实现了，那么下面这段代码将如何如何表现。<br />\n<br />在《[世界上有哪些代码量很少，但很牛逼很经典的算法案例？](https://www.zhihu.com/question/358255792/answer/978553119)》中，也是这个思路，假设已经找到了衡量字符串结构的方法，那么问题就只剩下对使用这个衡量方法得到的结果是否相同这个判断了，因此首先实现了 equalBy 方法。（等等，问什么不先写 equalBy 的测试用例，然后再写它的实现？这个我的确偷懒了，因为它实现太简单，而且我太有信心了，所以直接写了实现代码。但是后面的 structure 方法，就写了针对性的测试。）<br />\n<br />最近拿了个复旦大学的在职研究生学位，学了什么都忘了，但是清晰记得第一节课的场景。那是章忠志老师的《计算机复杂网络》。课上老师给我们介绍汉诺塔问题（看似简单，但是实际上很多复杂的问题都可以归类到汉诺塔问题），我想了很久，找不到办法，最后老师给了提示：假设规模小一点的问题已经解决，那么只需要再往前走一步就能解决整个问题了。当然，整个问题解决后，需要再回溯到起点，但这只是多米诺骨牌，只是步骤多而已，但是每一步都变得简单了，递归而已。这个解决办法太优美了，让我记忆深刻。<br />\n<br />几年前刷力扣上的算法题时，做过一个反转链表的题目，当时特别关注细节，记得在两个节点之间反转指针时，需要特别小心，写好了反转指针细节，只要一个循环，从头节点开始，直到最后，就完事了。虽然实现过程是使用测试驱动开发，代码级别上实现了以终为始，但是解决这个问题的思维模式，属于明显的**前向线性思维**。<br />\n<br />在有了**以终为始**这个感悟后，我又想起这个问题，问自己，如果不用循环，可以怎么解决呢？于是就假设头节点之后的短一点的链表已经被反转了，那么问题就只剩下将头节点如何接上这个已经被反转的子链表上了，显然这非常简单。使用这种办法，我再一次实现了反转链表。实现结果非常理想，代码显著缩短，可读性明显提升。更重要的是，避开了那个要小心操作指针交换的步骤（容易让阅读代码的人费解），很让人满意。<br />\n<br />除了写代码，这个思考方式也能应用到别的地方。比如，感受到职业危机怎么办，这时候不如想一下，假设自己没有职业危机，那么自己是什么状态？那么问题就只剩下把状态调整到位了。对面试的职位没有把握，就可以假设已经通过面试了，那么有什么经验分享给现在的自己，以及会想到那些通过面试的，甚至面试官在哪里，他们会想问什么问题，期待什么样的候选者等等。**当然，这里面还有换位思考，但是设想自己已经通过了面试，能给自己很多启发。**\n\n**总结：**<br />\n<br />今天纯粹分享一点感悟文字，明天分享反转链表的详细案例和代码。总的来说，以终为始的思考方式，让问题的解决变得简单而优雅。\n"
  },
  {
    "id": 32352741,
    "title": "我是如何从焦油坑里爬出来的",
    "description": "《人月神话》里说过，软件工程，没有银弹。软件的复杂性是不会凭空消失的，但是任由复杂性野蛮生长，就会不知不觉陷入复杂性焦油坑，越挣扎陷得越深。尽管复杂性不会消失，但是仍然是可以管理好的。我见过很多团队不遵守好的实践，最后被折磨得焦头烂额的反例；也在不同团队中，通过应用以下好的实践和心法成功避开焦...",
    "custom_description": null,
    "updated_at": "2021-03-04T14:57:07.000Z",
    "created_at": "2021-03-04T14:57:07.000Z",
    "slug": "cksgeh",
    "word_count": 883,
    "cover": null,
    "body": "《人月神话》里说过，软件工程，没有银弹。软件的复杂性是不会凭空消失的，但是任由复杂性野蛮生长，就会不知不觉陷入复杂性焦油坑，越挣扎陷得越深。<br />\n<br />尽管复杂性不会消失，但是仍然是可以管理好的。我见过很多团队不遵守好的实践，最后被折磨得焦头烂额的反例；也在不同团队中，通过应用以下好的实践和心法成功避开焦油坑甚至力挽狂澜，一次次验证了好的过程一定会产生好的结果这个事实。<br />\n\n<a name=\"6geus\"></a>\n## 工程实践：测试驱动开发\n\n<br />不要再找借口说这个有多难，你以为你写完代码扔给测试，靠祈祷就能不出问题吗？你得使用测试驱动开发，证明不会出问题，才会有信心拍胸脯说不会有问题。<br />\n<br />测试过程应该不断提前，直到提到开发行为的前面，以终为始。不这样做，开始很轻松，甚至很随意，不主动用测试驱动开发，就会在后面被各种 BUG 驱动，各种被动。<br />\n<br />我最近几年，如果是创建新项目，一定会先将测试框架和 CI/CD 流水线搭好；如果看到已有项目缺少这些，也一定会先补上。事实证明，磨刀不误砍柴功。<br />\n\n<a name=\"7gxih\"></a>\n## 心法：结构化思考\n\n<br />这其实是小学数学时就学到的方法，分类讨论时要做到不重叠、不遗漏。非常浅显的道理，不知道为什么会被麦肯锡包装成所谓的 MECE 法则。<br />\n<br />在某个团队见过一段冗长的代码，各种 if/else 嵌套，里面的条件就没有做到 MECE，重叠的还好，居然有遗漏的分支！这些被遗漏的逻辑分支就没有机会 callback，这就是当时收到用户投诉是不是页面会卡死没有反应的原因（点了按钮，ajax 请求一直挂起得不到响应）。<br />\n<br />当时我拉了测试一起，画了个矩阵列举所有可能的逻辑组合，理清后针对每一种逻辑分支写了自动化测试用例，跑下来就能重现卡死的 BUG。将 if/else 确实的逻辑分支不上，就修复了。当然，后来进一步重构，消除重叠路径，精简代码，最后使用策略模式，消除 if/else，这都得益于有 MECE 的测试用例跑着，让我可以放心重构代码。当然重构后的代码并没有彻底消除复杂性，但是可读性提升了，良好的代码组织结构而不再是一大坨。由于更有序，使得复杂性没有野蛮生长。<br />\n\n<a name=\"ooe4I\"></a>\n## 总结\n\n<br />其实，没有什么威力强大的银弹，但是却有简单又行之有效的方法。TDD 的开发循环很简单，只需要每次都使用即可。结构化思考小学生都会，由于总被忽视，以至于被麦肯锡包装卖钱去了。<br />\n<br />记住**大道至简**，记住**慢就是快**。\n"
  },
  {
    "id": 32291776,
    "title": "译诗一首",
    "description": "似乎是突然间，所有企业都开始大搞特搞“数字化转型”。这个似乎是 10 年前的提法，慢慢地消失后突然间又火了起来。对于个人，我也想把自己以前的一些零星的散落着的东西收集起来，存在云上，也美名其曰“数字化”。昨天翻到自己翻译的一首家喻户晓的 4 行诗，今天又翻到一首自己 2017 年 9 月 1 ...",
    "custom_description": null,
    "updated_at": "2021-03-03T15:30:24.000Z",
    "created_at": "2021-03-03T15:30:24.000Z",
    "slug": "ituq7g",
    "word_count": 462,
    "cover": null,
    "body": "似乎是突然间，所有企业都开始大搞特搞“数字化转型”。这个似乎是 10 年前的提法，慢慢地消失后突然间又火了起来。<br />\n<br />对于个人，我也想把自己以前的一些零星的散落着的东西收集起来，存在云上，也美名其曰“数字化”。<br />\n<br />昨天翻到自己翻译的一首家喻户晓的 4 行诗，今天又翻到一首自己 2017 年 9 月 1 日翻译的一首诗：<br />\n<br />**停车静观林前雪**<br />—— 罗伯特·弗罗斯特<br />\n<br />我知道这是谁家林子，<br />主人就住在我们村子。<br />他却不知我在此停了下来，<br />欣赏着林前雪景悠哉游哉。<br />\n<br />然而马驹感到不安，<br />这儿离农舍太远。<br />前有树林挡路，后面冰湖一片，<br />况且又是一年中最黑的夜晚。<br />\n<br />于是它摇了摇脖上的铃铛，<br />像是在询问主人什么情况。<br />万籁俱寂里除了摇铃响，<br />只剩下清风吹得雪飘扬。<br />\n<br />树林可爱、深邃又幽暗，<br />可我有些承诺要去实现。<br />在安睡前还有长长的路要赶，<br />在安睡前还有长长的路要赶。\n\n附原诗：<br />\n<br />**Stopping by Woods on a Snowy Evening**\n\nRobert Frost<br />\n<br />Whose woods these are I think I know.<br />His house is in the village though;<br />He will not see me stopping here<br />To watch his woods fill up with snow.<br />\n<br />My little horse must think it queer<br />To stop without a farmhouse near<br />Between the woods and frozen lake<br />The darkest evening of the year.<br />\n<br />He gives his harness bells a shake<br />To ask if there is some mistake.<br />The only other sound's the sweep<br />Of easy wind and downy flake.<br />\n<br />The woods are lovely, dark and deep.<br />But I have promises to keep,<br />And miles to go before I sleep,<br />And miles to go before I sleep.\n"
  },
  {
    "id": 32216774,
    "title": "译诗一首",
    "description": "在翻看自己几年前的一些东西时，竟然发现了一首自己翻译的小诗一首，没想到自己曾经也是一个有才之人，同时开始反思为什么现在的我只知道工作？沙里见人间，花中天堂显。手心握无限，刹那成永远。—— 威廉·布莱克《天真的预言》原文如下：To see a world in a grain of sand A...",
    "custom_description": null,
    "updated_at": "2021-03-02T11:38:27.000Z",
    "created_at": "2021-03-02T11:38:27.000Z",
    "slug": "awbz4r",
    "word_count": 286,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1614685062641-69aec33d-e945-481e-b5e3-84874ab19111.png",
    "body": "在翻看自己几年前的一些东西时，竟然发现了一首自己翻译的小诗一首，没想到自己曾经也是一个有才之人，同时开始反思为什么现在的我只知道工作？<br />\n<br />沙里见人间，<br />花中天堂显。<br />手心握无限，<br />刹那成永远。<br />\n<br />—— 威廉·布莱克《天真的预言》<br />\n<br />原文如下：<br />\n<br />To see a world in a grain of sand <br />And a heaven in a wild flower,<br />Hold infinity in the palm of your hand <br />And eternity in an hour.<br />\n<br />—— Auguries of Innocence by William Blake<br />\n<br />这 4 行诗是《Auguries of Innocence》的开头四行，我特别喜欢，尤其是最后一句，让我感觉美妙和震撼。但是看了很多中文翻译版，给我的感觉都平淡了，于是斗胆自己翻译一个版本，读完自己翻译的版本后竟然觉得有些原版的味道了（可能是自我陶醉吧）。<br />\n<br />今天把它公开出来，希望能够强行在众多的翻译中再增加一个版本。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1614685062641-69aec33d-e945-481e-b5e3-84874ab19111.png#align=left&display=inline&height=810&margin=%5Bobject%20Object%5D&name=image.png&originHeight=810&originWidth=1440&size=2514128&status=done&style=none&width=1440)\n"
  },
  {
    "id": 32125227,
    "title": "使用 -c 和 xargs 简化多个命令行操作",
    "description": "背景Redis Cluster 没有开放公网访问，不能从开发机直接连接，只能从集群内部连接。开发要操作这个 Redis Cluster，就需要先登陆集群内部某个中转机，在使用命令行访问。比如，要删除匹配的键，一般这样操作：kubectl exec -it jump-machine -- sh ...",
    "custom_description": null,
    "updated_at": "2021-03-01T07:16:21.000Z",
    "created_at": "2021-03-01T07:16:21.000Z",
    "slug": "nkilct",
    "word_count": 286,
    "cover": null,
    "body": "<a name=\"4uqLJ\"></a>\n## 背景\n\n<br />Redis Cluster 没有开放公网访问，不能从开发机直接连接，只能从集群内部连接。开发要操作这个 Redis Cluster，就需要先登陆集群内部某个中转机，在使用命令行访问。<br />\n<br />比如，要删除匹配的键，一般这样操作：\n```shell\nkubectl exec -it jump-machine -- sh\n成功进入中转机\n\nredis-cli -c -h redis-cluster-host --scan --pattern \"*key*\"\n\nthe-key-pattern-1\nthe-key-pattern-2\n...\n\n查出键后，再进行删除\n\nredis-cli -c -h redis-cluster-host DEL \"the-key-pattern-1\"\n(1)\n\nredis-cli -c -h redis-cluster-host DEL \"the-key-pattern-2\"\n(1)\n\nredis-cli -c -h redis-cluster-host DEL \"the-key-pattern-3\"\n(1)\n```\n\n\n<a name=\"qyOu8\"></a>\n## 简化\n\n<br />如果能够一行命令完成上面所有的操作，那么将非常省心，节约时间和方便自动化。通过利用 `xargs` 可以完成简化：\n```shell\nkubectl exec -it jump-machine -- sh -c 'redis-cli -c -h redis-cluster-host --scan --pattern \"*key*\" | xargs -i redis-cli -c -h redis-cluster-host DEL {}'\n```\n\n\n<a name=\"LIYsU\"></a>\n## 注意点\n\n\n1. 将需要在中转机上执行的命令使用单引号括起来，这很重要\n1. 最后的 `{}` 也很重要，否则会遇到这样的错误： `(error) CROSSSLOT Keys in request don't hash to the same slot` \n"
  },
  {
    "id": 32043620,
    "title": "闭包的妙用 —— memoize",
    "description": "闭包回顾在《闭包是个什么球》中介绍说闭包是一个特殊的高阶函数，它会返回另一个函数，而这个被返回的函数，又引用了其上层函数中的变量。那么，这种特殊的或者说奇怪的函数有什么用呢？我在另一篇《闭包有什么用》一文里罗列了一些。今天再次回到闭包这个话题，使用一个例子来具体说明其用处，这个例子就是 mem...",
    "custom_description": null,
    "updated_at": "2021-02-27T08:33:11.000Z",
    "created_at": "2021-02-27T08:33:11.000Z",
    "slug": "gnu74o",
    "word_count": 1794,
    "cover": null,
    "body": "<a name=\"JPWgH\"></a>\n## 闭包回顾\n\n<br />在《闭包是个什么球》中介绍说闭包是一个特殊的高阶函数，它会返回另一个函数，而这个被返回的函数，又引用了其上层函数中的变量。那么，这种特殊的或者说奇怪的函数有什么用呢？我在另一篇《闭包有什么用》一文里罗列了一些。今天再次回到闭包这个话题，使用一个例子来具体说明其用处，这个例子就是 memoize。<br />\n\n<a name=\"ZocNI\"></a>\n## memoize\n\n<br />memoize，是一个常见的函数，很多库比如 lodash 或者 rambda 中都有，可供你拿来就用。它用空间换时间，让耗时的操作只会执行一次，从而加快程序的运行速度。<br />\n<br />它的实现，就用到了闭包。我们试着来实现一个 naive memoize 吧！首先明确一下需求：<br />\n<br />对于某个函数 fn，只要它一旦被 memoize 过，那么，对于同样的参数，它将立即给出结果而不需要再次计算。<br />\n<br />动手写代码实现 memoize 前，先想想怎么验证它是否被实现了呢？（这是一个测试驱动开发的好习惯）<br />\n<br />思路是在某个函数中增加一个计数器，一旦调用一次，就增加 1。所以对于同样的参数调用，期待这个计数器只会被增加一次。不如就用加法函数来验证吧：\n```typescript\n it('memoize sum', () => {\n    let count = 0;\n\n    const sum = (x1: number, x2: number) => {\n      count++;\n\n      return x1 + x2;\n    };\n\n    const memoizedSum = memoize(sum);\n\n    expect(count).toBe(0);\n    expect(memoizedSum(1, 1)).toEqual(2);\n    expect(count).toBe(1);\n    expect(memoizedSum(1, 1)).toEqual(2);\n    expect(count).toBe(1);\n    expect(memoizedSum(1, 2)).toEqual(3);\n    expect(count).toBe(2);\n });\n```\n跑一下，发现 memoize 含没有被定义，我们来写个实现：\n```typescript\nexport const memoize = (fn: Function) => {\n  const cache: Record<string, any> = {};\n\n  return (...args: any) => {\n    const key = JSON.stringify(args);\n    if (!cache[key]) {\n      cache[key] = fn(...args);\n    }\n\n    return cache[key];\n  };\n};\n```\n再次运行测试，通过了！仔细看一下这个幼稚的实现，简直是闭包定义（返回一个引用了上层函数也就是外部作用域里的变量的函数的高阶函数）的完美体现。首先，memoize 接受一个函数作为参数；其次，它并不执行那个参数，而是返回另外一个函数，这个被返回的函数体才会去调用原本传入的函数，因此将原函数的执行延迟了。最后，返回的函数体中引用了上层函数里定义的 cache 变量。<br />\n\n<a name=\"XVpuO\"></a>\n## 总结\n\n<br />到这里，一个幼稚的 memoize 就实现了，用法和 lodash 里的 memoize 类似。<br />\n\n<a name=\"EVZic\"></a>\n## 避坑指南\n\n<br />我曾经在使用 lodash 的 memoize 时，希望用最小的改动，将一个耗时操作封装一下，成为一个只会将同样的事情做一次的操作，于是写了这样的代码：\n```diff\nexport timeConsumingFn = () {\n...\n}\n\nexport main() {\n  ...\n-\ttimeConsumingFn()\n+ _.memoize(timeConsumingFn)()\n  ...\n}\n```\n结果发现，还是每次执行都很耗时，感觉被 lodash 的 memoize 骗了。后来仔细一想，原来时自己的使用姿势不正确，因为上面的写法中，虽然对原耗时操作进行了 memoize 封装，但是每次调用都是重新封装一次，于是被封装后的函数，对它来说，每次都是第一次执行，所以导致了原来的目标没有实现。还记得在 memoize 函数体中有一个 cache 吗？以上写法导致每次都是新建一个 cache，每次的 cache 里存了一个操作结果后，就没有继续利用了。就是说，以上写法不仅没能让原本的操作加快速度，反而增加了很多内存占用。<br />\n\n<a name=\"EjnHJ\"></a>\n## 正确的写法\n\n<br />应该将 memoize 封装后的函数使用新的函数名保存，并保证每次执行使用第一次封装后的新函数（关键在于封装只需要而且只能进行一次）。\n```diff\nexport timeConsumingFn = () {\n...\n}\n\n+ memoizedTimeConsumingFn = _.memoize(timeConsumingFn)\n\nexport main() {\n  ...\n-\ttimeConsumingFn()\n+ memoizedTimeConsumingFn()\n  ...\n}\n```\n成功实现加快程序运行速度的目标！<br />\n\n<a name=\"rDUNH\"></a>\n## 将避坑指南写进测试里\n\n<br />以上介绍了 lodash 的 memoize 避坑指南，那么我们写的幼稚的 memoize 有同样的坑吗？当然有，那么写一个测试用例，以示警告：<br />\n\n```typescript\nit(\"doesn't memoize if you use it like this: \", () => {\n  let count = 0;\n  const sum = (x1: number, x2: number) => {\n    count++;\n\n    return x1 + x2;\n  };\n\n  expect(count).toBe(0);\n  expect(memoize(sum)(1, 1)).toEqual(2);\n  expect(count).toBe(1);\n  expect(memoize(sum)(1, 1)).toEqual(2);\n  expect(count).toBe(2);\n});\n\n```\n<a name=\"ksdYS\"></a>\n## 忘掉避坑指南\n\n<br />虽然有办法避坑，但是那个坑实在太容易掉进去了呀！毕竟 memoize 这个名字听上去就是只要用一下它就将原函数记住了呀，还非要一个额外的变量存储那个被记住的函数？<br />\n<br />所以我们现在将幼稚的 memoize 再增强一下吧，这个增强版，我们希望即使直接用，不用新的变量，也能达到同样的效果。不如把这个增强的 memoize 函数叫做 memoized 吧，我们希望达到的效果，也写成测试用例，只需要把那个预警测试用例稍改一下：\n```typescript\nit('does memoize if you use memoized instead', () => {\n  let count = 0;\n  const sum = (x1: number, x2: number) => {\n    count++;\n\n    return x1 + x2;\n  };\n\n  expect(count).toBe(0);\n  expect(memoized(sum)(1, 1)).toEqual(2);\n  expect(count).toBe(1);\n  expect(memoized(sum)(1, 1)).toEqual(2);\n  expect(count).toBe(1);\n});\n```\n看上去非常完美，怎么实现这个 memoized 呢？我有一个很直接简单粗暴的想法，可能也是一个疯狂的想法：**为什么不用 memoize 将它自己封装一下呢**？毕竟 memoize 是一个函数，而 memoize 的参数可以是任何函数。于是我写下了如下的实现代码：\n```typescript\nexport const memoized = memoize(memoize);\n```\n有点不敢相信，但是运行一下测试，通过！<br />\n<br />使用 memoized，再也不用记住那个避坑指南了，减少了很多认知负担。从此这个程序员过上了幸福的编码生活。<br />\n<br />\n\n"
  },
  {
    "id": 31933521,
    "title": "Who am I",
    "description": "I am currently working as a backend engineer, but I have also the frontend experience including web, mini program and native apps. Before my early ...",
    "custom_description": null,
    "updated_at": "2021-02-25T04:42:22.000Z",
    "created_at": "2021-02-25T04:42:22.000Z",
    "slug": "kdbefa",
    "word_count": 118,
    "cover": null,
    "body": "I am currently working as a backend engineer, but I have also the frontend experience including web, mini program and native apps. Before my early programming careers I had been a test engineer, so I have multiple perspective to the system from backend to frontend and through testing all along. I can programming with multiple language, but focused on NodeJs in recent 6 years.<br />\n<br />I've been working for 14 years, with the initial 4 years on non-programming and 10 years on programming. I've been developer lead that managed 2 frontends and 2 backends in my team. Although I've never lead a big team, but I have been a virtual lead horizontally that need to collabarote with other teams. <br />\n<br />\n\n"
  },
  {
    "id": 31838303,
    "title": "架构模式",
    "description": "架构模式，也叫架构风格，它是一个通用的、可重用的解决方案，用于在给定上下文中的软件体系结构中经常出现的问题。架构模式与软件设计模式类似，但具有更广泛的范围。一个架构模式常常可以分解成很多个设计模式的联合使用。MVC模式就属于架构模式，流行的微服务架构，其定义上也是说它是一种将应用构建为一组服务...",
    "custom_description": null,
    "updated_at": "2021-02-23T12:10:47.000Z",
    "created_at": "2021-02-23T12:10:47.000Z",
    "slug": "ttf7ny",
    "word_count": 151,
    "cover": null,
    "body": "架构模式，也叫架构风格，它是一个通用的、可重用的解决方案，用于在给定上下文中的软件体系结构中经常出现的问题。架构模式与软件设计模式类似，但具有更广泛的范围。一个架构模式常常可以分解成很多个[设计模式](https://baike.baidu.com/item/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1212549)的联合使用。[MVC模式](https://baike.baidu.com/item/MVC%E6%A8%A1%E5%BC%8F)就属于架构[模式](https://baike.baidu.com/item/%E6%A8%A1%E5%BC%8F/700029)，流行的**微服务架构**，其定义上也是说它是一种将应用构建为一组服务的**架构风格**。<br />\n<br />\n\n"
  },
  {
    "id": 31835429,
    "title": "架构模式",
    "description": "",
    "custom_description": null,
    "updated_at": "2021-02-23T10:48:55.000Z",
    "created_at": "2021-02-23T10:48:55.000Z",
    "slug": "nxc3tc",
    "word_count": 0,
    "cover": null,
    "body": "\n"
  },
  {
    "id": 31835410,
    "title": "最近一年的成长",
    "description": "一年前，作为开发组长，由于要花更多时间协调资源，对接产品经理，项目管理等等，所以写代码的时间相对较少。最近一年作为后端开发工程师，多数时间在写代码上，总体来说，最近一年的工作是相当不容易的，面临特别多的挑战，但是回想起来，在工作上得到新的技术成长不多，不过好的是有机会应用很多好的技术实践。克服...",
    "custom_description": null,
    "updated_at": "2021-02-25T03:03:38.000Z",
    "created_at": "2021-02-23T10:47:29.000Z",
    "slug": "yu7tea",
    "word_count": 970,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1614083483101-486d0af3-7998-46d5-b4f2-5bb6be9823f1.png?x-oss-process=image%2Fresize%2Cw_1500",
    "body": "一年前，作为开发组长，由于要花更多时间协调资源，对接产品经理，项目管理等等，所以写代码的时间相对较少。最近一年作为后端开发工程师，多数时间在写代码上，总体来说，最近一年的工作是相当不容易的，面临特别多的挑战，但是回想起来，在工作上得到新的技术成长不多，不过好的是有机会应用很多好的技术实践。<br />\n\n<a name=\"V3S2m\"></a>\n## 克服的挑战\n\n- **沟通障碍**：团队中的信息鸿沟特别大，因此如何从仅有的信息或者线索中按图索骥，侦探一样地工作就特别重要。心得是多使用搜索功能，然后得益于自己是开发身份，去多看代码，看所有能看到的代码，这样才能像拼图一样理解一些事情。像《Hidden Figures》中的主人公一样，在很多信息被保密不能查看的情况下，多方面数据计算验证，以及使用一些像将纸透过灯光去看等等获取信息。另外 Bing 有个 Work Search，要多用。![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1614083483101-486d0af3-7998-46d5-b4f2-5bb6be9823f1.png#align=left&display=inline&height=378&margin=%5Bobject%20Object%5D&name=image.png&originHeight=756&originWidth=1706&size=138148&status=done&style=none&width=853)\n- **权限级别低，但是有权限的人并不会帮你**：一方面，高层希望你快，但是另一方面，很多事情需要 DevOps 的协助，因为相关系统你没有权限因此处处受到制肘。这时候，只能开动脑筋想各种 Work around。比如 Jenkins 流水线，破败不堪，但是你没有权限去修复，去 DevOps 群里反映问题，不仅得不到帮助，还会收到各种抱怨，似乎光是看到你的信息，就已经浪费了他们的时间了，只能自己找各种办法，比如通过重放面板改代码调整。当然另一方面，你要积极地申请权限，不断申请，有时候有些权限会开放给你。\n- **工具链一坨屎**：一方面，约会，找各个团队聊，尽量形象化说明问题。比如比喻现在我们在原始社会，不求一步迈进青铜时代，只求做点改进，进入石器时代，就是一个很大的进步了。另一方面，在自己能够做得地方，自己主动花时间改进，然后分享给整个 Global 团队，增加自己的影响力和可见度，对以后寻求别人的协助也有帮助。\n\n\n\n<a name=\"qWNet\"></a>\n## 好的工程实践\n\n\n- **TDD**：好在写代码的时间比较多，而且有代码审核流程。因此，自己使用 TDD，提交高质量代码，还是很受到代码评审者的尊重的。总的来说，这一年给团队里项目中的测试覆盖度增加做了很大贡献。\n- **通用代码下沉**：通用代码下沉到库，给 Global 团队做展示，反响不错。\n- **主导一些大功能的开发**：主动发起需要前后端以及 DevOps 协作的大故事，自己承担后端的同时，提前为前端解决各种障碍。\n- **Design For Failure**: 由于是做原生 APP，不像网站应用那么方便回滚和更新，所以在有大的功能上线时，需要考虑到线上出问题后的回滚方案（ab_test）。以及由于促销的流量可能会暴增至平时的 10 倍，需要考虑到服务降级的熔断措施（基于 Redis 实现了 Defcon mode）。\n"
  },
  {
    "id": 31786378,
    "title": "大型外企和国内互联网小厂的文化对比",
    "description": "我曾经在几家外企工作过，后来头脑发热加入了国内的互联网创业公司，尽管我非常努力，经常通宵达旦地工作，但是公司并没有变得更好，于是后来还是回到大型外企继续搬砖。我并没有进入过国内的互联网大厂，因此拿国内小厂和国外大厂做对比不一定公平，但只是想分享个人经验而已，绝对没有崇洋媚外的意思。第一个不同点...",
    "custom_description": null,
    "updated_at": "2021-02-23T11:33:09.000Z",
    "created_at": "2021-02-23T11:33:09.000Z",
    "slug": "knmp7u",
    "word_count": 1632,
    "cover": null,
    "body": "我曾经在几家外企工作过，后来头脑发热加入了国内的互联网创业公司，尽管我非常努力，经常通宵达旦地工作，但是公司并没有变得更好，于是后来还是回到大型外企继续搬砖。<br />\n<br />我并没有进入过国内的互联网大厂，因此拿国内小厂和国外大厂做对比不一定公平，但只是想分享个人经验而已，绝对没有崇洋媚外的意思。<br />\n<br />第一个不同点很多人都会说，外企管理相对扁平，这个没错，但是管理层的意志还是要坚决被执行的，这一点本质上没有区别。只是在国内小厂，开会时主要是管理层说话，一般没人敢质疑什么，曾经有个胆子大的设计师稍微表现出抱怨，CTO 就厉色呵斥。但是在外企，你可以畅所欲言，甚至会上当面质疑 CEO 都行，CEO 都会礼貌回应，但是会后，你不执行那是混不下去的。<br />\n<br />第二个就是，即使我在国内小厂工作特别努力，但是在管理层看来，似乎还不够，永远都不够，就有这种感觉。每天下班前发日报，每周日前发周报，渐渐地变成了日报需要精确到几点到几点干了啥，花了多长时间，完成了百分之多少。渐渐变成 996 成为了一个制度，总之你今天尽最大努力所达到的高度，在明天就是一个最低标准。而在外企，下班时间一到，甚至到之前，有人就走了。如果你下班后还在，如果上级看到，一般都会催促你 Go Home。甚至办公室的灯光会到点自动熄灭，窗帘自动升起提醒你下班。当然你可以手动再去打开电灯，自愿加班也不会被强行驱逐。周报日报是没有的，但是自己对项目还是要有责任心的，否则出了问题，根因分析会议会让你难堪。<br />\n<br />第三个区别就是国内小厂一般会有考勤，而且会越来越严格。迟到罚款，按照旷工处理等等，这个很不人性化。大卡时间哪怕差了一秒，或者有时候没迟到，但是忘记打卡，损失是很严重的。但是外企一般没有考勤要求，所以迟到早退的人很普遍，但是只要你把事情做好，是没有任何问题的。但是外企并不是没有考勤管理，只是比较隐蔽，如果上级觉得不喜欢你，或者是你真的没有把事情做好，那么上级可能找 HR 拉你的每天的门禁出入记录，以此推算你的上班时间。我见过有人被上级直接无责任开除，原因是 HR 拉了他 6 个月的工作日门禁出入记录，没有一天满 8 小时的（这员工的表现的确过分了）。<br />\n\n<a name=\"w1fJe\"></a>\n## 在未来赋能型组织才能更好地生存\n\n<br />当然，外企就一定好吗？那要看怎么定义这个好。我认为企业和生物一样，是在不断演变的，那么好不好，就看它能不能在变化的世界里生存下来，也就是说要适应变化，要顺应趋势。那么未来的企业要怎样才能活得更好呢？又一个很有启发的观点，要从**管理型组织转变成赋能型组织**。从这点上讲，国内小厂和多数大型外企都得加油。<br />\n<br />本文的目的在于增加对外企的介绍，以增加熟悉国内小厂的同学们对于大型外企的认识。所以在最后，附上一段某外企的自我介绍。<br />\n<br />**在我们这里工作很有趣**\n\n**一起玩耍**：我们为自己的公平、信任和相互尊重的文化感到自豪，在这里人们总是感觉到可以自由表达自我。每个人的独特素质形成了特殊的团队环境，发掘出每个人最好的一面。我们非常关心员工的健康，并且帮助员工找到自己的工作/生活的平衡。我们致力于构建一个让每个人都享受工作的环境。<br />\n<br />**跨年龄段的想象力**：疯狂的点子不只是小孩子的特权，我们鼓励你在工作中玩耍 —— 实验、创造性思维、并且将你的想象付诸实践。我们还在每一年找出一天，让我们所有国家和地区的员工都停下手头的工作去全身心地玩耍。这是非常有启发的一天，不仅好玩，还能让我们记住我们为什么要从事目前的事业。<br />\n<br />**价值观导向**：想象力、创造力、趣味、学习、关心他人、质量。无论你在哪个国家和地区，都能从我们的玩耍中发现这 6 个价值观。它们从最开始的地方指引我们所做的事业并打造了我们的工作方式，加固了我们所坚持的精神 —— “只有做好才是足够好的”。如果你的个性与此相似，那么你在这里将会茁壮成长。<br />\n\n<a name=\"xz8xM\"></a>\n## 不要在没有价值观的企业上浪费时间\n\n<br />可以看出这家外企特别注重价值观，这是一个相对好的和值得你继续考察的企业，虽然宣称的价值观和公司的实际情况可能有差距，但是如果一个企业都没有和不向外宣传其价值观，那就不值得你进一步考察，因为这样的企业会没有底线（血的教训）。\n"
  },
  {
    "id": 31755059,
    "title": "使用 k6 快速测出一个 api 的大致吞吐量",
    "description": "吞吐量如果一个网页应用每秒钟接收到 50 个请求，但是它实际上每秒钟只能处理 30 个，那么另外的 20 个请求就只能在一个队列中等待。在性能测试结果中，吞吐量的表现经常使用 TPS 来表示。测试策略可以使用负载测试找到应用的 TPS，其策略是使用一系列的事务组合（平常的和密集的），来看看有多...",
    "custom_description": null,
    "updated_at": "2021-02-22T09:51:47.000Z",
    "created_at": "2021-02-22T09:11:47.000Z",
    "slug": "idlkas",
    "word_count": 1736,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1613985077778-1eae68e3-c0f0-469b-92f7-65d592c76a2b.png",
    "body": "<a name=\"ktjYy\"></a>\n## 吞吐量\n\n<br />如果一个网页应用每秒钟接收到 50 个请求，但是它实际上每秒钟只能处理 30 个，那么另外的 20 个请求就只能在一个队列中等待。在性能测试结果中，吞吐量的表现经常使用 TPS 来表示。<br />\n\n<a name=\"apOvo\"></a>\n## 测试策略\n\n<br />可以使用负载测试找到应用的 TPS，其策略是使用一系列的事务组合（平常的和密集的），来看看有多少事务在可接受的时间框架内成功通过。<br />\n\n<a name=\"0yeGJ\"></a>\n## 工具\n\n<br />工具上，可以采用高端专业的工具比如 Visual Studio Team System 中的负载测试功能，当然也可以自己写代码来模拟负载。自己写代码衡量请求的响应时间虽然很容易，但是来模拟负载，就需要太多的工作了。Visual Studio Team System 可以让你挑选一系列的事务组合、模拟网络延时，它还将用户的思考时间也考虑进去了、甚至还有测试迭代等等功能，所以采用这个高大上的工具来做负载测试是非常适合的。<br />\n<br />但是，除非是 .NET 技术栈，很少有人会去安装 Visual Studio，且不说安装麻烦，等待时间长，操作上需要太多鼠标点击，各种图形界面操作，非常令人反感。<br />\n<br />可能有人会说，有图形界面操作，多么令人感动啊，怎么会令人反感？是的，图形界面显得更友好，但是太多步骤太多动画就不方便快速做一些实验。所以今天特别介绍使用另一个工具：k6，来做同样的事情。相比 Visual Studio，它轻量化，使用简单。但是它没有图形界面，需要写点代码，这可能极度符合另一拨人（包括我）的口味。<br />\n\n<a name=\"mXTZy\"></a>\n## k6\n\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613985077778-1eae68e3-c0f0-469b-92f7-65d592c76a2b.png#align=left&display=inline&height=317&margin=%5Bobject%20Object%5D&name=image.png&originHeight=317&originWidth=284&size=91624&status=done&style=none&width=284)<br />k6 是以开发者为中心，自由开源的负载测试工具，使得性能测试更有效率的同时还让使用者感到极度舒适。其特性有：\n\n- 命令行工具和对开发者友好的开放接口\n- 支持 JavaScript ES2015/ES6 脚本\n- 对自动化友好，支持自定义检查和定义阀值\n\n\n\n<a name=\"uAJXl\"></a>\n## k6 不是什么\n\n<br />虽然 k6 是一个高性能负载测试工具，可以使用 JavaScript 编写测试脚本，但是为了实现这些特性，不得不在架构设计上做一些取舍：\n\n- 并不在浏览器里运行<br />由于跳过了浏览器，k6 对系统资源的消耗大幅度降低，让工具自身显著高效。尽管如此，仍然可以使用 k6 来做网站的负载测试，甚至可以从录制好的用户会话中创建出测试。\n- 并不在 NodeJs 环境里运行<br />JavaScript 在整体上并不适合高性能场景。为达到最高的性能，这个工具采用 Go 语言编写，嵌入了 JavaScript 运行时从而让测试脚本的编写变得容易。如果你要加载 npm 模块或者使用 NodeJs API 的库，你可以使用 webpack 打包 npm 模块然后在测试中加载它们。\n\n\n\n<a name=\"QyQOs\"></a>\n## k6 的负载测试宣言\n\n\n- 简单的测试胜过没有测试\n- 负载测试应该面向目标\n- 负载测试应该由开发者执行（有启发！颠覆三观吗？）\n- 对开发者的体验特别重要\n- 只在预生产环境做负载测试\n\n\n\n<a name=\"GtAtH\"></a>\n## k6 的安装\n\n<br />详见官方文档，如果是 mac，推荐如下方式：\n```shell\nbrew install k6\n```\n\n\n<a name=\"ItO8z\"></a>\n## 快速测试一个 API 的吞吐量能力\n\n<br />首先，确保是非生产环境。其次，找一个终端节点，这里拿一个只返回 OK 的健康检查接口为例。<br />\n<br />然后，写一个 JavaScript 脚本，命名为 k6.js，如下所示：\n```javascript\nimport http from 'k6/http';\nimport { sleep } from 'k6';\n \nexport let options = {\n    stages: [\n        { duration: '2m', target: 100 }, // 低于正常的负载场景\n        { duration: '5m', target: 100 },\n        { duration: '2m', target: 200 }, // 正常负载场景\n        { duration: '5m', target: 200 },\n        { duration: '2m', target: 300 }, // 临界点附近\n        { duration: '5m', target: 300 },\n        { duration: '2m', target: 400 }, // 超出临界点\n        { duration: '5m', target: 400 },\n        { duration: '10m', target: 0 }, // 缩小规模，恢复阶段\n    ],\n};\n \nexport default function () {\n    const BASE_URL = 'http://localhost:3000'; // 确保不要用生产环境 URL\n \n    let responses = http.batch([\n        [\n            'GET',\n            `${BASE_URL}/v2/health`,\n            null,\n            { tags: { name: 'Health Check' } },\n        ],\n    ]);\n \n    sleep(1);\n}\n```\n然后从命令行运行 k6：\n```shell\nk6 run k6.js\n```\n比如会得到这样的结果：\n```shell\nrunning (38m00.7s), 000/400 VUs, 514826 complete and 0 interrupted iterations\ndefault ✓ [======================================] 000/400 VUs  38m0s\n \n    data_received..............: 256 MB 112 kB/s\n    data_sent..................: 44 MB  19 kB/s\n    http_req_blocked...........: avg=9.88µs  min=0s med=3µs    max=2.29s    p(90)=5µs    p(95)=7µs\n    http_req_connecting........: avg=261ns   min=0s med=0s     max=1.09ms   p(90)=0s     p(95)=0s\n    http_req_duration..........: avg=2.12ms  min=0s med=1.18ms max=267.25ms p(90)=4.31ms p(95)=5.85ms\n    http_req_receiving.........: avg=28.12µs min=0s med=29µs   max=2.66ms   p(90)=46µs   p(95)=55µs\n    http_req_sending...........: avg=12µs    min=0s med=12µs   max=2.57ms   p(90)=20µs   p(95)=25µs\n    http_req_tls_handshaking...: avg=0s      min=0s med=0s     max=0s       p(90)=0s     p(95)=0s\n    http_req_waiting...........: avg=2.08ms  min=0s med=1.12ms max=267.2ms  p(90)=4.25ms p(95)=5.8ms\n    http_reqs..................: 514826 225.72893/s\n    iteration_duration.........: avg=1s      min=1s med=1s     max=3.3s     p(90)=1s     p(95)=1s\n    iterations.................: 514826 225.72893/s\n    vus........................: 1      min=1   max=400\n    vus_max....................: 400    min=400 max=400\n```\n从上面的报告中可以得到一个大概的结论：TPS 约等于 226，即每秒钟可以处理大约 226 个请求。<br />\n\n<a name=\"VHxuU\"></a>\n## 总结\n\n<br />本文介绍了一种区别于 Visual Studio Team System 以及 JMeter 这种基于图形界面的负载测试工具，并详细展示了一个最基本的使用步骤。可见真的是非常简单，对开发者友好，特别适合自动化。另外，特别喜欢 k6 的负载测试宣言，首先喜欢它的对开发者友好特性，其次被它的负载测试应该由开发者执行这一条震撼到了。希望对你有启发，欢迎留言分享你是怎么做负载测试的。\n"
  },
  {
    "id": 31702501,
    "title": "使用 Mocha 和 Chai 测试驱动开发 AWS Lambda API",
    "description": "缘起前几天学习了 AWS Lambda，非常棒。首先，未来的开发者都会是云原生的，就是说，他们所有的开发工作都会在云上进行，而 AWS Lambda 是云计算中的翘楚；其次，对于开发者和开源作者来说，由于不以盈利为目的，因此免费的基础设施和产品对他们的可持续输出非常重要，而 AWS Lambd...",
    "custom_description": null,
    "updated_at": "2021-02-21T08:58:59.000Z",
    "created_at": "2021-02-21T08:58:59.000Z",
    "slug": "gghbmx",
    "word_count": 2568,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1613891220686-90971052-8b10-4927-b4d1-172a5f4b6f00.png?x-oss-process=image%2Fresize%2Cw_1500",
    "body": "<a name=\"2YOxW\"></a>\n## 缘起\n\n<br />前几天学习了 AWS Lambda，非常棒。首先，未来的开发者都会是云原生的，就是说，他们所有的开发工作都会在云上进行，而 AWS Lambda 是云计算中的翘楚；其次，对于开发者和开源作者来说，由于不以盈利为目的，因此免费的基础设施和产品对他们的可持续输出非常重要，而 AWS Lambda 的免费额度远远超出大多数开发者的起步需求。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613891220686-90971052-8b10-4927-b4d1-172a5f4b6f00.png#align=left&display=inline&height=706&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1412&originWidth=2050&size=201141&status=done&style=none&width=1025)<br />以上是我学完了 AWS 基础课后的证书，这个课程的主讲人是一名解决方案架构师，讲得相当好，让你对 AWS Lambda 会有一个基本和全面的认识。<br />\n<br />但是，对实际的开发工作可能没有太大帮助。你根据课程和 AWS Lambda 控制台的指引，可以很快搭建一个 Hello World 出来，但这只能算是 Playground，如果要真正进行工程实践，还需要本文这样的指南。AWS Lambda 支持的语言非常多，本文将对使用 NodeJs 进行 AWS Lambda 工程实战给出一个详尽的指导。除了 NodeJs，你可能还想有 C# 的 AWS Lambda 工程实战指南，Go 的 AWS Lambda 工程指南等等，如果哪天我学会了它们，再来分享。<br />\n<br />一个现代化的实战工程，应该是方便测试的、可以持续自动化部署的。测试驱动开发是一个不错的开发实践，本文分享如何将它应用在 AWS Lambda 开发上。<br />\n<br />首先，你需要学习一下 AWS Lambda 课程，链接在这里：[https://www.aws.training/Details/eLearning?id=59558](https://www.aws.training/Details/eLearning?id=59558)<br />\n\n<a name=\"NjcYy\"></a>\n## 工具链\n\n<br />开发语言采用 TypeScript，测试框架采用 Mocha，断言库采用 Chai。jest 非常优秀，但是运行速度比 Mocha 慢太多，因此这里没有采用。但是 jest 的使用者众多，必须得提一下，而且从 Mocha 切换到 jest 并不需要做太多修改。<br />\n<br />Mocha 是一个在 NodeJs 上运行的 JavaScript 测试框架。Mocha 支持异步运行测试、测试覆盖报告，并且允许使用任何断言库。Chai 是一个 NodeJs 的 TDD/BDD 断言库，能够和任何 JavaScript 测试框架配合工作。<br />\n<br />Mocha 使用钩子来组织其测试结构，具体地说有这些钩子：\n\n- describe(): 用来将测试分成一个一个的测试组并描述当前测试分组\n- it(): 用来描述测试用例\n- before(): 在第一个 it() 或者 describe() 之前运行\n- beforeEach(): 在每一个 it() 或者 describe() 之前运行\n- after(): 在所有 it() 或者 describe() 之后运行\n- afterEach(): 在每一个 it() 或者 describe() 之后运行\n\n\n\n<a name=\"FmeXI\"></a>\n## 测试驱动开发简介\n\n<br />简称 TDD，它有很多好处，比如由于测试先行，所有让我们专注在需求上，并且保证只会发布能够恰好通过所有测试的代码。<br />\n<br />TDD 的流程总体来说是一系列重复性的简单活动。首先，写一个注定失败的测试，因为这时还没有实现代码；然后，写能够通过测试的实现代码；一旦测试通过，就重构代码让它更简洁更易扩展。注意测试代码也是代码，所以测试代码本身也包括在重构的范围内。这个重复性的简单活动看起来是这样的： <br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613892537389-795c9813-61de-4ed7-8f94-e9b0a8cfbf93.png#align=left&display=inline&height=467&margin=%5Bobject%20Object%5D&name=image.png&originHeight=934&originWidth=1432&size=130428&status=done&style=none&width=716)<br />\n\n<a name=\"o30UI\"></a>\n## 示例需求\n\n<br />构建一个无服务器的 Lambda API，它接受一个电话号码作为输入，并且返回这个电话号码的国别 —— 中国大陆、美国、或者不是一个电话号码。<br />\n\n<a name=\"ZL8Ku\"></a>\n## 安装开发依赖\n\n<br />进入你的项目目录并且执行：\n```shell\nnpm install typescript -g\nnpm install chai mocha ts-node @types/chai @types/mocha --save-dev\n```\n\n\n<a name=\"ej9vu\"></a>\n## 写第一个测试\n\n<br />让我们以熟悉的 Hello World 开始。创建一个新文件，命名为 \"HelloWorldService.spec.ts\"（这个 \"sepc.ts\" 的后缀表明这是一个测试文件）。在这个 \"HelloWorldService.spec.ts\"  的顶部，加载 mocha 和 chai，然后就开始使用 Mocha 的钩子函数（describe 和 it）来定义一个简单的测试，这个测试期待 HelloWorldService 返回一个 “HelloWorld”字符串。<br />\n\n```typescript\nimport {expect} from 'chai'\nimport 'mocha'\nimport {HelloWorldService} from './HelloWorldService'\n\ndescribe('Hello World string function', () => {\n  it('should return Hello World', () => {\n    const result = HelloWorldService()\n    const expectedResult = 'Hello World'\n    expect(result).to.equal(expectedResult)\n  })\n})\n```\n\n<br />测试写好了，我们来运行它。为了方便起见，我们在 package.json 中创建一个 NPM 脚本，这个脚本调用 mocha，并将测试文件所在的目录作为参数传给它。由于我们的代码是使用 TypeScript 写的，所以还需要将 ts-node 注册进入 mocha 才行。一旦这个脚本创建好，我们就可以从命令行终端运行测试了（注意 .spec.ts 后缀，这是我们表明测试文件的约定）：\n```json\n...\n\"scripts\": {\n  ...\n  \"test\": \"mocha -r ts-node/register src/**/*.spec.ts\"\n  ...\n}\n...\n```\n尝试执行测试会报错，因为 HelloWorldService.ts 还不存在，让我做个快速修复，创建这个文件，并且写一行代码实现 HelloWorldService：\n```typescript\nexport const HelloWorldService = () => ''\n```\n再次在命令行输入 `npm test` 运行测试，得到：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613893743041-8d0eac9c-8cca-481a-a49c-dc399b1714b7.png#align=left&display=inline&height=318&margin=%5Bobject%20Object%5D&name=image.png&originHeight=636&originWidth=1492&size=73737&status=done&style=none&width=746)<br />测试能够运行，但是结果告诉我们 HelloWorldService 没有返回期待的结果，让我们修复它，改写 HelloWorldService.ts 文件：<br />\n\n```diff\n- export const HelloWorldService = () => ''\n+ export const HelloWorldService = () => 'Hello World'\n```\n再次运行测试，得到： \n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613893989945-5e5300b7-3f06-43b8-95db-6c8ee123d44a.png#align=left&display=inline&height=100&margin=%5Bobject%20Object%5D&name=image.png&originHeight=200&originWidth=1162&size=16023&status=done&style=none&width=581)<br />测试通过，由于代码很简单，还不需要重构，所以第一个 TDD 周期就完成了！<br />\n\n<a name=\"N7GNQ\"></a>\n## 测试电话号码服务算法\n\n<br />到目前位置，一个支持 TDD 和 TypeScript 的项目就搭建起来了，我们开始构建电话号码服务。为了简单起见，这个服务只用来判断一个电话号码是否是中国大陆电话号码。先写一个测试：\n```typescript\ndescribe('PhoneNumberService.determinePhoneNumberType_CN_MOBILE', () => {\n  it('should return CN_MOBILE', () => {\n    const expectedResult = PhoneNumberType.CN_MOBILE;\n    \n    const phoneNumbers = [\"+8617712345678\", \"17712345678\"]\n    \n    phoneNumbers.forEach(phoneNumber => {\n    \tconst result = PhoneNumberService.determinPhoneNumberType(phoneNumber)\n      \n      expect(result).to.equal(expectedResult)\n    })\n  })\n})\n```\n运行测试，失败。让我们来写第一个实现，能够通过这个测试用例：\n```typescript\nimport {PhoneNumberType} from './enums/PhoneNumberType'\nconst CN_Mobile_Phone_Number_Regex = /^(\\+86)1\\d{10}$/\n\nexport class PhoneNumberService {\n  public static determinerPhoneNumberType(phoneNumber: string): PhoneNumberType {\n    return this.isCNMobile(phoneNumber) ? PhoneNumberType.CN_MOBILE : PhoneNumberType.INVALID\n  }\n  \n  public static isCNMobile(phoneNumber: string): boolean {\n    return CN_Mobile_Phone_Number_Regex.test(phoneNumber)\n  }\n}\n```\n重新运行测试，通过！下一步是添加一个让测试失败的测试用例，然后改进代码让它通过。直到所有的测试用例都通过为止。这里略过不再赘述。<br />\n\n<a name=\"peYSf\"></a>\n## 添加 AWS Lambda 事件处理器\n\n<br />首先添加 aws-lambda 依赖，这是 AWS Lambda 为 NodeJs 开发的 SDK。\n```shell\nnpm install aws-lambda --save\n```\n然后新建一个文件，代码如下：\n```typescript\nimport {Context, APIGatewayProxyEvent} from 'aws-lambda'\nimport {PhoneNumberService} from '../services/PhoneNumberService';\n\nmodule.exports.handler = async (apiGatewayEvent: APIGatewayEvent, _context: Context) : Promise<any> => {\n  if (!requestBody) {\n    return new HttpResponse(HttpStatusCode.BAD_REQUEST);\n  }\n  \n  const res = PhoneNumberService.determinePhoneNumberType(requestBody.phoneNumber)\n  \n  return new HttpResponse(HttpStatusCode.OK, res)\n}\n```\n<a name=\"5GXRO\"></a>\n## 配置 AWS Lambda 并本地运行验证\n安装 AWS Lambda 提供的命令行工具 serverless：\n```shell\nnpm i -g serverless\n```\n配置：\n```shell\nserverless config credentials --provider aws --key YOUR_ACCESS_KEY --secret YOUR_SECRET_ACCESS_KEY\n```\n再在项目中创建一个 serverless.yml 文件：\n```yaml\nservice: phone-number-api\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\nfunctions:\n  phonenumber:\n    handler: index.handler\n    name: serverless-phone-number\n```\n在 package.json 文件里添加一个脚本命令：\n```json\n{\n  ...\n  \"scripts\": {\n    ...\n    \"local\": \"tsc && serverless invoke local --function phonenumber --data '+8617712345678'\"\n    ...\n  }\n  ...\n}\n```\n执行 `npm run local` 验证。<br />\n\n<a name=\"evbWU\"></a>\n## 配置部署脚本\n在 package.json 中增加一个部署脚本：\n```json\n{\n  ...\n  \"scripts\": {\n    ...\n    \"deploy\": \"tsc && serverless deploy\"\n    ...\n  }\n  ...\n}\n```\n要将我们写好的 AWS Lambda 部署上线，只需要运行 `npm run deploy` 。Serverless 会帮我们处理所有事情，包括创建 CloudFormation Stack，上传构建制品到 S3，以及创建我们的 Lambda。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613896314613-1c39bb7e-1c34-431f-b31e-11075329afd0.png#align=left&display=inline&height=218&margin=%5Bobject%20Object%5D&name=image.png&originHeight=436&originWidth=1846&size=71142&status=done&style=none&width=923)<br />要持续开发 Lambda，只需要更改代码，确保测试通过。然后运行相同的 `npm run deploy` 脚本就能够将更新的改动部署上线。<br />\n\n<a name=\"JMVYh\"></a>\n## 验证部署后的服务\n\n<br />你可以用 Postman 发起一个 POST 请求到我们运行 ` npm run deploy` 后得到的分配好的终端节点：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613896559115-849bf2c4-2ace-4b08-8f54-05221565809a.png#align=left&display=inline&height=226&margin=%5Bobject%20Object%5D&name=image.png&originHeight=452&originWidth=1600&size=248355&status=done&style=none&width=800)<br />也可以配置一个命令行脚本到 package.json 文件中：\n```json\n{\n  ...\n  \"scripts\": {\n    ...\n    \"remote\": \"serverless invoke --function phonenumber --data '+8617712345678'\"\n    ...\n  }\n  ...\n}\n```\n之后使用 `npm run remote` 即可。<br />\n\n<a name=\"JIf6N\"></a>\n## 总结\n\n<br />本文快速回顾了 TDD 的步骤，并给了一个将其应用于 AWS Lambda 开发的快速示例。欢迎参考该示例创建 AWS Lambda 的 TypeScript TDD 的开发项目模版。<br />\n\n<a name=\"sbUwi\"></a>\n## 彩蛋\n\n<br />AWS Lambda 在中国最大的竞争对手，应该是阿里云的函数计算。参考本文，做一些适当的修改，就可以写一个阿里云函数计算的 TypeScript TDD 开发项目模版，其实作者已经写了一个，欢迎自由取用：[https://github.com/Jeff-Tian/ali-fc-typescript-skeleton](https://github.com/Jeff-Tian/ali-fc-typescript-skeleton)。<br />\n<br />作者使用这个开发模版写了一个上传文件转码服务，用来将用户上传的 office 文档，转码成图片格式，并且添加水印，然后再在前端展示，既可以展示自己的原创内容，又能一定程度上防止抄袭。由于阿里云函数计算的免费额度也很大，所以运行至今一年多下来，给公司节省了很多钱。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613897448584-49cd00e8-e0b8-42a5-9e66-908c49ad6670.png#align=left&display=inline&height=380&margin=%5Bobject%20Object%5D&name=image.png&originHeight=760&originWidth=1428&size=115035&status=done&style=none&width=714)<br />\n<br />因此鼓励你更多地使用函数计算，这是趋势。\n"
  },
  {
    "id": 31699815,
    "title": "我是谁？",
    "description": "自我认知和定位我是一名全栈开发者。尽管我目前的官方职位是资深后端开发工程师，但是我有前端工程实战经验，以前也做过测试工程师，拥有多元视角，对系统有整体的认识。尽管我最近 6 年专注在 NodeJs 技术栈，但是对其他多种语言都有涉猎。最近我做了什么除了线上事故排除，日常需求开发，我还主动发现问...",
    "custom_description": null,
    "updated_at": "2021-02-22T11:36:36.000Z",
    "created_at": "2021-02-21T06:25:44.000Z",
    "slug": "iysdhg",
    "word_count": 1118,
    "cover": null,
    "body": "<a name=\"sMGM5\"></a>\n## 自我认知和定位\n\n<br />我是一名全栈开发者。尽管我目前的官方职位是资深后端开发工程师，但是我有前端工程实战经验，以前也做过测试工程师，拥有多元视角，对系统有整体的认识。尽管我最近 6 年专注在 NodeJs 技术栈，但是对其他多种语言都有涉猎。<br />\n\n<a name=\"eULqy\"></a>\n## 最近我做了什么\n\n<br />除了线上事故排除，日常需求开发，我还主动发现问题并积极组织和推进：\n\n- E2E 自动化测试\n- CI/CD\n- 发现并发布公共库\n- 改进代码质量\n- 提高测试覆盖率\n\n\n<br />比如，我发现购物车存在 3 大问题，就通过公司内部文档清晰地列出存在的问题，并给出了改进的方案，不仅设计了后端接口，还找到了前端在开发过程中会碰到的问题以及相应的解决方案（比如如何信任开发环境的自签证书等）。在验证可行后，分别找到 Dev Lead、架构师线下沟通，达成一致后，邀请前端和测试同事一起开会详细讨论，并推进开发过程。<br />\n<br />又比如，我发现后端的文档化工具链的局限，就设法改进（增加对更多种数据类型的支持，优化文档返回速度等），并且通过远程视频会议分享给 Global 同事。<br />\n<br />又比如，针对日常开发的痛点，我组织前后端、测试同事以及 DevOps 同事，推进 CI/CD 流水线的优化。使用原始社会、石器时代、青铜时代的比喻，让非开发同事感受到 DevOps 流程优化的迫切。<br />\n<br />除了本职工作，我还对多个优秀的开源框架做过代码贡献，比如 eggjs、urllib、flot、Skulpt、算法可视化等等。<br />\n\n<a name=\"dNnXW\"></a>\n## 最有挑战性的项目是哪个\n\n<br />[https://zizhujy.js.org/zh-CN/FunctionGrapher.html](https://zizhujy.js.org/zh-CN/FunctionGrapher.html)<br />\n\n- JAM Stack\n- LaTex 表达式解析器\n- 隐函数（采用象限四分法）\n- 区间数学应用\n\n\n\n<a name=\"XzZpl\"></a>\n## 简历\n\n<br />2007 年毕业于苏州大学统计学专业，毕业后在一家 500 强外企做销售数据分析，接触到 VBA 编程不可自拔，后转行做开发，使用过多种语言如 C#、Java、Python、Go 等等，其中最多的还是在英孚教育青少儿实验室使用 ASP.NET 开发内部的 CRM 系统。从英孚教育离职后，专注于 NodeJs 开发至今。从 2007 年参加工作至 2021 年的 14 年间，按照专注点分类的话，经历大致是：VBA 4 年、C# 4 年，NodeJs 至今 6 年。<br />\n<br />概括的说，非程序员生涯是前 4 年，程序员生涯是后 10 年。管理上做过开发组长，团队中除了自己，另外有 2 名前端和 2 名后端，也就是说没有带过大团队，垂直领导力并不优秀，但是横向领导力还是有一点的，总是在推进跨部门间的协作。最成功的一个例子是以程序员的身份，影响了产品经理提需求的姿势。<br />\n<br />在工作之余，还拿到了复旦大学的软件工程硕士学位。<br />\n\n<a name=\"XiySC\"></a>\n## 我的价值\n\n<br />如果公司的技术团队失去了我，那么会损失以下几点：<br />\n\n- 少了一位有多元视角、熟悉全栈开发的程序员。可以预见到后面团队在开发新功能时缺少一个整体把控者，在普遍前后端分离开发的现状下，系统整合上会磕磕绊绊，项目风险增加。\n- 接上面一点，可以预见的是线上问题的排查和跟踪将更耗时，前后端分别甩锅，难以定位。\n- 少了一位崇尚测试驱动开发的程序员，测试覆盖度降低，代码质量下降。\n- 失去了一位对自动化和工具链有热情有经验的程序员，开发团队可能会停留在原始社会更长时间。\n- 开源影响力降低。\n"
  },
  {
    "id": 31632304,
    "title": "加密 Kubernetes 集群中的敏感信息",
    "description": "使用 Mozilla SOPS 来加密 Kubernetes 集群中的敏感信息Kubernetes 已经成为运行容器工作负载的事实标准，在很多大型企业的数字开放平台也处于中心地位。然而，和 Kubernetes 相关的工作非常有挑战性，这其中之一就是如何处理工作负载正常运行所需要的一些敏感信息...",
    "custom_description": null,
    "updated_at": "2021-02-19T12:08:40.000Z",
    "created_at": "2021-02-19T12:08:40.000Z",
    "slug": "zb1gdu",
    "word_count": 2017,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1613733491296-d518ca74-d468-4b35-a204-6c109063fafc.png",
    "body": "> 使用 Mozilla SOPS 来加密 Kubernetes 集群中的敏感信息\n\nKubernetes 已经成为运行容器工作负载的事实标准，在很多大型企业的数字开放平台也处于中心地位。然而，和 Kubernetes 相关的工作非常有挑战性，这其中之一就是如何处理工作负载正常运行所需要的一些敏感信息。这些敏感信息包括但不限于密码，API 密钥，令牌等等。<br />\n<br />任何不小心的敏感信息泄漏将对这种大型企业的声誉以及收入带来严重威胁，所以必须使用一种安全的方式来存储这些数据。关于这个问题有许多不同的解决方案，本文将分享如何使用 Mozilla SOPS 来存储敏感数据的方案，这个方案不需要太多的修改和适配。<br />\n\n\n---\n\n\n\n<a name=\"NDISA\"></a>\n## Kubernetes 中的敏感信息长什么样？\n\n\n对于 Kubernetes 的新手，可以快速看一下如下截图，了解敏感信息在 Kubernetes 中是怎样定义的：\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613733491296-d518ca74-d468-4b35-a204-6c109063fafc.png#align=left&display=inline&height=346&margin=%5Bobject%20Object%5D&name=image.png&originHeight=346&originWidth=424&size=34590&status=done&style=none&width=424)\n一个典型的 Kubernetes 集群中的敏感数据\n\n\n如上图所示，这是 Kubernetes 中敏感信息的默认类型，所有信息都以键值对的形式保存在一个 YAML 文件中， data 区域的值必须使用 base64 编码。这个文件一旦创建出来，你就可以使用以下命令将敏感数据部署到你的命名空间中：\n\n\n```shell\nkubectl apply -f mysecret.yml\n```\n\n\n现在我们知道敏感数据长什么样了，如果我们希望保持它们的安全，就需要回答两个问题：\n\n\n- 我要将这个 YAML 文件放置在哪里？以什么方式保存？\n- 当敏感信息被部署到命名空间中后，如何放置泄漏？\n\n\n\n\n---\n\n\n\n<a name=\"n0HHG\"></a>\n## 使用 Mozilla SOPS 存储敏感信息\n\n<br />Mozilla SOPS 是一个加密文件编辑器，支持 YAML、JSON、ENV、INI 以及二进制文件，也支持各种不同的加密提供商诸如 AWS KMS、GCP KMS、Azure Key Vault、Hashicorp Vault 以及 PGP。保存敏感数据可以有很多选项，但是对于 Kubernetes 来说，SOPS 尤其适合，主要有以下这些原因：<br />\n\n- **易于使用**：你只需要解密、编辑、然后加密即可，不需要学习新的工具，也不需要使用 Restful API 和第三方服务打交道而导致的学习曲线陡峭。\n- **可以将代码和敏感数据放在一起**：将敏感信息加密可以让你将它们随代码一起提交到版本管理系统（如 git）中，相比其他方案，这将大大简化持续集成/持续部署流程。\n- **跟踪变化特别简单**：和上一个优点相关：将敏感信息提交到版本管理系统中，跟踪变化就非常简单了。而且还可以看出是谁做了什么改变。\n- **不需要额外的基础设施支持**：其他方案比如 Hashicorp 就需要额外的工具链，甚至需要为其部署额外的存储设施（Consul、DynamoDB 等等）。这些额外的工具增加了架构中的复杂性，但是并没有为你的产品带来额外的价值。\n- **没有扩展问题**：再一次和前一个优点相关，由于不需要额外的基础设施，也就不需要为其做额外的运维和扩展工作，对某些大项目来说这些工作可能是很大的一个问题。\n\n\n<br />接下来让我们看一下如何使用它来加密敏感数据。<br />\n\n\n---\n\n\n\n<a name=\"EQtME\"></a>\n## 使用 SOPS 来加解密\n\n\nSOPS 的官方文档中已经有一个使用 PGP 密钥的基本用法，但是其强大之处在于 **.sops.yaml **文件，所有的魔法都在这个文件里。来看一下它长什么样：\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613734900519-93c3726d-76bd-4a92-bd49-3303c1443ac7.png#align=left&display=inline&height=426&margin=%5Bobject%20Object%5D&name=image.png&originHeight=426&originWidth=1400&size=149005&status=done&style=none&width=1400)\n.sops.yaml 的样例文件\n\n\n.sops.yaml 文件包含了对代码仓库中的文件进行加解密的所有规则。以上面的文件为例，对于加解密有两个不同的规则。这些规则的优先级是从上到下的，第一个出现的规则被优先应用。详细地说：\n\n\n- 第一个是说所有匹配正则表达式的文件将使用 AWS KMS 进行加解密。结合 SOPS 和 AWS KMS 的主要优势在于你可以给 SOPS 在不同的区域提供多个不同的密钥，从而避免了加解密过程中的单点故障。\n- 第二个是说文件将使用给定的 PGP 密钥进行加解密。对于不匹配前一个规则中的文件，这个规则将被应用。\n\n\n\n一旦你写好了你的 .sops.yaml 文件，就可以用如下命令进行加密：\n\n\n```shell\nsops -e <filename> -p <your_key_here>\n```\n\n\n这会产生类似如下的输出：\n\n\n**![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613735384145-a4ff0b0b-cd51-40b9-a5bb-4e6cf32b21db.png#align=left&display=inline&height=1435&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1435&originWidth=1400&size=575761&status=done&style=none&width=1400)**\n使用 SOPS 加密的结果示意图\n\n\n正如你所看到的，文件中所有相关数据都已经被加密。SOPS 并不会加密键，所以你不必关心具体的值，就能很容易看到什么值被修改了。\n\n\nSOPS 也支持密钥轮换，假设你的密钥泄漏了，那么你可以将它们从 .sops.yaml 文件中移除，然后重新加密，这很简单，只需要：\n\n\n```shell\nsops -r -i --rm-pgp <your_key_here> filename\n```\n\n\n如果需要更高级的用法和示例，可以参考 SOPS 的文档。\n\n\n好，现在敏感数据已经被安全地存储在版本管理系统中了，但还有一个问题待解决：如何保证敏感数据在集群中的安全？\n\n\n<a name=\"RUAbQ\"></a>\n## 在集群中加密敏感数据： RBAC\n\n\n敏感数据已经安全地保存在版本管理系统中了，是时候保证只让授权过的用户访问它们了。\n\n\n通常，在集群中我们使用命名空间隔离不同项目，并且默认授予在这些命名空间中的所有权限。这是一个很糟糕的实践，得不惜一切代价摒弃这种做法。幸运的是 Kubernetes 提供了一个非常强大的角色系统可供使用。\n\n\n先创建一个新的角色：\n\n\n```yaml\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: your_namespace\n  name: read-only-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\", \"configmaps\", \"services\", \"pods/log\"]\n  verbs: [\"get\", \"watch\", \"list\"]\n```\n这是一个很基本的角色，它允许所有人在你的命名空间 `your_namespace` 中执行如下几个操作：<br />\n\n- 查询/列出/观察 pod, configmap 和 services\n- 从 pod 中查询日志 \n\n\n<br />现在该绑定这个角色了，这需要一个 rolebinding，正如其名，它将角色绑定到一个主题上。主题可以是用户、组或者服务账号。可以使用如下示例将角色绑定到一个用户：<br />\n\n```yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: read-only\n  namespace: your_namespace\nsubjects:\n- kind: User\n  name: Jeff # Name is case sensitive, so be careful with that!\n  apiGroup: rbac.authorization.k8s.io\nroleRef:\n  kind: Role\n  name: read-only-role\n  apiGroup: rbac.authorization.k8s.io\n```\n一旦应用，就算凭据被泄漏（最好不要），恶意攻击者将只能做前面列出的仅有的几个操作，不会对基础设施造成威胁。<br />\n\n\n---\n\n\n\n<a name=\"8Wrwt\"></a>\n## 总结\n\n<br />SOPS 是加密的强大工具，但是必须记住仍然需要应用更多的和集群相关的策略（比如本文建议的一个）才能是你的秘密信息真的被保密。<br />\n<br />以上是某大型企业的生产实践，欢迎留言分享你在 Kubernetes 集群中处理敏感信息的策略。\n"
  },
  {
    "id": 31580874,
    "title": "做纯洁的人，写纯洁的代码",
    "description": "一个函数，如果不纯洁，那么它的行为将不可预料，即使当前没有发现什么异常，但是会埋下很大的隐患：有一天线上出问题了，你怎么也想不到，居然是某一个看上去不会干坏事的函数捣的鬼。不纯洁的危害，血淋淋的例子：曾经碰到一个线上的问题，在非生产环境没有出现过，在生产环境上也只是偶尔出现，经过长时间的排查，...",
    "custom_description": null,
    "updated_at": "2021-02-18T12:16:03.000Z",
    "created_at": "2021-02-18T12:16:03.000Z",
    "slug": "giuoee",
    "word_count": 2100,
    "cover": null,
    "body": "一个函数，如果不纯洁，那么它的行为将不可预料，即使当前没有发现什么异常，但是会埋下很大的隐患：有一天线上出问题了，你怎么也想不到，居然是某一个看上去不会干坏事的函数捣的鬼。<br />\n\n<a name=\"HTSxL\"></a>\n## 不纯洁的危害，血淋淋的例子：\n\n<br />曾经碰到一个线上的问题，在非生产环境没有出现过，在生产环境上也只是偶尔出现，经过长时间的排查，最后发现罪魁祸首正是一个看上去是一个很正常的函数做了一件不纯洁的事情，最后做得一个紧急修复如下：<br />\n```diff\n- const { data, response } = await this.httpClient.executeJsonRequest(url, options)\n\n+ const { data, response } = await this.httpClient.executeJsonRequest(url, { ...options })\n```\n\n<br />改动虽然很小，但是代码变得更丑了，但这没有办法，因为 `executeJsonRequest` 是一个公共库，它的名字看上去只是执行一个 http 请求，但是实际上它偷偷干了一点其他的事情，就是会改变传入的参数 `options` 下的某个属性，正好在后面某处有人把这个 `options` 传给了一个 logger，然而这个 logger 使用了 `JSON.stringify` 。<br />\n<br />多数情况下，这没有问题，但是看了这个公共库的源码才知道，这个原本发送请求的方法竟然将 `options` 参数改成了一个网络请求中的对象，本来这个 `options` 参数只是一个 Plain JavaScript Object，但是被改成了一个网络请求中的对象后就复杂了，在某些网络情况下，这个对象的层次会变得很深，而且某一层的属性引用了父级属性，如此导致出现了一个循环引用，这在运行时的内存中不会引发任何问题，但是当后面的日志模块将这个 `options` 进行序列化时就崩溃了！<br />\n<br />但是后面的日志模块哪里会想到这个 Plain JavaScript Object 会被别人修改呢？所以这就是**不纯洁的危害**。\n```typescript\nasync executeRequest(url: string, options: RequestOptions = {}): Promise<HttpResponse> {\n  const timer = new Date()\n  const requestMethod: string = options.method || \"GET\"\n  \n  // 罪魁祸首！为什么要修改外部传进来的参数？！\n  if (url.startsWith(\"https\")) {\n    options.agent = this.httpsAgent\n  } else {\n    options.agent = this.httpAgent\n  }\n  ...\n}\n\n```\n\n\n<a name=\"NxX7K\"></a>\n## 和纯函数相处，拥有纯粹的快乐\n\n\n> 给定相同的输入，总是返回相同的输出，并且不存在任何可以观测到的副作用的函数，就是纯函数。\n> 副作用指的是在函数计算出结果的同时，改变了系统状态或者改变了与外界的可观测到的交互行为。\n\n上面的血淋淋的例子，就是那个本该只发送网络请求的函数，改变了外部传入的参数中的某个属性。当然，发送网络请求的函数，涉及到网络 IO，无论如何做不到完全的纯粹，但是应该将不纯粹的部分减少到最小。无论如何，修改外部传入的参数是不允许的，关于发送网络请求的函数如何保证同样的输入总是得到同样的输出，可以使用 memoize 实现（后面有机会单独分享）。<br />\n<br />和纯函数相处，将拥有纯粹的快乐，这些快乐包括但是不限于：\n\n- 可缓存性好（参考 memoize）\n- 可移植性好/自文档（完全自包含，强制做到了依赖“注入”）\n- 可测试性好（只需要给定输入验证输出，连 mock 都用不着啦！）\n- 可推理性好（引用透明性）\n- 可并行性好（由于没有副作用，所以不会产生竞态条件）\n\n\n\n<a name=\"YCwuL\"></a>\n## 挑战：异常处理\n\n<br />看到这个么多纯粹的快乐，你很可能已经动手开始写纯函数式的代码了，这似乎不难，比如对于那个不纯洁的公共库，只要改成不要修改外部传入的参数就很接近了。但是我的代码总要进行异常处理吧，难以置信的是，`try/catch/throw` 这种代码竟然也是不纯洁的。<br />\n<br />因为当有错误被抛出时，这个函数与平时的表现不一样，没有返回值，取而代之的竟然是打断了程序的正常运行，抛出一些奇奇怪怪的东西出来。<br />\n<br />前面提到通过使用 memoize 可以将原本不纯洁的网络 IO 操作变成一个纯洁的函数，像知名的 _lodash 和 rambda 都有 memoize 供你伸手取用，那么对于异常处理的 `try/catch/throw` 这种代码是否也有相应的库呢？<br />\n<br />你一定没有想到这里会出现一个广告：弱弱地推荐一下我 8 个月前写的一个纯洁的异常处理小库，名曰： `@jeff-tian/failable` 。已经用在公司的生产环境快一年了，觉得有一点点价值，可以帮你做一些脏活累活，特出此文专门分享。<br />\n\n<a name=\"bxFAV\"></a>\n## @jeff-tian/failable\n\n<br />使用姿势（可以用在 TypeScript 和 JavaScript 项目中）：<br />\n\n1. 安装：\n```typescript\nnpm i --save @jeff-tian/failable\n```\n\n2. 使用示例\n\n太简单了，直接贴一下这个小库中的测试代码吧（不是有句话叫测试即文档吗？）。\n```typescript\ndescribe(\"wrap throwable functions\", () => {\n    const sut = (x: number) => {\n        if (x > 100) {\n            throw new Error(\"too big!\")\n        }\n\n        return x\n    }\n\n    it(\"ok\", () => {\n        assert(Failable.dontThrow(sut, 5).toString() === \"Ok(5)\")\n    })\n\n    it(\"err\", () => {\n        const res = Failable.dontThrow(sut, 101)\n        assert(res instanceof Err)\n        assert(res.value.message === \"too big!\")\n    })\n})\n```\n可见，对于一个可能抛异常的代码，只要将它用 @jeff-tian/failable 封装，它就一定会返回一个值，并且对同样的输入，一定得到同样的输出，完全可以预期，不会有任何意外。<br />对于异步代码仍然适用，举例如下：\n```typescript\ndescribe(\"Async\", () => {\n    const sut = async (x: number) => {\n        await sleepAtLeast(1)\n\n        if (x > 100) {\n            throw new Error(\"too big!\")\n        }\n\n        return x\n    }\n\n    it(\"ok\", async () => {\n        let res = await Failable.dontThrowAsync(sut, 5)\n        assert(res.value === 5)\n    })\n\n    it(\"err\", async () => {\n        const res = await Failable.dontThrowAsync(sut, 101)\n        assert(res instanceof Err)\n        assert(res.value.message === \"too big!\")\n\n        return \"err\"\n    })\n})\n```\n<a name=\"mWMbd\"></a>\n## 额外的好处\n通过使用 `@jeff-tian/failable` 可以是代码变得更加简洁和易读，拿一段实际代码举个例子：经常会有那种发送网络请求，确保拿到预期结果后，才做下一步逻辑；拿到结果不符合预期或者网络错误的情况下，执行另外一段逻辑。所以可能会看到这样的代码（我在实际项目中经常碰到这样的代码，当然，我总是使用 `@jeff-tian/failable` 把它重构掉）\n```typescript\ntry {\n\tconst response = await this.request(url, options)\n\t\n  if (!response) {\n  \t// 这里是错误处理逻辑\n\t} else {\n    // 进行后续处理逻辑\n  }\n} catch {\n\t// 这里又是一段错误处理逻辑（和 try 里的一段重复）\n}\n```\n使用 `@jeff-tian/failable` 重构后的代码大致长这样：\n```typescript\nconst response = await Failable.dontThrowAsync(this.request, url, options)\n\nif (!response.isOk() || !response.value) {\n  // 错误处理逻辑\n} else {\n  // 后续处理逻辑\n}\n```\n<a name=\"wiRzs\"></a>\n## 总结\n\n<br />本文给出了一个将异常处理纯洁化的 TypeScript 语言实现，欢迎留言给出其他语言对应的示例。\n"
  },
  {
    "id": 31528585,
    "title": "在股市上赚钱是可能的，即使是 A 股",
    "description": "从 2013 年开始，我开始尝试股权投资。因为听过太多关于 A 股的负面消息，所以还是很怕的。但决定下马过河，自己一定得试一试。于是特别小心，从几千块钱开始，累计到现在一共投入了 10 万左右，目前市值接近 30 万，自己来看还是很满意的，算是一个里程碑吧，记录一下并分享一点自己的心路历程。 ...",
    "custom_description": null,
    "updated_at": "2021-02-17T05:02:13.000Z",
    "created_at": "2021-02-17T05:02:13.000Z",
    "slug": "vkl18e",
    "word_count": 2127,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1613537684898-06999af0-3ca7-48ac-9f28-3d5236e40d42.png",
    "body": "从 2013 年开始，我开始尝试股权投资。因为听过太多关于 A 股的负面消息，所以还是很怕的。但决定下马过河，自己一定得试一试。于是特别小心，从几千块钱开始，累计到现在一共投入了 10 万左右，目前市值接近 30 万，自己来看还是很满意的，算是一个里程碑吧，记录一下并分享一点自己的心路历程。<br />\n\n\n| ![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613537684898-06999af0-3ca7-48ac-9f28-3d5236e40d42.png#align=left&display=inline&height=1707&margin=%5Bobject%20Object%5D&name=image.png&originHeight=3414&originWidth=1080&size=1316428&status=done&style=none&uid=1613537673074-0&width=540) | ![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613537705120-bc2e8cd4-2535-4c19-86db-cfa68f973301.png#align=left&display=inline&height=1919&margin=%5Bobject%20Object%5D&name=image.png&originHeight=3837&originWidth=1080&size=1412601&status=done&style=none&uid=1613537692885-0&width=540) | ![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613537720571-8c7d0ce0-8c8b-4113-8b96-a61f8f54fdcf.png#align=left&display=inline&height=1737&margin=%5Bobject%20Object%5D&name=image.png&originHeight=3473&originWidth=1080&size=1414237&status=done&style=none&uid=1613537701803-0&width=540) |\n| --- | --- | --- |\n| ![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613537738339-8447ce22-0e17-48f2-87d1-c0d74adf74bc.png#align=left&display=inline&height=1857&margin=%5Bobject%20Object%5D&name=image.png&originHeight=3714&originWidth=1080&size=1464504&status=done&style=none&uid=1613537712754-0&width=540) |  | ![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613537745627-bc1255f2-13b0-4238-a6d5-c4acd3a8e87e.png#align=left&display=inline&height=1122&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2244&originWidth=1080&size=919033&status=done&style=none&uid=1613537739470-0&width=540) |\n\n\n\n<a name=\"GVqQ7\"></a>\n## 一定要用闲钱投资\n\n<br />当时决定进入股市，战战兢兢，于是对自己说，一定要用闲钱投资，做好全部亏掉的心里准备，不要心疼。后来基本上都是这样做的（除了多年之后，买入茅台时，违反了这个原则，拼了全力凑了 8 万买进茅台），所以我一直不会，也没有精力去盯股价走势图，反正买了就放在那里，不太看它。<br />\n\n<a name=\"8SFZv\"></a>\n## 坚决不使用杠杆\n\n<br />经常被各种券商使用融资融券杠杆诱惑，但是坚决不开融资融券户，因为太难以把控，而且特别厌恶强行平仓的做法。<br />\n\n<a name=\"ZXjtw\"></a>\n## 不看技术指标\n\n<br />太复杂，而我又没有那么多时间去分析。<br />\n\n<a name=\"faOpL\"></a>\n## 不打听所谓“内幕消息”\n\n<br />相信自己的判断，哪怕要付出代价。从公开信息进行少量的学习，主要还是直觉判断（这点不太好，也曾经有所损失，但我觉得即使是有损失，只要是自己的判断，那也是可以原谅的，但是如果只是道听途说，造成的损失就不能原谅了，为什么要道听途说呀？）<br />\n<br />曾经有朋友给我推荐海航创新，号称有人知道一些“内幕消息”，我听信后买了点，后来就一直跌停跌停知道打上了 ST。这是我违反了这个原则造成的损失，虽然买得少，所以金额上损失不大（得益于闲钱投资的原则），但是教训是很刻骨铭心的。<br />\n<br />其他的判断，我可能比较特别，第一个大赚的竟然是乐视，记得 2013 年底，我看到很多乐视的产品，并且自己买了感觉非常不错。比如乐视超级电视，还有就是乐视超级手机，之所以觉得不错，是因为在之前我用的是 Windows Phone，难用的令人发指，而用了乐视手机，被好用得感动，而且价格还便宜，果断买了它的一手股票。后来 2 千多块的成本很快飙升到 2 万多，再后来，听罗振宇的《时间的朋友》演讲，他说乐视的故事，你们敢听，我都不敢讲了。我感到有巨大的不确定性，就卖掉了乐视的股票，后来不久乐视竟然到了退市的地步，还好避开了。<br />\n<br />第二个赚钱的股票，也是通过体验它们的产品来的，就是 TCL。几年前我买了 TCL 洗衣机、冰箱都便宜好用，后来买空调的时候，两个房间，一个买了 TCL 空调，一个买了日立，本来想着，日本的品质口碑一向都很好，但是对比下来，尽管日立的更贵，但是噪音更大（讽刺的是日立牌的卖点之一是静音），效果更差（可能是买到次品了，用了没多久就基本没有制热效果了），但是 TCL 空调真的是没有声音，知冷知热的效果都特别好，遥控器使用的感觉也是更先进。当时就买进了 TCL 科技的股票，成本是 3 块钱，后来涨的很猛，到现在还在涨，已经到 9 块钱了。<br />\n<br />第三个赚钱的股票，是科大讯飞，这个很有意思，我是在 2015 年开始，在开发过程中，需要对接科大讯飞的 API，主要是做语音识别（我们做的是一个青少儿英语在线课程产品），其实在技术选型确定科大讯飞之前分别试用过 Bing 的、谷歌的、声网的以及一些国外的厂商，发现有意思的是，科大讯飞的识别精准度最高（注意是英语），果断买入，直到最近，听说它还在涨。（声网的也不错，但是似乎没有在 A 股上市）<br />\n<br />第四个就是茅台，800 块买入。这是我唯一一次为买入股票而筹措资金的，违反了使用闲钱的原则。但是没有办法，它太贵了，是在没有那么多闲钱。这个倒不是自己体验他们的产品觉得不错（我不喝酒，尤其对白酒没有好感，但是最近团建时我唱了一口，觉得居然很好喝），而是在一本财经杂志上看到了一篇对茅台的详细数据分析，亮点在于说茅台由于制酒流程导致，其产能的投入，至少需要 5 年之后才能在市场上体现出来。而那片文章透露，茅台的产能投入在那一年翻番了，于是尽管价格已经很贵，但我还是买入了 1 手，期待 5 年后，股价能够到 1600 左右。但是到今天正好 5 年过去了，价格已经到了 2600，而且中金公司还调高了目标价在 3000 左右，这太疯狂了，可能有泡沫，或者有我不知道的数据支撑，但是用巴菲特的话说，我已经拥有足够的安全边际了。<br />\n\n<a name=\"DTCS1\"></a>\n## 不以涨喜，不以跌悲\n\n<br />2015 年底到 2016 年，是一个疯狂的阶段，当时大家都叫嚣着 A 股要冲向 6000 点，随后很快跌倒 2000 多点，我也承受了一些账面损失，浮亏 2 万多，但是投入也就在 8 万左右，总之，从有盈利，到开始浮亏，而且越来越亏的状态持续了快一年，但是那一年我并没有很不安，这得益于闲钱投资的原则。反而，我把这段使其看作是播种的机会，看好的股票，持续加仓（每当工资到手，就往里买一点）。这也是最近几年，收益率特别高的原因，因为在足够的低价区补了仓。唯一遗憾的就是茅台跌倒 500 多时没有加仓，因为工资微薄，拿不出 5 万的闲钱…… 但是当时别人嘲笑我的茅台大亏时，我特别镇定，因为有数据支撑，我坚信 5 年内茅台股价要翻倍的（其产能已翻倍，只是要 5 年的时间凸显）。我甚至希望那些嘲笑我的同事们，可以借我点钱，我去加仓，但是当然没人借我钱。好笑的是最近，茅台股价已经到 2000 多了，有前同事想要入场了……<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613538082925-a5d27dde-ef74-4a51-a7b1-a7c3c1fcae33.png#align=left&display=inline&height=1122&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2244&originWidth=1080&size=1042576&status=done&style=none&width=540)<br />\n\n<a name=\"U1qUt\"></a>\n## 做时间的朋友\n\n<br />罗振宇的口号：做时间的朋友，我很喜欢。最近几年的收益率是大幅度跑赢各种指数，如果能这样一直持续，那就超越巴菲特了。我知道，这是不太可能的，除非再来一个股灾，趁低价大幅买进一些好股票。当然，这都是可遇不可求的，过十年，我再来回顾一下吧。希望有好的结果，但是做好了血本无归的准备，所以，闲钱投资的原则还要坚守。\n"
  },
  {
    "id": 31496945,
    "title": "程序员影响产品经理的利器",
    "description": "前面聊过，作为程序员，如果不尽早晋升，在 35 岁后很可能就失业或者被迫转行做外卖员了。也聊到过，如果要晋升，被考察的其中一项就是影响力。一流的程序员，可以影响整个世界，比如计算机领域的各种之父们。我们不是一流的程序员，影响不了世界，先从身边人开始影响吧。经常看到新闻说产品经理和程序员因为需求...",
    "custom_description": null,
    "updated_at": "2021-02-15T08:52:07.000Z",
    "created_at": "2021-02-15T08:52:07.000Z",
    "slug": "tk12p8",
    "word_count": 1556,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1613378880538-2ad7fbff-6287-4987-9b3e-b1977106bb2e.png",
    "body": "前面聊过，作为程序员，如果不尽早晋升，在 35 岁后很可能就失业或者被迫转行做外卖员了。也聊到过，如果要晋升，被考察的其中一项就是影响力。<br />\n<br />一流的程序员，可以影响整个世界，比如计算机领域的各种之父们。<br />\n<br />我们不是一流的程序员，影响不了世界，先从身边人开始影响吧。经常看到新闻说产品经理和程序员因为需求问题打起来了，这真的是不堪入目。原因无非是产品经理觉得程序员不按自己的需求去写代码，而程序员却觉得产品经理不按照自己的要求去写需求，总之，产品经理影响不了程序员，程序员也影响不了产品经理，于是打起来了，最终免不了双方都被公司所开除。<br />\n<br />**所谓影响力，是用一种别人所乐于**[**接受**](https://baike.baidu.com/item/%E6%8E%A5%E5%8F%97/29545)**的方式，改变他人的**[**思想**](https://baike.baidu.com/item/%E6%80%9D%E6%83%B3/33180)**和行动的能力**。如果双方都能有效地影响对方，打架的悲剧就不会发生。<br />\n<br />今天分享一个我所使用过的一个方法，成功改变了产品经理提需求的姿势，为后面的合作打下了良好的基础。虽然标题叫做程序员影响产品经理，以及的确当时是我作为程序员影响了当时的产品经理，但如果产品经理自己主动采用这个方法，也能让程序员愉快地写代码，成功地影响程序员，避免打架的尴尬。<br />\n<br />这个方法就是：<br />\n\n<a name=\"qTYMG\"></a>\n## 实例化需求\n\n<br />这其实是一本书，但是我今天只举一例子，正好实例化需求地中心思想，就是用举例子地形式说明需求。<br />\n<br />我曾经在一家专注职业教育的公司任职，产品经理提了一个需求，开发做了一段时间，验收时产品经理觉得不对，但是工期又紧，双方都顶着巨大的压力，需求讨论会开了好几轮，再这样下去很可能真的要打起来了。<br />\n<br />于是我在那一次的周报中反应了这个问题，提出了改进建议：\n\n---\n\n> <a name=\"6297d5e8\"></a>\n### 建议与思考\n> \n\n> **问题**： 在最近的迭代中发现，大家对于反复讨论过的需求，仍然有各自不同的理解。\n> \n\n> **分析**： 需求描述的是逻辑，然后由于自然语言天然的不精确性，导致不同的人会有不同的理解。\n> \n\n> **实例**： XX 项目里有对板块解锁周期的描述：某一个板块可观看的时长，这个时长后才能解锁下一个板块。这个描述，不同的人就有不同的理解，主要是容易让人误解为，第一个板块也是在周期之后开始（可能程序员很习惯设想还有一个不显式在页面上显示的，但是逻辑上存在的第零个板块）。\n> \n\n> **改进方案**： **实例化需求**。使用举例的方式，来说明需求，就不会有歧义，比如上面的例子改成：\n> \n\n> “初级产品经理入门”这门在线课程，它一共有 4 个板块。这 4 个板块的解锁周期分别为：板块一周期 7 天，板块二周期 2 天，板块三周期 7 天，板块四周期 5 天。\n> \n\n> 如果开课日期是：2019.1.1，那么前端显示的板块区间范围是：\n> \n\n> - 板块一：2019.1.1-2019.1.7\n> - 板块二：2019.1.8-2019.1.9\n> - 板块三：2019.1.10-1.15\n> - 板块四：2019.1.16-1.20\n> \n\n> 这样不仅消除了歧义，而且，更进一步采用严格的“给定某一条件……-当……-那么……”这样的结构来描述需求，就能够采用一些工具来生成自动化测试。\n> \n\n> 这样的好处是不仅需求清晰，而且是可以自动化运行的活文档。\n> \n\n> 另外，通过将模糊的大需求拆解成一个个使用三句话描述清楚的小需求，也算是金字塔原理的一个应用（当时这家公司很推崇《金字塔原理》这本书）。\n\n\n---\n\n<a name=\"ZZa5z\"></a>\n## 提高开会效率\n\n<br />后来，产品经理写的需求，总是会刻意给出例子。并且他们自己也发现，在举例的过程中，会发现自己的逻辑漏洞，从而在需求评审会之前，就能自己发现很多问题，提前可以打磨。在开需求评审会时，需求都比较清晰，没有歧义并且不再有那么多低级错误，或者漏洞，开会效率提高了很多。<br />\n\n<a name=\"eNlGM\"></a>\n## 程序员写代码极度舒适\n\n<br />后来程序员写代码去实现实例化的需求时，心情是极度舒适的。但是具体的当时的项目代码就不分享了，毕竟那家公司是闭源开发方式。<br />\n<br />举一个更有含金量的例子，这可是我当时学的一门课程，5000 元一天，含金量可想而知。<br />\n<br />需求是写成这样子的：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613378880538-2ad7fbff-6287-4987-9b3e-b1977106bb2e.png#align=left&display=inline&height=480&margin=%5Bobject%20Object%5D&name=image.png&originHeight=960&originWidth=1280&size=1166077&status=done&style=none&width=640)<br />程序员写完代码，是可以运行这些需求的，并即使给出反馈结果：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613378907078-e536c3aa-f41f-4037-b2d6-99cf4c2ed49b.png#align=left&display=inline&height=480&margin=%5Bobject%20Object%5D&name=image.png&originHeight=960&originWidth=1280&size=1411282&status=done&style=none&width=640)<br />上面截图是对需求运行的反馈，同时运行的产品截图如下：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613378972843-156f0bb6-c594-4425-8412-60616212c556.png#align=left&display=inline&height=480&margin=%5Bobject%20Object%5D&name=image.png&originHeight=960&originWidth=1280&size=749690&status=done&style=none&width=640)<br />\n\n<a name=\"Ansm0\"></a>\n## 总结\n\n<br />实例化需求帮助产品经理厘清需求，避免逻辑漏洞和低级错误，和程序员沟通时避免语言歧义，而程序员开发时心情极度舒适，真的是工作的必备良药呢！\n"
  },
  {
    "id": 31476837,
    "title": "阴形思维的妙用",
    "description": "《5 天学会画画》我本来不喜欢那种速成教材，号称 30 天学会英语，7 天学会编程等等。但是却被一本书吸引到了：《5 天学会画画》。几年前一口气看完，今天又看了一遍作者录的视频，也是一口气看完。当然，由于是一口气看完，所以只花了几个小时，远没有花到 5 天的时间，显然没有最终学会画画，但是给我...",
    "custom_description": null,
    "updated_at": "2021-02-14T07:31:26.000Z",
    "created_at": "2021-02-14T07:31:26.000Z",
    "slug": "xd2s4g",
    "word_count": 3322,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1613263515799-0c8fb42c-23c8-45c3-90ea-92d51ea29af8.png?x-oss-process=image%2Fresize%2Cw_1500",
    "body": "<a name=\"vjLjV\"></a>\n## 《5 天学会画画》\n\n<br />我本来不喜欢那种速成教材，号称 30 天学会英语，7 天学会编程等等。但是却被一本书吸引到了：《5 天学会画画》。几年前一口气看完，今天又看了一遍作者录的视频，也是一口气看完。<br />\n<br />当然，由于是一口气看完，所以只花了几个小时，远没有花到 5 天的时间，显然没有最终学会画画，但是给我的启发却是让我终身受用，并且远不止应用在画画上面。<br />\n<br />这本书一共介绍了五个技巧，其中给我印象最为深刻的技巧是“画阴形”，或者叫做画“虚空间”。“阴形”相对于“阳形”，拿浮雕举例，凹下去的是阴形（多半是背景），凸起的就是阳形（多半是主体）。<br />\n<br />作者拿画一把椅子举例，当初学者准备画一张椅子，并希望画得像（也就是现实主义画派，或者说是素描），想要开始，却无从下手。因为当你开始观察椅子，就会发现细节太多，甚至每一根椅子的腿，由于摆放位置等因素，导致看上去都不一样。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613263515799-0c8fb42c-23c8-45c3-90ea-92d51ea29af8.png#align=left&display=inline&height=788&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1576&originWidth=1512&size=2258121&status=done&style=none&width=756)<br />画阴形的技巧就是，忘掉椅子，去观察椅子背后的虚空间，以及由于椅子的部分遮挡导致的原本完整的虚空间被割断形成的各个多边形形状，这些就是阴形。去画这些阴形要简单得多，无非是一些四边形、三角形或者一些多边形等等，当把阴形画完之后，阳形的椅子自然就在那里了。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613264259730-ddc784f9-ec10-47e7-b7f9-60156f3656c7.png#align=left&display=inline&height=725&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1450&originWidth=1486&size=1526837&status=done&style=none&width=743)<br />这个绝妙的技巧，利用了一个事实：**虚空间和实体共享同样的边线**。当你描绘完阴形的边线，阳形就自己显现了。所以几乎在所有的练习中，作者总是会先强调把画面先涂黑，然后你也会看到，作者使用橡皮擦的次数和使用笔尖的次数相当，使用橡皮擦擦出的就是虚空间，而实体在擦的过程中就自己显现了。即使在画人物肖像时，作者仍然是这样做的。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613266271848-c411acd4-ab1e-4c5f-aecf-86029843b16d.png#align=left&display=inline&height=832&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1664&originWidth=2078&size=2791831&status=done&style=none&width=1039)\n<a name=\"fLpQz\"></a>\n## 测试驱动开发\n\n<br />几年前看完这本书，就深受触动，尽管当时我没有立即在画画上面实践这个技巧，但是沉迷于写代码的我，正好开始接触到一种编程技巧：**测试驱动开发**。可以说这就是编程上的“画阴形”方法，从此在编程上一直使用这个方法至今，爱不释手。<br />\n<br />就如同绘画的初学者出于本能会去画阳形，但是由于把控不了实体的复杂性，导致各种变形，以至于最终成果惨不忍睹。初级的编程者会出于本能去尝试直接实现需求，最终发现代码写着写着就在复杂性中失控了，严重的会运行不起来，而好不容易调通了后扔给测试人员去测，祈祷能够顺利过关。但现实是各种被打回，改了这个 Bug 又带来新的 Bug，改好新的 Bug 老的功能点又坏了，就像铺床一样，铺好了这个角，那个角又皱了起来，如此往复陷入一个焦油坑，最终放弃。<br />\n<br />**测试驱动开发**则和本能相反，写实现代码前，先写测试。不妨把实现代码比做阳形，测试代码就是阴形。在面对复杂的需求说明时，先不要去想如何实现，而是去想怎么测试，怎么验收？先写出一个测试用例，就是找到一个虚空间中的基本形。然后实现并且仅仅只实现这个测试用例，使其通过后，再增加下一个能够让测试失败的用例，随后写实现代码，能够同时通过所有的测试用例，如此重复，直到所有的测试用例能够涵盖整个需求说明。当所有的测试用例都通过时，需求就做完了，一个可以工作的软件自然浮现出来了。<br />\n<br />这和“画阴形”的绘画技巧异曲同工，这些测试用例，就是需求说明的边界线。<br />\n\n<a name=\"2Z49D\"></a>\n## 不可能的任务\n\n<br />2013 年我在英孚教育青少儿实验室工作，有一次团队要做的一个需求，是让系统帮助电话销售主管自动分派销售线索，这个自动分派需要做到动态适应，以及公平。一个电话销售团队，由销售主管和销售专员组成，但是销售专员的数量是动态变化的，因为有老人离职和新人加入。并且每个人的熟练程度不一样，同一个人的熟练程度也会随时间变化。我们设想的是让主管只需要在系统中录入专员的姓名和熟练程度，当有变化时只需要添加新人、删除离职的专员，修改熟练程度。这样主管就能从每天繁重的线索分派中解脱出来，花更多时间发展自己以专员的销售技能。<br />\n<br />这个需求并没有分配给我，但是到迭代周期的尾声时，我从开发经理处得知我们下周的发布先不上这个功能，原因是测出了很多问题，我当时的感觉就是开发已经进入了一个焦油坑的状态。我当时也是年轻，想要多表现，就暗暗分析起这个需求，在第二天站会上看到 PO 显然还是希望我们能上这个功能，我就提出自己来试试做这个功能，如果能通过测试，还是有希望赶上下一个发布的。<br />\n<br />其实当天晚上我已经把需求分析清楚了，得到团队的认同后就直接开始做了。结果是花了一天的时间完成了第一个版本，第二天根据代码评审结果做了些小改。后来测试没问题直接赶上了版本发布。后来我在内部 Wiki 上详细写了一篇文档详细说明了这个需求以及分析过程（后面再撰文分享这个具体算法），并将对其的实现命名为“销售线索的动态强制分布分派算法”，没想到还得到了英孚教育成人英语实验室的架构师的点赞，和一番详细的评论。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613282865826-8ec19c70-0083-47d7-adf4-a4ad65fe2820.png#align=left&display=inline&height=575&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1150&originWidth=1556&size=285920&status=done&style=none&width=778)<br />\n<br />第一个版本上了之后，我本来还准备有机会再优化一下，因为按照算法，是需要将一个累计误差做持久化存储的，以做到历史累计意义上的公平，但是优先级不高，后来竟然一直搁置，再也没有优化过，因为一个次优方案就已经达到了各个利益相关者的预期。我自己回顾下来，从分析需求到上线，只花了 3 天时间，还是挺激动的，觉得自己完成了一个不可能的任务，并且通过内部文档分享间接结识到另一个业务单元的架构师，后来还有幸一起合作过一个项目。后来拿了一个奖状，这个不可能任务应该有所贡献吧。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613283789801-febcfc7c-c689-40c5-a0f0-4ba6d47e6426.png#align=left&display=inline&height=719&margin=%5Bobject%20Object%5D&name=image.png&originHeight=719&originWidth=960&size=823371&status=done&style=none&width=960)<br />\n<br />这个“销售线索的动态强制分布分派算法”，准备后面再单独分享。我后来回想起这个点子，其实也和“阴形”思想分不开。要支持销售专员的动态设置，还要每次的线索分配都公平，以及把每次的分配汇总成每天、每月、甚至每年，都得是最公平的，顺着这条线思考，就是本能的冲动，而且无从下手。当时我看到尝试实现的代码里充满了各种莫名的 Random()，感觉作者是希望通过祈祷的方式通过测试验收。\n\n其实我是睡觉时在床上思考该怎么解决这个问题的，当时感觉动态和公平是阳性目标，而且细节多，复杂度高，就放弃了这个方向，转而思考它在这个问题空间中切割出的阴形形状会是什么样子，后来就在迷糊中抛弃掉现实，进入虚拟空间，在虚拟空间中，没有整数约束，于是自然有一个绝对符合主管设定的强制分布方案，然后这个公平的阳性目标，就转变成了最小化现实方案与理想方案的误差的阴形目标了。第二天在实现这个“销售线索的动态强制分布分派算法”时，再一次使用了测试驱动开发，虽然具体工具使用上还很生疏，不过在开发经理的帮助下，最终按照正确的姿势完成了，并且只花费了远少于前一个开发所用的时间。\n\n<a name=\"DlYky\"></a>\n## 测试驱动开发可以驱动出算法吗？\n\n<br />也许可以，也许根本就用不着。拿上面的例子，“销售线索的动态强制分布分派算法”不是测试驱动出来的，而是受到一个启发得来的，所以这个点子的产生没有用到测试驱动开发，因为还没有开始开发。但是不管这个算法怎么想来的，都推荐使用测试驱动开发去实现它，避免陷入焦油坑啊同志们！\n\n但是如果测试驱动出了算法我也不惊讶，我之前的一个语言解释器，就是从 0 开始测试驱动来的，动手前完全没有设计过：[https://zhuanlan.zhihu.com/p/345079513](https://zhuanlan.zhihu.com/p/345079513)<br />\n\n<a name=\"1Qc8G\"></a>\n## 预测上证指数走势\n\n<br />除了画画和编程，其实生活中也能使用这个阴形思维。假如上证指数每天有 50% 的可能性上涨，那么你有多大的把握保证下周上证指数会上涨呢？<br />\n<br />这个问题如果顺着思考，就需要将如下这些概率加起来：\n\n- 只在星期一上涨的概率\n- 只在星期二上涨的概率\n- ……\n- 在星期一、星期二上涨的概率\n- 在星期以、星期三上涨的概率\n- ……\n- 五天全部上涨的概率\n\n\n<br />下周指数上涨的概率就是阳性目标，这样分别罗列各种概率最后求和的分而治之思想是很好的，也能得到正确的结果，但是考虑一下它的阴形：即下周不上涨的概率，会显得更加简单，显然是![](https://cdn.nlark.com/yuque/__latex/9c2a64f32ad1d12f4f5d877f1b375b56.svg#card=math&code=%28%5Cfrac%7B1%7D%7B2%7D%29%5E5%20%3D%20%5Cfrac%7B1%7D%7B32&height=37&width=80)。于是下周上涨的概率就是![](https://cdn.nlark.com/yuque/__latex/bdc609f964287623169e8042d0f361c1.svg#card=math&code=1-%28%5Cfrac%7B1%7D%7B2%7D%29%5E5%20%3D%20%5Cfrac%7B31%7D%7B32%7D%20&height=37&width=109)。\n\n当然，这个问题的前提不成立，之所以选择上证指数，是为了醒脑和贴近生活（这年头还有人不看股票的么？）。其对应的严谨但是无趣的例子是：连续抛一枚硬币 5 次，出现正面的可能形是多少？<br />\n\n<a name=\"7mwG6\"></a>\n## 总结\n\n<br />其实有人会说，这不就是反向思考嘛。对，或者叫换位思考也行。但是我看到《5 天学会画画》里的“画阴形”技法后，觉得“阴形”思维最生动，提到这个词，就能看到一个平面，突然平面上一部分凹陷进去，浮雕显现了出来。难怪有雕刻大师说，我没有在雕刻，我只是把多余的部分凿掉了而已。<br />\n<br />反证法，数学上屡见不鲜，在集合论和概率论中，这种思维方式更是屡试不爽。有意思的是，这种我原本以为只是科学思维中的方法，没想到艺术家也是这么思考的。高手都有同样的洞见，这个洞见就是**阴阳相对抗，却又互为补充**。<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613287348001-be5d0597-0b68-40a8-addb-4a2f9cfce024.png#align=left&display=inline&height=229&margin=%5Bobject%20Object%5D&name=image.png&originHeight=458&originWidth=580&size=367643&status=done&style=none&width=290) ![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613287434609-e6e560c0-4481-401a-a2bd-29cfe93d10f5.png#align=left&display=inline&height=228&margin=%5Bobject%20Object%5D&name=image.png&originHeight=874&originWidth=898&size=653238&status=done&style=none&width=234)<br />\n<br />\n\n"
  },
  {
    "id": 31473992,
    "title": "我，不想做外卖员",
    "description": "某乎上有个热门问题：35 岁以上的程序员都去了哪儿？除了极少数的晋升为管理层外，其余的多数回答都是去做了外卖员……也有段子说外卖小哥转行程序员的，但是程序员转行做外卖员则是活生生的现实了。是的，每天都生活在失业的焦虑中。是的，我不想等到年纪大了之后只能去做外卖员。虽然外卖员令人尊敬，但是如果年...",
    "custom_description": null,
    "updated_at": "2021-02-13T14:00:05.000Z",
    "created_at": "2021-02-13T14:00:05.000Z",
    "slug": "myltwz",
    "word_count": 4206,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1613224676473-9a9281b8-4049-4a64-bdc9-e9d1db296d98.png",
    "body": "某乎上有个热门问题：35 岁以上的程序员都去了哪儿？除了极少数的晋升为管理层外，其余的多数回答都是去做了外卖员……<br />\n<br />![](https://cdn.nlark.com/yuque/0/2021/png/221736/1613224676473-9a9281b8-4049-4a64-bdc9-e9d1db296d98.png#align=left&display=inline&height=418&margin=%5Bobject%20Object%5D&originHeight=418&originWidth=798&size=0&status=done&style=none&width=798)<br />\n<br />也有段子说外卖小哥转行程序员的，但是程序员转行做外卖员则是活生生的现实了。<br />\n<br />是的，每天都生活在失业的焦虑中。是的，我不想等到年纪大了之后只能去做外卖员。虽然外卖员令人尊敬，但是如果年纪大了在程序员中没有竞争力，那么在外卖员里，肯定更加没有竞争力。<br />\n<br />说到点子上了，**保持竞争力**很重要。<br />\n<br />有时候，自己觉得自己很牛逼，但是现实的打击会让你开始怀疑自己。这就像很多人创业失败一样，创始人自己很有激情，自己把自己感动得热泪盈眶，但是最终没有感动市场。<br />\n<br />所以，保持竞争力，不要仅仅自己觉得，而是关键要获得他人的认可。这和一些鸡汤文推崇的不要在乎他人的看法，要活出自己什么的不一样。或者这样说，不要在意有些人的看法， 但是同时还是要在意另一些人的看法，也就是说，世界上有这一拨人，有那一拨人，你总得向某一拨人靠近，而不是原地不动，做所谓不一样的烟火。<br />\n<br />作为程序员，作为一个打工人，还是需要获得上级的、周围同事的、以及人力资源部门的认可的，不然很难晋升，最终逃脱不了失业、被迫转行的命运。<br />\n<br />昨天在《[低头写代码，抬头看方向](https://www.yuque.com/tianjie-cjnre/sldmka/hydnt7)》里详细介绍了某外企的 M4 级别的发展建议，今天再介绍一下 M4、M3 级别的详细定义和 M3 级别的发展建议，希望能够增加你对从 M4 级别晋升到 M3 级别的转变有一些认知。<br />\n<br />首先看一下该外企对 **M4 级别的定义**：<br />\n<br />经理负责执行设定的关键绩效指标。经理需要使用自己的知识在复杂的环境中成功地交付，响应运维挑战，并保证工作流可以高效地执行这些目标。经理通常拥有项目的所有权，并负责根据项目时间表和关键绩效指标进行监控和交付。该角色要求他们去和内部或者外部的利益相关人协作，并且应该利用他们的职能专长去支持高级领导。要获得成功，经理也需要识别到发展自己的机会来增强自己的领导力技能，并成为领导力行为框架的榜样。<br />\n<br />**对 M4 级别的表现期望：<br />**<br />\n\n\n| **合作<br />** | **信心<br />** | **创新** |\n| --- | --- | --- |\n| _建立清晰的共同目标_\n_在决策制定时邀请他人\n_\n_构建富有成效的关系\n_ | _正直行事_\n_学习并成长_\n_设定高期望值_ | _求新_\n_激发创造力\n_\n_将想法转化为行动\n_ |\n| > 寻求理解如何为整体战略做出贡献，并朝着共同的目标努力。\n> 积极参与新项目，并找到增加价值的机会。\n> 利用职能专业知识和运营洞察力来支持高级领导决策。\n> 为概念规划做出贡献并分享想法，以支持更广泛团队的有效性。\n> 在团队内部和团队之间进行协作，倾听他人，并建立信任。\n> 根据需要在团队内部和团队之间建立关系和协作，以提高效率。 | > 执行任务，根据总体战略交付，并努力超越预期。> 通过高质量的执行建立信誉，并寻求影响决策。\n> 对成功和失败负责，并把它们看作是学习的源泉。\n> 愿意给予和接受诚实、直接和周到的反馈。\n> 积极投入时间在个人发展和提高工作相关技能上。\n> 设定具有挑战性的目标，获取完成目标所需的资源和/或支持。 | > 利用职能知识提高效率，从不同角度解决问题。> 表现出尝试新想法的欲望，并表现出向他人学习的开放态度。\n> 通过分享早期想法和乐观地探索不同的观点来培养个人创造力。\n> 将新想法与成熟的流程和方法结合起来，并寻求他人的适当支持和认可，以实现执行。 |\n\n\n\n**对 M4 级别的经验要求：\n**\n\n\n\n| **人员与团队\n** | **业务\n** | **市场 / 职能部门\n** |\n| --- | --- | --- |\n| > 在某些情况下，直接或间接管理1或2名初级工作人员或实习生，重点支持他们的个人发展。<br />> 如果以个人贡献者的身份工作，作为团队的积极成员，努力提升团队的成功。<br />> 通过支持同事并在必要时适应他人的工作方式来促进团队合作。<br />> 在自己的职能和水平范围内发展和壮大强大的同行网络。 | > 展示数字化思维，拥有使用不同数字化工具和资源的能力。> 管理项目的日常细节，并与相关利益相关者协调。<br />> 专注并推动交付 —— 在实现目标和完成高质量工作方面有着良好的记录。<br />> 知道如何在期限紧迫的高压环境中设定优先事项，并表现出必要的应变能力。 | > 展示对不同文化、想法和消费者需求的理解。<br />> 与其他部门和/或市场的同事一起参与复杂的项目。<br />> 展示清晰的沟通技巧和敏捷的工作方式，保持全球联系。<br />> 致力于简化流程和标准化跨市场/职能部门的方法。 |\n\n\n<br />你可以参照以上描述，对照自己是否已在这个级别，如果是，并且希望晋升到下一个级别，那么需要**首先做好当前级别的事情**，从会做到做好，并且能够优化和突破，达到当前级别的精通水平，**然后对照下一个级别的要求来提升自己**的各种能力，并**主动寻找做下一级别的事情的机会**，拿到好的结果。<br />\n<br />M4 的下一级别是 **M3**，下面来看看这个**级别的定义**：<br />\n<br />高级经理负责推动战略执行。他们的角色要求他们专注于运营交付，并将战略方向转化为关键绩效指标。高级经理通常是在其职能领域的概念层面以及实践层面都拥有广度和深度的专家。高级经理为了交付共同目标既会独立工作也会在其职能范围内以及跨职能部门之间与他人进行协作。多数高级经理还会被要求以跨文化的方式进行工作从而保证全球一致性。高级经理需要通过增强业务影响力来发展领导力技能，并将所学应用于带领一个团队或者支持更初级的同事，从而符合领导力行为框架。<br />\n<br />**对 M3 级别的表现期望：<br />**<br />\n\n\n| **合作<br />** | **信心** | **创新<br />** |\n| --- | --- | --- |\n| _建立清晰的共同目标_\n_在决策制定时邀请他人\n_\n_构建富有成效的关系\n_ | _正直行事_\n_学习并成长\n_\n_设定高期望值\n_ | _求新_\n_激发创造力\n_\n_将想法转化为行动\n_ |\n| > 了解一个人如何为整体战略做出贡献，并让其他人参与进来，为执行战略和交付成果制定可行的计划。\n> 确定与其他团队的协同作用，以有效地实现共同的目标。\n> 支持他人理解他们在战略中的角色。\n> 与全公司的员工和团队建立关系和合作。\n> 利用职能专业知识为自己团队之外的共同努力做出贡献。\n> 指导个人在团队内部和跨团队协作，并作为一个团队达成决策。 | > 掌控工作，分享经验，培养更多初级团队成员。\n> 通过高质量的执行和跟进建立信誉。\n> 了解最新的相关市场发展和趋势，并鼓励其他人也这样做。\n>通过公开对成功和失败负责来树立一个好榜样。\n> 激励团队成员接受新的挑战并超越期望。\n> 通过展示信任、透明和对反馈的开放，树立企业的价值观。\n | > 探索职能领域内的创新、新实践和流程改进。\n> 以身作则塑造一个安全的环境，在这个环境中，团队成员能够探索、冒险和挑战传统思维。\n> 委派并给予他人支持成长和发展的机会。\n> 知道何时将想法转化为行动，并确保对新概念进行适当的审查和验证。\n> 将新的概念和想法与成熟的流程和方法结合起来。\n> 利用不同团队的思维来创造新的机会，以推动最高和最低的结果。 |\n\n\n\n**对 M3 级别的经验要求：\n**\n\n\n\n| **人员与团队** | **业务\n** | **市场/职能部门\n** |\n| --- | --- | --- |\n| > 根据需要，直接或间接领导一个具有以下经验的小团队:<br /> - 培养技能来指导和发展团队成员。 - 设定明确的方向，并确保角色和职责的明确性。<br />- 通过根据项目时间表和关键绩效指标积极管理和交付来关注团队绩效。<br />- 与不同的团队成员和利益相关者沟通并调整影响风格。<br /><br />> 在自己的职能部门和跨职能部门内发展和壮大强大的同行网络，以推动核心流程。 | > 彻底了解当前企业、企业的战略、流程和职能/市场。<br />> 通过与他人合作实现目标，展示将战略转化为交付的能力。<br />> 使用数据和相关的业务措施来提高团队生产力和实现战略意图。<br />> 管理复杂、多方面项目的端到端交付。 | > 管理跨职能和/或跨文化项目的成功关键要素。> 深入了解当地、地区或全球市场格局以及各自的消费者。<br />> 欣赏不同的文化动态；能够作为多元化团队的一员有效地工作。<br />> 如果需要的话，表现出希望在家庭所在地之外生活或工作，以完成短期或长期任务。 |\n\n\n<br />**对高级经理（M3）的发展建议：<br />**<br />\n\n\n| **可能遇到的挑战<br />** | **克服它们的建议**<br /> |\n| --- | --- |\n| 处理责任和有限的授权。 | 当在一个项目上工作时，确定需要做什么决定以及谁能做这些决定。考虑谁拥有所需的信息，并为正在做出的决策定义标准。与你的经理一起审核并达成一致。将决策委托给团队中合适的人，并尽可能做出贡献。 |\n| 被视为有影响力的人。 | 找到一个你认为是影响者的榜样人物。研究为什么那个人是一个好的影响者。通过练习和寻找说话的机会来提高你的沟通和表达技能。求反馈。知道自己擅长什么，并寻找在这些领域可以做出更多贡献的地方。 |\n| 在成为技术专家和领导/发展下属上找到平衡。 | 列出你一周花在专家活动/执行运营工作上的时间，与专注于发展他人/人员管理的活动相比，决定你需要花在发展他人上的最佳时间，并在你的日历中记录下来。与您的经理和同事会面，审查领导力行为框架，并共同确定需要发展的领域。 |\n| 一致且相关的流程和项目管理及改进。 | 使用现有的资源、流程和系统。集中注意力，把事情完成。确定您的团队最能控制的流程。让相关人员参与规划流程，确定哪些方面可以改进，以及如何改进。承诺实施商定的变更。让团队做出改变，并报告结果和提高的效率。 |\n| 帮助团队看到他们的工作和战略之间的联系。 | 直接与人交谈，确保你理解正在做的工作及其与战略的联系。创建团队工作如何与战略相联系的路线图。让团队参与评审路线图草案，以使其不断发展。讨论路线图与优先级的关系。 |\n| 在发展你自己，与同时发展你团队中更多的初级成员间找到平衡。 | 与你的团队、他们的团队和你的团队谈论发展。一起确定一个团队发展项目，并与每个人单独确定一个，包括你自己。制定发展计划，定期检查团队和个人计划的进展。设定现实的日期。汇报结果，用新计划重复。 |\n| 参与/管理和发展虚拟团队和全球团队。 | 与你的团队一起制定并坚持使用沟通策略。让团队成员参与确定如何在虚拟环境中改善合作，倾听他人的工作方式和偏好，并对其持开放态度。花时间和团队中的每个人交谈，讨论优势、发展领域和激励因素。根据需要采取行动。 |\n\n\n<br />**高级经理（M3）的必备技能、减分项和加分项：**<br />\n\n\n| **必备<br />** | **减分项<br />** | **加分项**<br /> |\n| --- | --- | --- |\n| > 确定如何通过运营流程实施战略<br />> 在没有直接授权的情况下影响他人并获得支持<br />> 发展人员管理和领导技能<br />> 利用您团队的技术专长<br />> 庆祝团队成功 | > 觉得自己缺乏影响力<br />> 凡事亲力亲为，而不是花时间去教团队成员<br />> 认为如果没有一个直接的团队，就没有必要发展领导技能 | > 提高适应变化环境的能力> 与经理和同事讨论如何让手头的工作符合战略<br />> 利用所有可能的技术和工具进行虚拟工作和交流<br />> 在你的部门内外与同事间建立关系。识别协作和流程改进的机会<br />> 理解是什么激励了团队<br />> 成为一名熟练的沟通者 |\n\n\n<br />**总结**：<br />\n<br />对照 M4 和 M3 的职位详情，**先**将 M4 级别的事情从基础做到熟练，直到**精通**，**然后主动寻找机会**去尝试做 M3 级别的事情，争取拿到好的工作成果，以此申请晋升，成功的机会更大。<br />\n<br />进入了程序员圈，就要积极打怪升级，早日晋升，避免失业危机，避免不得不去做外卖员。<br />\n<br />当然，人各有志，外卖员的工作非常令人尊敬，如果你因为喜欢或者别的原因，就想去做外卖员，那么，全当我 4000 多字的长文什么也没说。\n"
  },
  {
    "id": 31461572,
    "title": "低头写代码，抬头看方向",
    "description": "作为程序员，也不能一直埋头苦干写代码，还得了解一下代码之外的世界。所谓低头写代码，抬头看方向。要看的这个方向，就是职业发展的方向。首先，有必要了解一下技术职级体系。职级体系是公司管理体系中不可或缺的一部分，也是公司组织管理的基础制度之一。对于员工来说，它和自己的成长、发展甚至是薪酬密切相关。对...",
    "custom_description": null,
    "updated_at": "2021-02-12T15:19:47.000Z",
    "created_at": "2021-02-12T15:19:47.000Z",
    "slug": "hydnt7",
    "word_count": 2195,
    "cover": "https://cdn.nlark.com/yuque/0/2021/jpeg/221736/1613143055740-ed66a9c2-daac-4dfd-b4ff-397d71602552.jpeg?x-oss-process=image%2Fresize%2Cw_1500",
    "body": "作为程序员，也不能一直埋头苦干写代码，还得了解一下代码之外的世界。所谓低头写代码，抬头看方向。要看的这个方向，就是职业发展的方向。<br />\n<br />**首先**，有必要了解一下技术职级体系。<br />\n<br />职级体系是公司管理体系中不可或缺的一部分，也是公司组织管理的基础制度之一。对于员工来说，它和自己的成长、发展甚至是薪酬密切相关。对于管理者来说，和团队里的选拔、任用、考核、激励甚至是培训发展息息相关。融入在日常的人员选拔、培训、绩效管理等工作中。<br />\n<br />更通俗地说，所谓职级体系，就是游戏的段位规则，或者说是公司版的打怪升级指南。你搞清楚自己公司的职级体系，有助于自己的级别晋升。搞清楚跳槽的目标公司的职级体系，有助于拿到更适合自己的顶级结果，以及和 HR 谈个更好的薪酬。<br />\n<br />职级体系可以分为**专业技术职务任职资格体系**和**自立体系**。前者可以简称为**职称体系**，一般应用于教师、医生和律师等职业，其标准统一，全国通行。但是对于程序员来说，需要更加了解后者，也就是自立体系。也就是说，公司自己制定的完整的职级体系，由于是公司自行制定，因此没有统一标准，这对程序员来说是会增加理解上的复杂性。但是好在尽管没有统一标准，但是由于某些企业的强大影响力，导致某些公司的职级体系在事实上成为了某种标准，因此可以使用某些大厂的体系去做个大概的把握。<br />\n<br />自立体系虽然多种多样，不过都会存在两条线：即**专业性**和**管理线**。<br />\n<br />下面对阿里的技术职级体系做一个概览：<br />\n\n\n| **专业级别<br />** | **基本定义<br />** | **对应管理级别<br />** |\n| --- | --- | --- |\n| P1/P2\n | 低端岗位预留\n | \n |\n| P3\n | 助理\n | \n |\n| P4\n | 专员 | \n |\n| P5\n | 高级工程师\n | \n |\n| **P6\n** | **资深工程师\n** | **M1 主管\n** |\n| **P7\n** | **技术专家\n** | **M2 经理\n** |\n| P8\n | 高级技术专家 | M3 高级经理\n |\n| P9\n | 资深技术专家\n | M4 总监\n |\n| P10 | 研究员 | M5 资深总监\n |\n| P11 | 高级研究员 | M6 副总裁\n |\n\n\n\n**其次**，需要给自己一个定位，是一直走技术路线，还是转到管理岗位。\n\n\n阿里的职级体系在国内互联网公司中具有代表性，对于从技术转到管理，是需要很深的技术积累的。作为程序员，如果想要在国内企业转做管理，建议先在专业线达到阿里 P9 级别再转，否则很可能在管理岗位上也混不长久。\n\n\n当然，要转管理岗也可以考虑一下外企，外企的技术管理岗位，技术本身不是特别重要，反而主要看中一些非技术上的能力，比如：\n\n1.  英语要好；\n\n1.  政治正确，不能有歧视倾向；\n\n1.  影响力；\n\n1.  洞察力。\n\n\n\n\n好了，方向就写到这里。由于阿里的巨大影响力，其职级体系的详细描述不难找到，所以在最后，特别附录某外企的职级体系，并列出其中一个职级的发展建议，希望起到对外企技术职级体系的以管窥豹之效果。\n\n\n\n---\n\n\n<br />![](https://cdn.nlark.com/yuque/0/2021/jpeg/221736/1613143055740-ed66a9c2-daac-4dfd-b4ff-397d71602552.jpeg#align=left&display=inline&height=70&margin=%5Bobject%20Object%5D&originHeight=960&originWidth=1920&size=0&status=done&style=shadow&width=140)<br />\n<br />某外企的职级体系概览如下，有意思的是，命名方式和阿里一样，只是数字越小职级越高：<br />\n\n\n| **等级**<br /> | **对应管理级别**<br /> |\n| --- | --- |\n| P2/P1 | <br /> |\n| M4<br /> | 经理 |\n| M3 | 高级经理<br /> |\n| M2<br /> | 总监<br /> |\n| M1 | 高级总监 |\n| S3<br /> | 副总裁<br /> |\n| S2<br /> | 高级副总裁<br /> |\n\n\n<br />**对经理（M4）的发展建议：<br />**<br />\n\n\n| 可能遇到的挑战<br /> | 克服它们的建议<br /> |\n| --- | --- |\n| 处理持续的变化<br /> | 在变化中要经常对优先级做定期重审，养成放下并向前进的意愿。了解是什么导致了你所承受的压力级别上升了并且要想办法克服它们，比如通过锻炼身体或者罗列清单的方式等等。要不断地问：“问什么不呢？”<br /> |\n| 在给定的条件下执行项目/活动<br /> | 讲究方法，在开始前列好优先级并考虑到会影响你完成任务的能力的因素。善于利用现存资源、流程以及系统。专注直至事情完成。<br /> |\n| 发展（跨职能部门）的关系<br /> | （在其他职能单元中）找到正在做和你所做的某一部分类似的工作的人，介绍自己并去了解他们面临的挑战、项目中的交集、优先级以及可能的合作方式。持续培养和构建这些关系。 |\n| 让你的点子更好地被看到<br /> | 识别你的团队所面临的问题并制定优先级，从中挑选同事能够认识到你在其中的专业度的问题，提出方案并请你的经理进行复审以及讨论试验的方案。找你的经理进行谈话以获取你的点子能被更好地看到的机会，并在内部沟通网络中分享你的点子。<br /> |\n| 在有限的授权下优化流程<br /> | 找出流程中最有压力的部分，并通过流程优化去识别如何解决它们。解释清楚这个流程和总体战略的联系，并寻找需要什么才能够让你的优化能够起作用。<br /> |\n| 成为虚拟的跨文化团队的一部分<br /> | 持续使用团队的沟通策略并为之作出贡献，并就如何改进一起的工作提供洞见。开放性地倾听他人的工作风格和习惯。采取必要的行动。<br /> |\n| 管理自己的发展<br /> | 寻找获得反馈和评估的机会，提高和你的角色相关的技能。把你想要发展什么告诉你的经理，并寻求帮助以找到相关领域的导师。找到同级别的你可以教他们的人，并找到那个人可以教你什么。帮助你团队中的其他人发展，并学会将事情委派给其他人，这样你就会有时间在自己最擅长的地方做出贡献。<br /> |\n| 有效激励自己以及团队中的其他人<br /> | 了解什么最能激励自己并找到将它融入到自己的日常工作的方法（比如做延伸作业、保持工作-生活的平衡等）。找到激励团队中的每个人的方法并寻找你们可以一起完成的活动。尝试定期表达感恩的小方式，比如小卡片等。<br /> |\n\n\n<br />**经理（M4）的必备技能、减分项和加分项：**<br />\n<br />**必备：<br />**<br />- 目标执行力<br />- 找到影响他人的方式并且在没有直接授权的情况下赢得别人的支持<br />- 保持跨职能和跨文化的视角<br />- 改进运营流程，从而实现需求并提高效率<br />- 为团队和你的经理带来新的可行的点子与方案<br />\n<br />**减分项：<br />**<br />- 让你对自己团队的截止日期和优先级的关注超越对其他团队的截止日期和优先级的关注<br />- 不盘点和利用自己团队的专业知识和优势<br />- 假设学习只有通过正式培训才有可能<br />\n<br />**加分项：**<br />- 发展对你和业务现在或者将来有帮助的（跨职能）关系<br />- 理解你的工作是如何影响业务的其他部分的<br />- 寻找你所想要发展的技能（比如项目管理）的导师和榜样<br />- 培养你对变化的适应性和开放性<br />- 提高你的冲突管理技能<br />\n<br />今天就写到这里，后面再持续更新其他外企职级的详细描述。\n"
  },
  {
    "id": 7501591,
    "title": "伸手吧，不要重复造轮子！但是……",
    "description": "当搜索不到答案时，该怎么办？碰到问题，先搜索现有解决方案。不要重复造轮子。首先，要相信你只是一个普通人，你碰到的问题别人很可能也碰到过，思考过，给出过解决方案，甚至已经迭代出了最佳实践。但是，当你真的遇到一个难题，花费了大量时间，还没有找到现成解决方案时，那么简化它吧！重新描述问题，但是以更简...",
    "custom_description": null,
    "updated_at": "2020-05-26T05:34:26.000Z",
    "created_at": "2020-05-26T05:34:26.000Z",
    "slug": "skquw2",
    "word_count": 332,
    "cover": null,
    "body": "<a name=\"LMwJT\"></a>\n## 当搜索不到答案时，该怎么办？\n碰到问题，先搜索现有解决方案。不要重复造轮子。<br />首先，要相信你只是一个普通人，你碰到的问题别人很可能也碰到过，思考过，给出过解决方案，甚至已经迭代出了最佳实践。<br />但是，当你真的遇到一个难题，花费了大量时间，还没有找到现成解决方案时，那么\n<a name=\"emx2m\"></a>\n## 简化它吧！\n重新描述问题，但是以更简单的方式。不断思考问题的真正本质，如果定位不到本质，那么列出它的多个简化版本，并尝试解决最简单的版本。<br />如果找到一个能够解决的简单版本，那么恭喜你，以此为突破口，说不定就能一步步解决原来的问题了！<br />\n<br />《原则》的作者，瑞·达里奥说：“不是我知道多少事情，而是我知道在无知的情况下自己应该怎么做。”<br />这是一种智慧，在对问题无知的情况下，重新定义和解决简化版本，是一个可选的行动方案。<br />\n\n"
  },
  {
    "id": 5683051,
    "title": "贷款计算：算月供（等额本息）",
    "description": "问题期初借入一笔钱 A，年利率是 r，按月分期还款，一共分为 n 期。求每月还款数额 a。分析参考《贷款计算：月利率换年化利率》：此处为语雀文档，点击链接查看：https://www.yuque.com/tianjie-cjnre/sldmka/mmcpk3可以从年利率得出月利率为然后画一个贷...",
    "custom_description": null,
    "updated_at": "2020-03-29T08:36:23.000Z",
    "created_at": "2020-03-29T08:29:26.000Z",
    "slug": "gmpgr9",
    "word_count": 232,
    "cover": "https://cdn.nlark.com/yuque/__latex/558db2d8afaa0f0a3969fea8cfbac12e.svg#card=math&amp;code=%5Csqrt%7B%281%2Br%29%7D%7B%7D%3D%281%2Bi%29%5E%7B12%7D&amp;height=31&amp;width=133",
    "body": "<a name=\"kWZdg\"></a>\n## 问题\n期初借入一笔钱 A，年利率是 r，按月分期还款，一共分为 n 期。求每月还款数额 a。\n<a name=\"KlrCJ\"></a>\n## 分析\n参考《贷款计算：月利率换年化利率》：<br />\n<br />\n<br />可以从年利率得出月利率为<br />![](https://cdn.nlark.com/yuque/__latex/fd10eed252d20a800d47cc9eff3ac9d4.svg#card=math&code=i%3D%5Csqrt%5B12%5D%7B%281%2Br%29%7D-1&height=31&width=110)<br />\n<br />然后画一个贷款还款时序图如下：\n![](https://cdn.nlark.com/yuque/__puml/1b4b453ebb9fa48ccfd8e07f0de5863b.svg#lake_card_v2=eyJjb2RlIjoiQHN0YXJ0dW1sXG5cblsqXSAtPiDnrKww5pyfXG7nrKww5pyfIC0-IOesrDHmnJ9cbuesrDDmnJ8gOiDlgJ_lhaUgQVxu56ysMeacnyA6IOi_mOasviBhXG5cbuesrDHmnJ8gLT4g56ysMuacn1xu56ysMuacnyAtPiAuLi5cbi4uLiAtPiDlgJLmlbDnrKzkuozmnJ9cbuWAkuaVsOesrOS6jOacnyAtPiDnrKxu5pyfIDogYSgxK2kpXG7nrKxu5pyfIC0-IFsqXVxuXG7nrKwy5pyfIDog6L-Y5qy-IGFcbi4uLiA6IOi_mOasviBhXG7lgJLmlbDnrKzkuozmnJ8gOiDov5jmrL4gYVxu56ysbuacnyA6IOi_mOasviBhXG5cbuesrDDmnJ8gLT4g56ysbuacnyA6IEEoMStpKV5uXG7nrKwx5pyfIC0-IOesrG7mnJ8gOiBhKDEraSleblxu56ysMuacnyAtPiDnrKxu5pyfIDogYSgxK2kpXihuLTEpXG5cbkBlbmR1bWwiLCJ0eXBlIjoicHVtbCIsImlkIjoiTHhQdngiLCJ1cmwiOiJodHRwczovL2Nkbi5ubGFyay5jb20veXVxdWUvX19wdW1sLzFiNGI0NTNlYmI5ZmE0OGNjZmQ4ZTA3ZjBkZTU4NjNiLnN2ZyIsImNhcmQiOiJkaWFncmFtIn0=)从上图可以直观地看出<br />![](https://cdn.nlark.com/yuque/__latex/cc6b9c2a4c4192efb76115353425a088.svg#card=math&code=A%281%2Bi%29%5En%3Da%281%2Bi%29%5En%2Ba%281%2Bi%29%5E%7Bn-1%7D%2B...%2Ba%281%2Bi%29%2Ba%3Da%5B%281%2Bi%29%5En%2B%281%2Bi%29%5E%7Bn-1%7D%2B...%2B%281%2Bi%29%2B1%5D&height=20&width=630)                  (*)<br />等号右边有个等比数列求和：<br />令     ![](https://cdn.nlark.com/yuque/__latex/fa2604bbd7286ac6b01f38967b89fe58.svg#card=math&code=S_n%3Dq%5En%2Bq%5E%7Bn-1%7D%2B...%2Bq%2B1&height=19&width=174)，                                       (1)                                                       <br />以及![](https://cdn.nlark.com/yuque/__latex/8a1ecf9a85eec6f03b54c26835ff1fe8.svg#card=math&code=qS_n%3Dq%5E%7Bn%2B1%7D%2Bq%5En%2B...%2Bq%5E2%2Bq&height=19&width=187)。                                      (2)<br />那么：(1)-(2) 可得：<br />![](https://cdn.nlark.com/yuque/__latex/267f09e538bb3321d4ae854898321d7c.svg#card=math&code=%281-q%29S_n%3D1-q%5E%7Bn%2B1%7D&height=20&width=135)<br />所以![](https://cdn.nlark.com/yuque/__latex/aa3c0ae297a042f2a7aa006f87b782e0.svg#card=math&code=S_n%3D%5Cfrac%7B1-q%5E%7Bn%2B1%7D%7D%7B1-q%7D&height=39&width=96)<br />所以 (*) 式可以简化成：<br />![](https://cdn.nlark.com/yuque/__latex/3d43e2dcd01afc2ad830b07b818c4f5b.svg#card=math&code=A%281%2Bi%29%5En%3Da%5Cfrac%7B1-%281%2Bi%29%5E%7Bn%2B1%7D%7D%7B1-%281%2Bi%29%7D%3D-a%5Cfrac%7B1-%281%2Bi%29%5E%7Bn%2B1%7D%7D%7Bi%7D&height=42&width=319)\n<a name=\"Jwaxi\"></a>\n## 结论\n![](https://cdn.nlark.com/yuque/__latex/1843b02b8a3f5cc938864e85ca35c56a.svg#card=math&code=a%3D-%5Cfrac%7BAi%281%2Bi%29%5En%7D%7B1-%281%2Bi%29%5E%7Bn%2B1%7D%7D&height=41&width=134)\n"
  },
  {
    "id": 5682978,
    "title": "贷款计算：日利率换算年利率",
    "description": "从《贷款计算：月利率换年化利率》可得：此处为语雀文档，点击链接查看：https://www.yuque.com/tianjie-cjnre/sldmka/mmcpk3",
    "custom_description": null,
    "updated_at": "2020-03-29T07:48:29.000Z",
    "created_at": "2020-03-29T07:48:29.000Z",
    "slug": "bkco85",
    "word_count": 35,
    "cover": "https://cdn.nlark.com/yuque/__latex/ff5eec52246e8dd81f8ca120445c5665.svg#card=math&amp;code=r%3D%281%2Bi%29%5E%7B365%7D-1&amp;height=20&amp;width=112",
    "body": "从《贷款计算：月利率换年化利率》可得：<br />\n<br />\n<br />![](https://cdn.nlark.com/yuque/__latex/ff5eec52246e8dd81f8ca120445c5665.svg#card=math&code=r%3D%281%2Bi%29%5E%7B365%7D-1&height=20&width=112)<br />\n\n"
  },
  {
    "id": 5682755,
    "title": "贷款计算：月利率换年化利率",
    "description": "问题期初借入一笔钱，月利率为 i。问：其等价的年利率 r 是多少？分析为了简单起见，假设期初借入的是 1 块钱。这 1 块钱经过 12 个月，也就是一年后，变成了：即结论",
    "custom_description": null,
    "updated_at": "2020-03-29T07:44:36.000Z",
    "created_at": "2020-03-29T07:44:36.000Z",
    "slug": "mmcpk3",
    "word_count": 75,
    "cover": "https://cdn.nlark.com/yuque/__latex/c6b45ad2c83f284a7f60384216ace927.svg#card=math&amp;code=%281%2Bi%29%5E%7B12%7D&amp;height=20&amp;width=54",
    "body": "<a name=\"kLLiB\"></a>\n## 问题\n期初借入一笔钱，月利率为 i。问：其等价的年利率 r 是多少？\n<a name=\"VRN0F\"></a>\n## 分析\n为了简单起见，假设期初借入的是 1 块钱。<br />这 1 块钱经过 12 个月，也就是一年后，变成了：<br />![](https://cdn.nlark.com/yuque/__latex/c6b45ad2c83f284a7f60384216ace927.svg#card=math&code=%281%2Bi%29%5E%7B12%7D&height=20&width=54)<br />即<br />![](https://cdn.nlark.com/yuque/__latex/5a2387aa35446419a86b1adc36dc532e.svg#card=math&code=1%2Br%3D%281%2Bi%29%5E%7B12%7D&height=20&width=107)\n<a name=\"C7kAe\"></a>\n## 结论\n![](https://cdn.nlark.com/yuque/__latex/8cdf10b04dad6b8d2c66f2c4a183bc35.svg#card=math&code=r%3D%281%2Bi%29%5E%7B12%7D-1&height=20&width=107)\n"
  },
  {
    "id": 5139950,
    "title": "`Tex Workshop` vscode extension",
    "description": "I added a ​Layout Feature to the ​Latex Workshop and published it as ​Tex Workshop .Layout FeatureYou can create a `layout.tex` under the project r...",
    "custom_description": null,
    "updated_at": "2020-03-09T14:43:15.000Z",
    "created_at": "2020-03-09T14:43:15.000Z",
    "slug": "roa7f9",
    "word_count": 280,
    "cover": "https://cdn.nlark.com/yuque/0/2020/png/221736/1583764967869-6aecf62b-1c78-4de0-adca-18a4be0da51b.png",
    "body": "I added a `Layout Feature` to the `Latex Workshop` and published it as `Tex Workshop` .\n\n<a name=\"iYdKC\"></a>\n## Layout Feature\n\n---\n\n> You can create a `layout.tex` under the project root folder, and then reference it in other `tex` files.\n\n<a name=\"B1LfH\"></a>\n## Example\n<a name=\"g4nUM\"></a>\n### `layout.tex`  under project root:\n```latex\n\\documentclass{article}\n\\usepackage{xeCJK}\n\\usepackage{ctex}\n\\usepackage{float}\n\\usepackage{tikz}\n\\usetikzlibrary{automata,positioning}\n\\begin{document}\n{children}\n\\end{document}\n```\n\n<a name=\"qKmFB\"></a>\n### Reference it in other `tex` files using `% !layout`   \nSo you can focus on what you really care in the specific file, no need to write the header and footer again and again. Hooray!\n\n```latex\n% !layout\n\\begin{figure}[H]\n   \\centering\n   \\begin{tikzpicture}[>=stealth,\n   shorten >=1pt,\n   node distance=4cm,\n   on grid,\n   auto,\n   every state/.style={draw=black!60, fill=black!5, very thick}\n   ]\n   \\node[state] (mid)                  {U 公司};\n   \\node[state] (upper) [above=of mid] {产品 A};\n   \\node[state] (right) [right=of mid] {产品 B};\n   \\node[state] (lower) [left=of mid] {C};\n   \\node[state] (left) [below=of mid] {D};\n   \\path[->]\n   %   FROM       BEND/LOOP           POSITION OF LABEL   LABEL   TO\n   (mid) edge node {u.com/path-a} (upper)\n   (mid) edge node {u.com/path-b} (right)\n   (mid) edge node {u.com/path-c} (lower)\n   (mid) edge node {u.com/path-d} (left)\n   ;\n   \\end{tikzpicture}\n   \n   \\caption[xxx]{ yyy }\n\\end{figure}\n```\n<br />\n<a name=\"01C3t\"></a>\n### You get the preview right away\n![0720c0c9-17e1-463f-8430-537eff108f1e.png](https://cdn.nlark.com/yuque/0/2020/png/221736/1583764967869-6aecf62b-1c78-4de0-adca-18a4be0da51b.png#align=left&display=inline&height=1921&name=0720c0c9-17e1-463f-8430-537eff108f1e.png&originHeight=1921&originWidth=3000&size=612426&status=done&style=none&width=3000)\n"
  },
  {
    "id": 4810403,
    "title": "[Solved]`docker start` error:  copying bootstrap data to pipe caused \\\"write init-p: broken pipe\\\"",
    "description": "Symptonvagrant@vagrant-ubuntu-trusty-64:~$ docker start mongoDB Error response from daemon: OCI runtime create failed: container_linux.go:348: star...",
    "custom_description": null,
    "updated_at": "2020-02-27T05:27:23.000Z",
    "created_at": "2020-02-27T05:27:23.000Z",
    "slug": "nal6rz",
    "word_count": 430,
    "cover": null,
    "body": "<a name=\"QXbgh\"></a>\n## Sympton\n```shell\nvagrant@vagrant-ubuntu-trusty-64:~$ docker start mongoDB\nError response from daemon: OCI runtime create failed: container_linux.go:348: starting container process caused \"process_linux.go:297: copying bootstrap data to pipe caused \\\"write init-p: broken pipe\\\"\": unknown\n```\n\n<a name=\"Q4YxP\"></a>\n## Triage\n<a name=\"s7RJL\"></a>\n### System Info\n```shell\nvagrant ssh\nWelcome to Ubuntu 14.04.6 LTS (GNU/Linux 3.13.0-170-generic x86_64)\n\n * Documentation:  https://help.ubuntu.com/\n\n  System information as of Thu Feb 27 02:23:03 UTC 2020\n\n  System load:  0.0               Processes:              77\n  Usage of /:   5.1% of 39.34GB   Users logged in:        0\n  Memory usage: 21%               IP address for eth0:    10.0.2.15\n  Swap usage:   0%                IP address for docker0: 172.17.0.1\n\n  Graph this data and manage this system at:\n    https://landscape.canonical.com/\n\nNew release '16.04.6 LTS' available.\nRun 'do-release-upgrade' to upgrade to it.\n```\n<a name=\"qXNfz\"></a>\n### Docker Info\n```shell\nvagrant@vagrant-ubuntu-trusty-64:~$ docker version\nClient:\n Version:           18.06.3-ce\n API version:       1.38\n Go version:        go1.10.3\n Git commit:        d7080c1\n Built:             Wed Feb 20 02:27:13 2019\n OS/Arch:           linux/amd64\n Experimental:      false\n\nServer:\n Engine:\n  Version:          18.06.3-ce\n  API version:      1.38 (minimum version 1.12)\n  Go version:       go1.10.3\n  Git commit:       d7080c1\n  Built:            Wed Feb 20 02:25:38 2019\n  OS/Arch:          linux/amd64\n  Experimental:     false\n```\n\n<a name=\"obssS\"></a>\n### Cause\nTha version of docker and that version of ubuntu have some compatibility issues.\n\n<a name=\"yQa7Z\"></a>\n### Solution `apt install docker-ce=18.06.1~ce~3-0~ubuntu jq`\nDowngrade the docker, `apt install docker-ce=18.06.1~ce~3-0~ubuntu jq` comes to the rescue:\n```shell\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo apt install docker-ce=18.06.1~ce~3-0~ubuntu jq\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nRecommended packages:\n  aufs-tools cgroupfs-mount cgroup-lite git pigz\nThe following NEW packages will be installed:\n  jq\nThe following packages will be DOWNGRADED:\n  docker-ce\n0 upgraded, 1 newly installed, 1 downgraded, 0 to remove and 1 not upgraded.\nNeed to get 39.8 MB of archives.\nAfter this operation, 280 kB of additional disk space will be used.\nDo you want to continue? [Y/n] Y\nGet:1 https://download.docker.com/linux/ubuntu/ trusty/stable docker-ce amd64 18.06.1~ce~3-0~ubuntu [39.7 MB]\nGet:2 http://archive.ubuntu.com/ubuntu/ trusty-updates/universe jq amd64 1.3-1.1ubuntu1.1 [98.1 kB]\nFetched 39.8 MB in 56s (702 kB/s)\ndpkg: warning: downgrading docker-ce from 18.06.3~ce~3-0~ubuntu to 18.06.1~ce~3-0~ubuntu\n(Reading database ... 63463 files and directories currently installed.)\nPreparing to unpack .../docker-ce_18.06.1~ce~3-0~ubuntu_amd64.deb ...\ndocker stop/waiting\nUnpacking docker-ce (18.06.1~ce~3-0~ubuntu) over (18.06.3~ce~3-0~ubuntu) ...\nSelecting previously unselected package jq.\nPreparing to unpack .../jq_1.3-1.1ubuntu1.1_amd64.deb ...\nUnpacking jq (1.3-1.1ubuntu1.1) ...\nProcessing triggers for man-db (2.6.7.1-1ubuntu1) ...\nProcessing triggers for ureadahead (0.100.0-16) ...\nSetting up docker-ce (18.06.1~ce~3-0~ubuntu) ...\ndocker start/running, process 4075\nSetting up jq (1.3-1.1ubuntu1.1) ...\n```\n\n<a name=\"0momp\"></a>\n## Verification\n\n```shell\nvagrant@vagrant-ubuntu-trusty-64:~$ docker start mongoDB\nmongoDB\n\nvagrant@vagrant-ubuntu-trusty-64:~$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                      NAMES\ncfa48a8939cc        mongo:2             \"/entrypoint.sh mong…\"   3 hours ago         Up 9 minutes        0.0.0.0:27017->27017/tcp   mongoDB\n```\n\n"
  },
  {
    "id": 4592569,
    "title": "[Workaround] webpack error: Variable 'require' must be of type 'Require', but here has type 'NodeRequire'.",
    "description": "Sympton:TypeScript Webpack Project with ​StoryBook enabled, when running ​npm run storybook the following error occurs:ERROR in [at-loader] ./node_...",
    "custom_description": null,
    "updated_at": "2020-02-18T03:53:17.000Z",
    "created_at": "2020-02-18T03:53:17.000Z",
    "slug": "ze4cvy",
    "word_count": 102,
    "cover": null,
    "body": "<a name=\"4BrLg\"></a>\n## Sympton:\nTypeScript Webpack Project with `StoryBook` enabled, when running `npm run storybook` the following error occurs:\n\n```powershell\nERROR in [at-loader] ./node_modules/@types/webpack-env/index.d.ts:283:13\n    TS2403: Subsequent variable declarations must have the same type.  Variable 'require' must be of type 'Require', but here has type 'NodeRequire'.\n```\n\n<a name=\"7BL8n\"></a>\n## Workaround:\nJust delete the shit `webpack-env` manually:\n\n```powershell\nrmdir /s node_modules\\@types\\webpack-env\n```\n\n<a name=\"u105A\"></a>\n## Caveats:\nIt will still reappear if you run `npm i` in the future. You need to redelete that folder again.\n"
  },
  {
    "id": 4454559,
    "title": "在 Windows 上运行 shell docker 脚本",
    "description": "问题：在 macOS 编写的一些操作 docker 的脚本，想要不用修改，直接在 Windows cmd 上运行。解决方案：安装 bash scoop install bash bash -c \\\"export DOCKER_HOST='tcp://0.0.0.0:2375'&&your-sc...",
    "custom_description": null,
    "updated_at": "2020-02-11T05:03:54.000Z",
    "created_at": "2020-02-11T05:03:54.000Z",
    "slug": "sgx82e",
    "word_count": 192,
    "cover": null,
    "body": "<a name=\"VptY4\"></a>\n## 问题：\n在 `macOS` 编写的一些操作 `docker` 的脚本，想要不用修改，直接在 `Windows cmd` 上运行。\n<a name=\"kw39O\"></a>\n## 解决方案：\n\n- 安装 `bash` \n   - `scoop install bash` \n- `bash -c \\\"export DOCKER_HOST='tcp://0.0.0.0:2375'&&your-script.sh\\\"` \n<a name=\"aZeus\"></a>\n## 说明：\n其中 `export DOCKER_HOST='tcp://0.0.0.0:2375'` 很关键，不然会报错：\n\n```powershell\n\nCannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\nCannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\nlocal-mysql is already killed\nCannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\nlocal-mysql not exist\ndocker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?.\nSee 'docker run --help'.\n```\n\n"
  },
  {
    "id": 3252828,
    "title": "什么是闭包？",
    "description": "闭包就是一个不会瘪掉的气球。或者说是一种特殊气球运用的一种手段，使得它自己不会瘪下去。JavaScript 的世界，就是一个气球世界。在一个运行着的 JavaScript 程序里，不断有气球被吹起来，又瘪下去。（就像三体人，会脱水，又能吸水复活）你大概知道，JavaScript 里函数是一等公...",
    "custom_description": null,
    "updated_at": "2019-11-19T05:09:35.000Z",
    "created_at": "2019-11-19T03:53:42.000Z",
    "slug": "kdmpa6",
    "word_count": 1338,
    "cover": null,
    "body": "闭包就是一个不会瘪掉的气球。或者说是一种特殊气球运用的一种手段，使得它自己不会瘪下去。\n\nJavaScript 的世界，就是一个气球世界。在一个运行着的 JavaScript 程序里，不断有气球被吹起来，又瘪下去。（就像三体人，会脱水，又能吸水复活）\n\n你大概知道，JavaScript 里函数是一等公民。一般来说，当函数开始执行，你就会看到一个气球被吹起来了。当函数执行完毕，气球就瘪下去了。\n\n```javascript\nfunction bubble() {\n  const hello = '气球这时被吹起来了';\n  \n  return hello;\n  \n  // 这时气球即将瘪下去\n}\n\nbubble()\nbubble()\n```\n\n这个气球，就是 JavaScript 的作用域。气球里，基本上装的就是变量。如果一个函数里变量很多，每个变量存的数据很多，当函数执行时，这个气球就会被吹得很大。\n\n但无论这个气球被吹得多大，当函数执行完毕，其中的变量会被垃圾回收程序回收掉，于是这个气球就瘪掉了。\n\n你应该知道，垃圾回收时，是看它被引用的计数是多少，一旦引用计数是 0，就会被回收掉。一般气球里的变量，也就是函数内定义的变量，只在函数里被引用，所以当函数执行完毕，引用计数就为 0 了。所有的变量都被回收，气球也就破灭了。（如果你看过《寻梦环游记》这部电影，可以好好回味一下它的主题曲《Remember me》：阴间的亡灵都有一个引用记数，即被多少阳间的人记着。一旦阳间所有人都忘记了那个亡灵，那么它就真正地永远消逝了。）\n\n前面说的都是一般的函数，或者说一般的气球。还有另一种函数：高阶函数，即返回函数的函数。这种函数，也就是气球，一旦吹起来，就不会瘪下去（除非程序中止）：\n\n```javascript\nfunction outerBubble() {\n  const hello = '气球被吹起来';\n  \n  return function innerBuble() {\n    const world = '小气球被吹起来'\n    \n    return hello;\n    // world 即将死去，小气球会瘪下去\n  }\n  // 这时小气球瘪了，但是外面的大气球却不会瘪：hello 还活着\n}\n\nconst bubble = outerBubble();\nbubble();\nbubble();\n```\n\n这里注意：函数最终都是要返回一个值的。即使没有 return 语句，也是返回了一个 undefined。高阶函数很特殊，它返回了一个函数：也就是它吐出了另一个气球。\n\n一般的气球（一阶函数）吐出的是一个普通的值，外界拿到了这个值，就把气球放气了，因为暂时不需要了，目的已经达到。但是要注意，气球瘪下去，只是消灭了气球内部的变量，而气球本身还在，可以随时被再吹起来。只是再吹起来时，里面的变量都是重新生成的，之前死去的变量，是真正的死去了，就像人生轮回一样，那些变量既不知道它的前世，也无法控制它的来世。只是冥冥之中，它们是“同一个”变量。\n\n高阶函数就狡猾了，它不直接吐出这个要命的值，而是把这个值，用另一个气球包起来后，再吐出去。这时外界收到另一个气球（尽管是瘪着的状态），就不敢把原来的气球放气压瘪，也就是原来的气球里的变量（只要被包在了新的气球里），就不会死亡。外界（程序）要拿到那个最终的值，需要执行那个被返回的函数，也就是需要吹起那个被吐出来的气球。尽管拿到那个值后，会把被吐出来的气球放气、压瘪，但不能保证后面它还会被吹起来，所以原来的气球里的那个被直接或者间接包起来的变量，其引用计数就一直大于 0，垃圾回收程序看到它都会绕着走。\n\n就这样，通过吐出另外一个气泡的小把戏，这个高阶函数就能一直处于充气的状态。尽管，它可能不会把所有的变量都包在另外的气球里，所以它执行完可能体积会变小一些，但不会被完全压瘪：有那些它想保护起来的变量（们）撑着呢。\n\n这种耍小把戏的高阶函数，就是闭包函数。这种小把戏的名字，就叫闭包：因为它吐出（返回）前，将一些东西包了起来。\n"
  },
  {
    "id": 3077762,
    "title": "Taro 项目的 Docker 化开发",
    "description": "这里有一个完整的示例：https://github.com/Jeff-Tian/me。它不仅实现了本地 Docker 化开发，还利用 Travis CI （https://travis-ci.com/Jeff-Tian/me）在每次提交代码后自动打包新的镜像并推送至 Docker Hub。步骤...",
    "custom_description": null,
    "updated_at": "2019-11-04T12:53:00.000Z",
    "created_at": "2019-11-04T12:53:00.000Z",
    "slug": "wrorcm",
    "word_count": 234,
    "cover": null,
    "body": "这里有一个完整的示例：[https://github.com/Jeff-Tian/me](https://github.com/Jeff-Tian/me)。它不仅实现了本地 Docker 化开发，还利用 Travis CI （[https://travis-ci.com/Jeff-Tian/me](https://travis-ci.com/Jeff-Tian/me)）在每次提交代码后自动打包新的镜像并推送至 Docker Hub。\n<a name=\"K0bfa\"></a>\n## 步骤\n<a name=\"7UkSI\"></a>\n### 1. 在项目里添加 `Dockerfile` \n```dockerfile\nFROM node:10\n\nWORKDIR /usr/src/app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 10086\n\nCMD [\"npm\", \"run\", \"dev:h5\"]\n```\n\n<a name=\"mu11B\"></a>\n### 2. 再添加一个 `.dockerignore` 文件\n```\nnode_modules\nnpm-debug.log\n.git\n```\n<a name=\"sRUSs\"></a>\n### \n<a name=\"lm7Fu\"></a>\n### 3. 集成到 Travis CI 步骤里\n需要在 Travis CI 项目的设置里，添加 `DOCKER_USERNAME` 和 `DOCKER_PASSWORD` 两个环境变量。然后在 `.travis.yml` 文件里添加如下内容：\n\n```yaml\nservices:\n  - docker\n\ninstall:\n  - echo \"$DOCKER_PASSWORD\" | docker login -u \"$DOCKER_USERNAME\" --password-stdin\n\nscript:\n  - docker build -t \"$DOCKER_USERNAME\"/me .\n  - docker images\n  - docker run -d -p 127.0.0.1:10086:10086 --name me \"$DOCKER_USERNAME\"/me\n  - docker ps | grep -q me\n  - docker push \"$DOCKER_USERNAME\"/me\n\n```\n\n完成。\n"
  },
  {
    "id": 3056241,
    "title": "Coding.Net + 阿里云 npm 模块仓库 自动化发包",
    "description": "让一切自动化，干掉所有人肉操作。对于 npm 包的作者来说，利用 semantic-release 就能解放双手，只需要提交代码，让发包自动进行。如果代码托管在 GitHub 上，而且 npm 包最后是要发布到官方仓库里的话，那么可以配合 TravisCI 来完成。这样就非常简单，只需要运行一...",
    "custom_description": null,
    "updated_at": "2019-11-04T04:05:42.000Z",
    "created_at": "2019-11-02T09:47:00.000Z",
    "slug": "eoqqzc",
    "word_count": 837,
    "cover": null,
    "body": "让一切自动化，干掉所有人肉操作。对于 npm 包的作者来说，利用 semantic-release 就能解放双手，只需要提交代码，让发包自动进行。<br />如果代码托管在 GitHub 上，而且 npm 包最后是要发布到官方仓库里的话，那么可以配合 TravisCI 来完成。这样就非常简单，只需要运行一下：\n```bash\nsemantic-release-cli setup \n```\n就能自动完成相关的配置（GitHub 和 TravisCI 的 token 创建等等），而你只需要在项目里添加一个 `.travis.yml` 文件即可。具体实例可见：[https://github.com/Jeff-Tian/wechat-oauth-ts](https://github.com/Jeff-Tian/wechat-oauth-ts)\n\n但是对于其他代码托管服务，或者是将包发布到自己的模块仓库，就没这么方便了。不过虽然用不了 `semantic-release-cli` ，但是 `semantic-release` 本身还是可以用的。<br />这里给一个具体的例子，代码托管在 Coding.Net 上，模块仓库在阿里云，利用 Jenkinsfile 来完成自动化。\n<a name=\"q1klK\"></a>\n## 在 `package.json` 里添加 `semantic-release` 相关依赖\n\n```json\n{\n  ...\n  \"devDependencies\": {\n    ...\n    \"@semantic-release/npm\": \"^5.3.1\",\n    \"semantic-release\": \"^15.13.28\"\n  }\n  ...\n}\n```\n\n<a name=\"Aalmy\"></a>\n## 在项目中添加 `.releaserc` \n\n```json\n{\n    \"branch\": \"master\",\n    \"repositoryUrl\": \"git@e.coding.net:xxx/yyy.git\",\n    \"plugins\": [\n        [\"@semantic-release/npm\", {\n          \"npmPublish\": true\n        }]\n    ]\n}\n\n```\n\n<a name=\"z7f5L\"></a>\n## 在项目中创建 Jenkinsfile\n\n```groovy\npipeline {\n    agent any\n    stages  {\n\n        stage(\"检出\") {\n            steps {\n                checkout(\n                    [$class: 'GitSCM', branches: [[name: env.GIT_BUILD_REF]],\n                    userRemoteConfigs: [[url: env.GIT_REPO_URL, credentialsId: env.CREDENTIALS_ID]]]\n                )\n            }\n        }\n\n        stage(\"安装\") {\n            steps {\n                echo \"构建中...\"\n                sh 'docker version'\n                sh 'npm i'\n                sh 'npm rebuild'\n                echo \"构建完成.\"\n            }\n        }\n\n        stage(\"测试\") {\n            steps {\n                echo \"单元测试中...\"\n                // 请在这里放置您项目代码的单元测试调用过程，例如:\n                // sh 'mvn test' // mvn 示例\n                // sh 'make test' // make 示例\n                sh 'npm test'\n                echo \"单元测试完成.\"\n            }\n        }\n\n        stage('发包') {\n            steps {\n                sh 'echo \"registry=https://registry-node.aliyun.com/org/xxx/registry/yyy/\" >> .npmrc'\n                sh 'echo \"//registry-node.aliyun.com/org/xxx/registry/yyy/:_password=${npm_password}\" >> .npmrc'\n                sh 'echo \"//registry-node.aliyun.com/org/xxx/registry/yyy/:username=${npm_username}\" >> .npmrc'\n                sh 'echo \"//registry-node.aliyun.com/org/xxx/registry/yyy/:email=${npm_email}\" >> .npmrc'\n                sh 'echo \"//registry-node.aliyun.com/org/xxx/registry/yyy/:always-auth=false\" >> .npmrc'\n                sh 'echo \"grpc_node_binary_host_mirror=https://npm.taobao.org/mirrors\" >> .npmrc'\n                sh 'NODE_ENV=production npm run build'\n                sh 'npx semantic-release --debug --no-dry-run --no-ci --unsafe-perm'\n            }\n        }\n    }\n    environment {\n        GIT_CREDENTIALS = \"your-coding-user-name:${coding_token}\"\n        NPM_CONFIG_REGISTRY = 'https://registry-node.aliyun.com/org/xxx/registry/yyy/'\n    }\n}\n\n```\n\n<a name=\"fNUAB\"></a>\n## 创建 Coding.Net 访问令牌\n这是用来让 Jenkinsfile 读取代码用的，后面会通过环境变量形式注入到 Jenksinfile：<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/221736/1572687439407-f9fb1bbd-cef9-491c-ade4-e178c7f4f989.png#align=left&display=inline&height=454&name=image.png&originHeight=454&originWidth=1405&size=73547&status=done&width=1405)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/221736/1572687503404-3999556f-ca3e-4948-8192-afb46de6298d.png#align=left&display=inline&height=739&name=image.png&originHeight=739&originWidth=982&size=119454&status=done&width=982)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/221736/1572687576248-b4f38a02-7bea-4fa1-9d3e-9e00e6a5ecc4.png#align=left&display=inline&height=317&name=image.png&originHeight=317&originWidth=1010&size=38903&status=done&width=1010)<br />将访问令牌复制下来。一旦你关闭这个页面就再也看不到明文令牌了，如果你没有及时复制就关闭了，可以重新再创建一个。\n<a name=\"l0O0V\"></a>\n## 配置 Coding.Net 持续集成 Jobs\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/221736/1572686929793-d24761b6-0877-4777-b513-1841b3495c12.png#align=left&display=inline&height=649&name=image.png&originHeight=649&originWidth=1304&size=111455&status=done&width=1304)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/221736/1572686986748-42d0c8d3-0390-44ff-b061-943960070b04.png#align=left&display=inline&height=777&name=image.png&originHeight=777&originWidth=674&size=90166&status=done&width=674)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/221736/1572687174070-dfa8a5ef-69be-4a00-9845-e5d294e6e443.png#align=left&display=inline&height=753&name=image.png&originHeight=753&originWidth=1098&size=151924&status=done&width=1098)<br />注意，在最后一步需要用相关的环境变量形式把阿里 npm 模块仓库的认证信息填写上去：<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/221736/1572687679938-b9b9be3a-a0f1-4407-b550-5b4c3c593847.png#align=left&display=inline&height=633&name=image.png&originHeight=633&originWidth=767&size=78493&status=done&width=767)\n<a name=\"Bf1XI\"></a>\n## 配置完成，手动触发第一次构建吧：\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/221736/1572687751922-783f16b8-a48c-4d68-8f8f-11894bd5b097.png#align=left&display=inline&height=216&name=image.png&originHeight=216&originWidth=1048&size=13349&status=done&width=1048)![image.png](https://cdn.nlark.com/yuque/0/2019/png/221736/1572687808005-084619d4-6d2c-4ebb-995b-4e24fe313fdf.png#align=left&display=inline&height=445&name=image.png&originHeight=445&originWidth=571&size=23110&status=done&width=571)\n<a name=\"JH48Z\"></a>\n## 后续自动发布\n只要代码提交，都会触发一次构建。但是会不会发布新的版本，就看提交历史是怎么写的了：<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/221736/1572687928708-8e2e43c1-f4fe-4c6a-9091-edcb90af0944.png#align=left&display=inline&height=571&name=image.png&originHeight=571&originWidth=1294&size=95624&status=done&width=1294)<br />如果有新的版本发布成功，就会自动同步一个版本号到代码版本的标签栏中：<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/221736/1572688002959-5441d639-dd18-4fa1-ab13-0c302b5004e0.png#align=left&display=inline&height=633&name=image.png&originHeight=633&originWidth=1529&size=140716&status=done&width=1529)\n\n\n"
  },
  {
    "id": 3055523,
    "title": "纯 webpack 项目，配置 mock 模式",
    "description": "如《前端开发的正确姿势》所述，前后端分离开发，并行任务时，前端需要使用到 mock 模式。如果使用 umi 项目，自带 mock 模式；这篇文章给出一个非 umi 项目的纯 webpack 例子，说明如何进行 mock 模式配置。同《前端开发的正确姿势》所述，这里也要用到 devServer ...",
    "custom_description": null,
    "updated_at": "2021-02-17T06:23:23.000Z",
    "created_at": "2019-11-02T07:45:29.000Z",
    "slug": "shmd9d",
    "word_count": 246,
    "cover": null,
    "body": "如《[前端开发的正确姿势](https://www.yuque.com/tianjie-cjnre/sldmka/xo3zza)》所述，前后端分离开发，并行任务时，前端需要使用到 mock 模式。<br />如果使用 umi 项目，自带 mock 模式；这篇文章给出一个非 umi 项目的纯 webpack 例子，说明如何进行 mock 模式配置。<br />同《[前端开发的正确姿势](https://www.yuque.com/tianjie-cjnre/sldmka/xo3zza)》所述，这里也要用到 devServer 配置，具体来说，在 setup 里配置 mock 返回的数据，再通过一个 proxy 来实现在 mock 模式下向 mock 接口发起请求：<br />\n\n```javascript\n  devServer: {\n    setup: app => {\n      app.get('/api/*', (req, res) => {\n        setTimeout(() => {\n          res.json({ custom: 'mock response' });\n        }, 3000);\n      });\n    },\n    proxy: process.env.MOCK ? {\n      '/api': {\n        target: 'http://localhost:3333/api',\n        changeOrigin: true\n      }\n    }/* mock 模式 */ : {\n      '/api': {\n        target: 'https://dev.example.com',\n        changeOrigin: true,\n        withCredentials: true,\n        headers: {\n          Cookie: ''\n        }\n      }\n    } /* dev 模式 */\n  }\n```\n\n\n"
  },
  {
    "id": 2608139,
    "title": "前端开发的正确姿势",
    "description": "背景：前后端分离开发，好处是关注点分离，以及并行开发提高效率。实际工作中碰到的问题：并行不起来，前端依赖接口，在接口没好时，不会进行开发。在接口没好时，写死一些数据开发页面，接口好了后，对接起来要改大量代码，效率低下解决方案：引入两种开发模式，而且通过良好的配置，使得在这两种开发模式可以自由切...",
    "custom_description": null,
    "updated_at": "2019-09-12T13:48:52.000Z",
    "created_at": "2019-09-12T13:48:52.000Z",
    "slug": "xo3zza",
    "word_count": 592,
    "cover": null,
    "body": "<a name=\"YFPKE\"></a>\n## 背景：\n前后端分离开发，好处是关注点分离，以及并行开发提高效率。\n<a name=\"QBSHe\"></a>\n## 实际工作中碰到的问题：\n\n- 并行不起来，前端依赖接口，在接口没好时，不会进行开发。\n- 在接口没好时，写死一些数据开发页面，接口好了后，对接起来要改大量代码，效率低下\n<a name=\"aKg2y\"></a>\n## 解决方案：\n引入两种开发模式，而且通过良好的配置，使得在这两种开发模式可以自由切换，不用更改任何代码。\n\n- 第一步：**mock** 模式下开发（ `npm run mock` ）：在接口没好时，使用 mock 模式开发。注意，mock 与直接页面写死数据不同，mock 是模拟接口返回的数据，至于请求接口这些代码仍然要写，而且当接口好了之后，切换到请求真实接口，不需要改动任何代码\n- 第二步：**代理**模式下开发（ `npm run proxy` ）：在接口完成后，使用 代理 模式开发。注意，代理模式是从本地直接请求真实接口，这与运行时的请求真实接口不同，因为运行时的域名不会是 localhost。\n\n项目发布后，是运行模式，这与以上两种模式都是有区别的。\n<a name=\"jbeCt\"></a>\n## 示例：\n以 umi 项目为例，在 `package.json` 里加上两个 `scripts` :\n```json\n{\n  ...\n  \"scripts\": {\n    \"mock\": \"umi dev\",\n    \"proxy\": \"UMI_ENV=dev MOCK=none umi dev\"\n  }\n  ...\n}\n```\n可以看出， `umi` 项目自动开启 `mock` 开发模式，具体可以参考 `umi` 项目的 `mock` 配置。对于其他非 `umi` 项目，也可以自行配置。<br />而对于 `proxy` 模式，则需要本地通过 `localhost` 服务器代码去访问真实接口给前端用，这样才不会有跨域等问题。这个一般 `webpack` 项目都可以很简单地配置出来，如下：\n```json\nproxy: {\n\t'/api': {\n    target: 'https://your.domain.com/api',\n    changeOrigin: true,\n    pathRewrite: {'^/api': ''}\n  }\n}\n```\n前端请求接口的代码如下：\n```typescript\nfetch(`/api/xxx`, ...)\n```\n注意，通过以上配置后，无论是 `mock` 开发模式，还是 `proxy` 模式，还是运行时模式，前端请求接口的代码都不用变。<br />如果涉及到接口需要用户登录的场景，那么以上 `proxy` 配置改成这样即可：\n\n```json\nproxy: {\n\t'/api': {\n    target: 'https://your.domain.com/api',\n    changeOrigin: true,\n    pathRewrite: {'^/api': ''},\n    withCredentials: true,\n    headers: { Cookie: 'YourToken=9fk_i8oJE5xoqSvi4DS9RhDZARMskBLc-pD0oHDPK0r' },\n  }\n}\n```\n\n"
  }
]