{"version":3,"file":"component---src-templates-home-js-77274099f9c9645a6440.js","mappings":"u4DAWO,IA8BcA,EAAAA,SAAAA,I,qRAAAA,CAAAA,EAAAA,GAAAA,I,MAAAA,EAAAA,EAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAgDhB,O,EAhDgBA,G,EAAAA,CAAAA,CAAAA,IAAAA,SAAAA,MACjB,WAAU,IAAD,OACCC,EAAQC,KAAKC,MAAMC,KAAKC,kBAAkBC,MAEhD,OACI,gBAAC,KAAWJ,KAAKC,MACb,gBAAC,IAAD,KAAYD,KAAKC,MAAjB,CAAwBI,KAAML,KAAKC,MAAMK,YAAYD,KAAME,KAAMP,KAAKC,MAAMK,YACpEE,MAAO,IAAMR,KAAKC,MAAO,sDAAuD,SACxF,uBAAKQ,GAAG,UAAUC,UAAU,gBACxB,wBAAMD,GAAG,OAAOC,UAAU,mBACtB,uBAAKA,UAAU,aACV,IAAMX,GAAO,WAAeY,GAAf,IAAQC,EAAR,EAAEC,KAAF,OACV,2BAASC,IAAKH,EAAUD,UAAU,QAC9B,0BAAQA,UAAU,eACd,sBAAIA,UAAU,cAAa,gBAAC,KAAD,CAAMK,IAAIC,EAAAA,EAAAA,IAAW,IAAMJ,EAAM,gCAAiC,OAC5DK,IAAI,YAAY,IAAML,EAAM,oBAAqB,QAElF,uBAAKF,UAAU,aAAf,gBACiB,wBAAMA,UAAU,YACVQ,SAAUC,GAAAA,CAAO,IAAMP,EAAM,mBAAoB,OAAOQ,SAAS,mBAAoBD,GAAAA,CAAO,IAAMP,EAAM,mBAAoB,OAAOQ,SAAS,gBAGtK,IAAMR,EAAM,6BAA8B,OACvC,gBAAC,KAAD,CAAMF,UAAU,iBAAiBK,IAAIC,EAAAA,EAAAA,IAAW,IAAMJ,EAAM,MAAO,QAC/D,uBAAKF,UAAU,YACVW,KAAKL,EAAAA,EAAAA,IAAW,IAAMJ,EAAM,6BAA8B,OAC1DU,IAAK,IAAMV,EAAM,oBAAqB,SAGnD,uBAAKF,UAAU,gBACX,yBAAI,IAAME,EAAM,sBAAuB,SAE6B,IAArE,IAAM,EAAKX,MAAO,wCAAyC,OAAmB,IAAM,EAAKA,MAAO,yCAA0C,OACzI,qBAAGS,UAAU,aACT,gBAAC,KAAD,CAAMA,UAAU,iBACVK,IAAIC,EAAAA,EAAAA,IAAW,IAAMJ,EAAM,gCAAiC,QAAS,IAAM,EAAKX,MAAO,yCAA0C,MACnI,wBAAMS,UAAU,mBAAmB,cAAY,iBAO3E,gBAAC,IAAD,KAAYV,KAAKC,MAAjB,CAAwBI,KAAML,KAAKC,MAAMK,YAAYD,KAAME,KAAMP,KAAKC,MAAMK,YACpEE,MAAO,IAAMR,KAAKC,MAAO,sDAAuD,gB,8EAIvG,EAhDgBH,CAAayB,EAAAA","sources":["webpack://@jeff-tian/space/./src/templates/home.js"],"sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport moment from 'moment-strftime';\nimport {graphql} from 'gatsby';\nimport Header from '../components/Header';\nimport {Link, withPrefix} from '../utils';\nimport Footer from '../components/Footer';\nimport {Layout} from \"../components\";\n\n// this minimal GraphQL query ensures that when 'gatsby develop' is running,\n// any changes to content files are reflected in browser\nexport const query = graphql`\n    query blogListQuery($skip: Int!, $limit: Int!) {\n        allMarkdownRemark(\n            sort: { fields: [frontmatter___date], order: DESC }\n            limit: $limit\n            skip: $skip\n            filter: {frontmatter: {template: {eq: \"post\"}}}\n        ) {\n            edges {\n              node {\n                excerpt\n                id\n                frontmatter {\n                  title\n                  template\n                  has_more_link\n                  more_link_text\n                  excerpt\n                  canonical_url\n                  date\n                  img_path\n                  positive_reactions_count\n                  stackbit_url_path\n                }\n              }\n            }\n        }\n    }\n`;\n\nexport default class Home extends React.Component {\n    render() {\n        const posts = this.props.data.allMarkdownRemark.edges\n\n        return (\n            <Layout {...this.props}>\n                <Header {...this.props} site={this.props.pageContext.site} page={this.props.pageContext}\n                        image={_.get(this.props, 'pageContext.site.siteMetadata.header.background_img', null)}/>\n                <div id=\"content\" className=\"site-content\">\n                    <main id=\"main\" className=\"site-main inner\">\n                        <div className=\"post-feed\">\n                            {_.map(posts, ({node: post}, post_idx) => (\n                                <article key={post_idx} className=\"post\">\n                                    <header className=\"post-header\">\n                                        <h2 className=\"post-title\"><Link to={withPrefix(_.get(post, 'frontmatter.stackbit_url_path', null))}\n                                                                         rel=\"bookmark\">{_.get(post, 'frontmatter.title', null)}</Link>\n                                        </h2>\n                                        <div className=\"post-meta\">\n                                            Published on <time className=\"published\"\n                                                               dateTime={moment(_.get(post, 'frontmatter.date', null)).strftime('%Y-%m-%d %H:%M')}>{moment(_.get(post, 'frontmatter.date', null)).strftime('%B %d, %Y')}</time>\n                                        </div>\n                                    </header>\n                                    {_.get(post, 'frontmatter.thumb_img_path', null) && (\n                                        <Link className=\"post-thumbnail\" to={withPrefix(_.get(post, 'url', null))}>\n                                            <img className=\"thumbnail\"\n                                                 src={withPrefix(_.get(post, 'frontmatter.thumb_img_path', null))}\n                                                 alt={_.get(post, 'frontmatter.title', null)}/>\n                                        </Link>\n                                    )}\n                                    <div className=\"post-content\">\n                                        <p>{_.get(post, 'frontmatter.excerpt', null)}</p>\n                                    </div>\n                                    {((_.get(this.props, 'pageContext.frontmatter.has_more_link', null) === true) && _.get(this.props, 'pageContext.frontmatter.more_link_text', null)) && (\n                                        <p className=\"read-more\">\n                                            <Link className=\"read-more-link\"\n                                                  to={withPrefix(_.get(post, 'frontmatter.stackbit_url_path', null))}>{_.get(this.props, 'pageContext.frontmatter.more_link_text', null)}\n                                                <span className=\"icon-arrow-right\" aria-hidden=\"true\"/></Link>\n                                        </p>\n                                    )}\n                                </article>\n                            ))}\n                        </div>\n                    </main>\n                    <Footer {...this.props} site={this.props.pageContext.site} page={this.props.pageContext}\n                            image={_.get(this.props, 'pageContext.site.siteMetadata.header.background_img', null)}/>\n                </div>\n            </Layout>\n        );\n    }\n}\n"],"names":["Home","posts","this","props","data","allMarkdownRemark","edges","site","pageContext","page","image","id","className","post_idx","post","node","key","to","withPrefix","rel","dateTime","moment","strftime","src","alt","React"],"sourceRoot":""}