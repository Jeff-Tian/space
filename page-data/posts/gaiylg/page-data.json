{"componentChunkName":"component---src-templates-post-js","path":"/posts/gaiylg","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/gaiylg","relativePath":"posts/gaiylg","frontmatter":{"title":"Free Arch：给 GraphQL 增加 CDN 缓存","stackbit_url_path":"posts/gaiylg","date":"2021-10-20T12:32:47","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<blockquote>\n<p><strong>FBI 警告</strong>：这是一篇极具参考价值的文章，它利用免费架构，将 GraphQL 请求响应加快到令人发指的程度，而且具有一个反常的特性，那就是访问越频繁，流量分布越宽广，其整体性能越好。</p>\n</blockquote>\n<p><a name=SJZ68></a></p>\n<h1></h1>\n<p><a name=tjdwW></a></p>\n<h1>极具参考价值</h1>\n<p>因为网上的文档极少或者完全没有，而仅存的少量文档在关键部分却一笔带过，含糊其辞，对于我这样的小白极不友好！</p>\n<p><a name=AUwTD></a></p>\n<h1>免费架构的反常特性</h1>\n<p>一般的应用服务，访问量一大，其性能急剧下降。这是因为一般的应用，使用了服务器，不仅昂贵，而且扛不住大流量。免费架构其实就是利用了 CDN，而这个反常特性，其实是 CDN 的正常特性。</p>\n<p><a name=RMvIw></a></p>\n<h1>问题背景</h1>\n<p>前面几篇文章都是针对万能 BFF，其中的一能，就是利用 gatsby-source-yuque 插件，将语雀文章 GraphQL 服务化。但是这个插件的实现是非常简单粗暴的，即一篇一篇下载语雀文章，并保存为一个 json 文件。由于它的本来目的是服务于静态站点的生成，即只在站点构建阶段运行，实际运行时是很快的。当新增语雀文章时，通过 webhook 触发站点重新构建，生成全新的站点，所以简单粗暴的实现并没有问题。</p>\n<p>但是万能 BFF 把它的使用场景扩大了，比如给小程序提供服务。由于小程序需要审核，不像 Web 站点发布那般自由，于是需要将这个服务动态化，从而在不需要发布新的小程序的前提下，也能在小程序里看到最新的文章。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1634728580825-cf0316e5-a68c-4b54-a07b-d10b041e2b68.png#clientId=ubff064c0-24cb-4&#x26;from=ui&#x26;id=u38877d98&#x26;margin=%5Bobject%20Object%5D&#x26;name=%E6%89%AB%E7%A0%81_%E6%90%9C%E7%B4%A2%E8%81%94%E5%90%88%E4%BC%A0%E6%92%AD%E6%A0%B7%E5%BC%8F-%E5%BE%AE%E4%BF%A1%E6%A0%87%E5%87%86%E7%BB%BF%E7%89%88.png&#x26;originHeight=800&#x26;originWidth=2172&#x26;originalType=binary%E2%88%B6=1&#x26;size=6950538&#x26;status=done&#x26;style=none&#x26;taskId=u43c0efe0-30cb-4fa0-a791-e0a2b9baf19\" alt=\"扫码_搜索联合传播样式-微信标准绿版.png\"></p>\n<p>免费架构薅了 AWS Lambda 的羊毛，将万能 BFF 部署在 AWS lambda 上，于是让原本就慢的服务雪上加霜，因为 lambda 的冷启动本身就很耗时。另外因为小程序需要连接备案域名的问题，采用了代理服务绕过，而这个代理服务也是免费的 Heroku 服务，也存在冷启动问题，因此是<strong>三慢合一</strong>！</p>\n<p><a name=Xo87b></a></p>\n<h1>免费架构的问题解决思路</h1>\n<p>如果说优化 gatsby-source-yuque 插件，让其性能提升，是有很多办法的，比如存数据库，增量拉取更新、用 Redis 做一层缓存等等。</p>\n<p>但这都不是免费架构的问题解决思路。</p>\n<blockquote>\n<p><strong>FBI 警告</strong>：什么是架构？如果通过代码优化提升系统性能，可能会遮盖架构的光辉。好的架构，就是在烂代码的前提下，提升系统的整体表现。</p>\n</blockquote>\n<p>再说，数据库、Redis 等等资源成本是我等穷困程序员所不能接受的，更别提开发成本了。</p>\n<p>免费架构准备绕过所有后端优化，直接将 GraphQL 响应放在 CDN 边缘节点上，不仅节省了后端资源成本，而且其性能也是秒杀所有后端优化方案。</p>\n<p><a name=N0zKb></a></p>\n<h1>免费架构的实现细节</h1>\n<p>利用 Cloudflare 的全球 CDN 网络，加上其页面规则，在 GraphQL 服务被第一次请求时被缓存在离用户最近的边缘服务器，从而使该用户周围的用户收益，在发起请求时直接从边缘节点获取到响应，实现页面秒开效果。当有新的语雀文章更新时，可以利用 Cloudflare 的 API 删除缓存。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1634729354203-68c5682b-23a9-491f-9d76-ecd21b013eb7.png#clientId=ubff064c0-24cb-4&#x26;from=paste&#x26;id=u607457ce&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=150&#x26;originWidth=240&#x26;originalType=binary%E2%88%B6=1&#x26;size=16526&#x26;status=done&#x26;style=none&#x26;taskId=u2f7fa6bd-367b-42db-80ec-0f81f371d63\" alt=\"image.png\">\n<a name=f9yPO></a></p>\n<h1>免费架构的缺点</h1>\n<p><a name=gUkKe></a></p>\n<h2>仍需少量开发</h2>\n<p>后面的详细步骤会讲解</p>\n<p><a name=t6HGC></a></p>\n<h2>不解决第一次请求速度问题</h2>\n<p>第一次请求会很慢，这只能通过后端代码优化解决。</p>\n<blockquote>\n<p><strong>FBI 警告</strong>：如果你打开“哈德韦”小程序，碰到了十几秒才看到文章的话，那么我感谢你，因为你的宝贵时间没有浪费，提高了你周围很多小伙伴的用户体验以及你后续再次访问的速度。</p>\n</blockquote>\n<p><a name=d8peA></a></p>\n<h1>给 GraphQL 增加 CDN 缓存的具体步骤</h1>\n<p><a name=cPyid></a></p>\n<h2>一、少量开发：启用 APQ</h2>\n<p>因为 GraphQL 本质上是一个 HTTP POST 请求，通过启用 APQ，能够将缓存过的请求，转为 GET 请求。从而为后面利用 Cloudflare 设置页面规则（GET 请求）埋下了伏笔。</p>\n<p><a name=x8GJD></a></p>\n<h3>服务器端：</h3>\n<p><a href=\"https://github.com/Jeff-Tian/serverless-space/blob/c566d9ca16913952142d6c9caae07e2a130319b3/src/app.module.ts?_pjax=%23js-repo-pjax-container%2C%20div%5Bitemtype%3D%22http%3A%2F%2Fschema.org%2FSoftwareSourceCode%22%5D%20main%2C%20%5Bdata-pjax-container%5D#L15\">https://github.com/Jeff-Tian/serverless-space/blob/c566d9ca16913952142d6c9caae07e2a130319b3/src/app.module.ts?_pjax=%23js-repo-pjax-container%2C%20div%5Bitemtype%3D%22http%3A%2F%2Fschema.org%2FSoftwareSourceCode%22%5D%20main%2C%20%5Bdata-pjax-container%5D#L15</a>\ntypescript\nimport {Module} from @nestjs/common\nimport {GraphQLModule} from @nestjs/graphql\nimport {ApolloServerPluginCacheControl, ApolloServerPluginLandingPageLocalDefault} from apollo-server-core\nimport {CatsModule} from ./cats/cats.module\nimport {RecipesModule} from ./recipes/recipes.module\nimport {YuqueModule} from ./yuque/yuque.module</p>\n<p>const ONE_DAY_IN_SECONDS = 60 * 60 * 24</p>\n<p>@Module({\nimports: [CatsModule, RecipesModule, YuqueModule, GraphQLModule.forRoot({\nautoSchemaFile: true,\nsortSchema: true,\nplayground: false,</p>\n<pre><code>  \t// 这里！\n    persistedQueries: {\n        ttl: ONE_DAY_IN_SECONDS\n    },\n    plugins: [ApolloServerPluginLandingPageLocalDefault(), ApolloServerPluginCacheControl({defaultMaxAge: ONE_DAY_IN_SECONDS})]\n})],\n</code></pre>\n<p>})\nexport class AppModule {\n}</p>\n<p><a name=pRKEx></a></p>\n<h3>小程序端</h3>\n<p><a href=\"https://github.com/Jeff-Tian/weapp/blob/94c0a22ab54b579ec6991e33c3a8d327bd0f31d8/src/apollo-client.ts?_pjax=%23js-repo-pjax-container%2C%20div%5Bitemtype%3D%22http%3A%2F%2Fschema.org%2FSoftwareSourceCode%22%5D%20main%2C%20%5Bdata-pjax-container%5D#L27\">https://github.com/Jeff-Tian/weapp/blob/94c0a22ab54b579ec6991e33c3a8d327bd0f31d8/src/apollo-client.ts?_pjax=%23js-repo-pjax-container%2C%20div%5Bitemtype%3D%22http%3A%2F%2Fschema.org%2FSoftwareSourceCode%22%5D%20main%2C%20%5Bdata-pjax-container%5D#L27</a>\ntypescript\nimport {ApolloClient, ApolloLink, createHttpLink, InMemoryCache} from @apollo/client\nimport Taro from @tarojs/taro\nimport crypto from crypto</p>\n<p>import {createPersistedQueryLink} from @apollo/client/link/persisted-queries</p>\n<p>const graphQLServerUrl = <a href=\"https://sls.pa-ca.me/nest/graphql\">https://sls.pa-ca.me/nest/graphql</a></p>\n<p>const httpLink = createHttpLink({\nuri: graphQLServerUrl,\nasync fetch(url, options) {\nconsole.log(url = , url, options)\nconst res = await Taro.request({\nurl: url.toString(),\nmethod: (options?.method || POST) as POST | GET,\nheader: {\ncontent-type: application/json\n},\ndata: options?.body,\nsuccess: console.log\n})</p>\n<pre><code>return {text: async () => JSON.stringify(res.data)} as any\n</code></pre>\n<p>}\n})</p>\n<p>const queryLink = createPersistedQueryLink({\nuseGETForHashedQueries: true,\nsha256: async (document: string) => crypto.createHash(sha256).update(document).digest(hex)\n})</p>\n<p>export const client = new ApolloClient({\nlink: ApolloLink.from([queryLink, httpLink]),\ncache: new InMemoryCache()\n})</p>\n<p><a name=HrHwm></a></p>\n<h2>二、去掉代理、启用 AWS API 网关的自定义域名功能（极具参考价值！）</h2>\n<p>看过前面几篇文章的同学会了解，免费架构为了求快，在解决小程序的安全域名要求备案的限制时，使用了代理方案。而且代理的代码很粗糙，存在被滥用的风险，因此这里去掉它，这是为了安全。</p>\n<p>《<a href=\"https://mp.weixin.qq.com/s/W4c-XHe6L9imJsLtQyKtjA\">在小程序里接入 GraphQL</a>》</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1634730517271-5a2052a2-f9f5-4f2d-a650-fd1238cd55d8.png#clientId=ubff064c0-24cb-4&#x26;from=paste&#x26;height=1040&#x26;id=u6087cbc1&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=2079&#x26;originWidth=960&#x26;originalType=binary%E2%88%B6=1&#x26;size=1020415&#x26;status=done&#x26;style=none&#x26;taskId=u28830827-bb0d-4684-9223-cc1e7ba3b21&#x26;width=480\" alt=\"image.png\"></p>\n<p>但是，更重要的是，我们需要加快响应速度，要知道这个代理也是一个免费服务，当冷启动时，是非常慢的，再加上 AWS lambda 的冷启动，以及这个插件本身的慢，所以是<strong>三慢合一</strong>！</p>\n<p>要去掉它，就需要将自定义域名指向 AWS lambda 自动生成的长长的域名。</p>\n<p>极具参考价值，主要指这里。因为要利用 Cloudflare 的 CDN 网络和页面规则，自然，这个自定义域名需要交给 Cloudflare 托管。但是如何将 Cloudflare 托管的域名，指向 AWS lambda，文档少，关键步骤缺失。这让小白我，通过长时间的试错，才最终成功。</p>\n<p><a name=uGNWe></a></p>\n<h3>开通自定义域名</h3>\n<p>在使用 serverless 部署好 lambda 后，会自动生成相关的 API 网关。但是并未开通自定义域名，需要另外去开通：<br /><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1634730903389-cbd9d43c-db8f-4528-9d84-a9b45d0e6038.png#clientId=ubff064c0-24cb-4&#x26;from=paste&#x26;height=975&#x26;id=ub35ebec3&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1950&#x26;originWidth=3710&#x26;originalType=binary%E2%88%B6=1&#x26;size=465539&#x26;status=done&#x26;style=none&#x26;taskId=u1eff3035-444e-4bf4-9e02-a51ae7f5501&#x26;width=1855\" alt=\"image.png\"><br />这里的难点是申请证书。</p>\n<p><a name=U59Hs></a></p>\n<h3>验证域名</h3>\n<p>申请证书前，需要验证域名。<br /><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1634730960281-f260011b-285f-46eb-81fa-905e408f437f.png#clientId=ubff064c0-24cb-4&#x26;from=paste&#x26;height=226&#x26;id=uff001f7c&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=452&#x26;originWidth=1462&#x26;originalType=binary%E2%88%B6=1&#x26;size=41696&#x26;status=done&#x26;style=none&#x26;taskId=uaa40d6ca-edc3-4daa-9e0e-2a329f5f5e2&#x26;width=731\" alt=\"image.png\"><br />选择 DNS 验证<br /><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1634731043550-f0eb5793-d7b4-49a6-aec9-f586b475e088.png#clientId=ubff064c0-24cb-4&#x26;from=paste&#x26;height=823&#x26;id=u29879152&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1646&#x26;originWidth=2258&#x26;originalType=binary%E2%88%B6=1&#x26;size=231840&#x26;status=done&#x26;style=none&#x26;taskId=u775f2c7c-7755-40dc-9a64-a3fa12ac3d6&#x26;width=1129\" alt=\"image.png\"><br />然后根据提示，在 Cloudflare 的控制面板添加相应的 CNAME 以及 CAA 记录完成验证。<br /><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1634731186397-bb4a9afd-a8f5-4253-a6c2-5e962c67f2ac.png#clientId=ubff064c0-24cb-4&#x26;from=paste&#x26;height=361&#x26;id=u915242dd&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=722&#x26;originWidth=2174&#x26;originalType=binary%E2%88%B6=1&#x26;size=181765&#x26;status=done&#x26;style=none&#x26;taskId=u3627e11c-7cc6-4b43-a034-204e30c5dd7&#x26;width=1087\" alt=\"image.png\"><br /><strong>注意！这里的 CAA 记录，请参考如上截图全部加上，而不要相信 AWS 文档里说的只需要添加一种！更要注意 issuewild 和 issue 记录各添加 4 个！</strong></p>\n<p>在域名验证验证通过后，才可以进行下一步。</p>\n<p><a name=j6MPt></a></p>\n<h3>证书导入</h3>\n<p>AWS 控制面板提供了两种证书申请方式，即 AWS 颁发，或者自行导入。这里选择自行导入证书。然后就进入了非常迷惑的面板：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1634731560802-189a3ced-bab6-4ad0-8565-184e9d944b39.png#clientId=ubff064c0-24cb-4&#x26;from=paste&#x26;height=738&#x26;id=u8c562f78&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1476&#x26;originWidth=1942&#x26;originalType=binary%E2%88%B6=1&#x26;size=163106&#x26;status=done&#x26;style=none&#x26;taskId=ua03c07e5-aa86-4e95-af3e-fc4ddd5c2e6&#x26;width=971\" alt=\"image.png\"></p>\n<p>我们准备导入的是 Cloudflare 的证书，证书正文和私钥，都可以轻易地从 Cloudflare 控制面板获取。<br /><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1634731650340-2902dc60-9cb6-4f2e-bba2-30008be1b90f.png#clientId=ubff064c0-24cb-4&#x26;from=paste&#x26;height=573&#x26;id=u576f585c&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1146&#x26;originWidth=2174&#x26;originalType=binary%E2%88%B6=1&#x26;size=187827&#x26;status=done&#x26;style=none&#x26;taskId=u201daeea-e5f5-4915-a2cb-0c9c09cb355&#x26;width=1087\" alt=\"image.png\"><br />点击创建证书后，通过下载即可以获取到证书正文和私钥，分别贴入 AWS ACM 控制面板。<strong>让人傻眼的是这个证书链，没有任何文档说明如何获取这个证书链。</strong></p>\n<p>通过各种信息的拼凑和反复试错，以下是正确的获取姿势：</p>\n<p><a name=H6L23></a></p>\n<h3>证书链</h3>\n<p>虽然 AWS 控制面板上说这是可选项，但是没有的话，根本导入不了。</p>\n<p><strong>证书链需要将上一步生成的源服务器证书内容，和 Cloudflare 根证书文本内容，拼在一起，并且要注意顺序！</strong></p>\n<p>从这个链接获取 Cloudflare 根证书的内容（RSA 格式）：<a href=\"https://developers.cloudflare.com/ssl/e2b9968022bf23b071d95229b5678452/origin_ca_rsa_root.pem\">https://developers.cloudflare.com/ssl/e2b9968022bf23b071d95229b5678452/origin_ca_rsa_root.pem</a></p>\n<p>shell\n-----BEGIN CERTIFICATE-----\nMIIEADCCAuigAwIBAgIID+rOSdTGfGcwDQYJKoZIhvcNAQELBQAwgYsxCzAJBgNV\nBAYTAlVTMRkwFwYDVQQKExBDbG91ZEZsYXJlLCBJbmMuMTQwMgYDVQQLEytDbG91\nZEZsYXJlIE9yaWdpbiBTU0wgQ2VydGlmaWNhdGUgQXV0aG9yaXR5MRYwFAYDVQQH\nEw1TYW4gRnJhbmNpc2NvMRMwEQYDVQQIEwpDYWxpZm9ybmlhMB4XDTE5MDgyMzIx\nMDgwMFoXDTI5MDgxNTE3MDAwMFowgYsxCzAJBgNVBAYTAlVTMRkwFwYDVQQKExBD\nbG91ZEZsYXJlLCBJbmMuMTQwMgYDVQQLEytDbG91ZEZsYXJlIE9yaWdpbiBTU0wg\nQ2VydGlmaWNhdGUgQXV0aG9yaXR5MRYwFAYDVQQHEw1TYW4gRnJhbmNpc2NvMRMw\nEQYDVQQIEwpDYWxpZm9ybmlhMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC\nAQEAwEiVZ/UoQpHmFsHvk5isBxRehukP8DG9JhFev3WZtG76WoTthvLJFRKFCHXm\nV6Z5/66Z4S09mgsUuFwvJzMnE6Ej6yIsYNCb9r9QORa8BdhrkNn6kdTly3mdnykb\nOomnwbUfLlExVgNdlP0XoRoeMwbQ4598foiHblO2B/LKuNfJzAMfS7oZe34b+vLB\nyrP/1bgCSLdc1AxQc1AC0EsQQhgcyTJNgnG4va1c7ogPlwKyhbDyZ4e59N5lbYPJ\nSmXI/cAe3jXj1FBLJZkwnoDKe0v13xeF+nF32smSH0qB7aJX2tBMW4TWtFPmzs5I\nlwrFSySWAdwYdgxw180yKU0dvwIDAQABo2YwZDAOBgNVHQ8BAf8EBAMCAQYwEgYD\nVR0TAQH/BAgwBgEB/wIBAjAdBgNVHQ4EFgQUJOhTV118NECHqeuU27rhFnj8KaQw\nHwYDVR0jBBgwFoAUJOhTV118NECHqeuU27rhFnj8KaQwDQYJKoZIhvcNAQELBQAD\nggEBAHwOf9Ur1l0Ar5vFE6PNrZWrDfQIMyEfdgSKofCdTckbqXNTiXdgbHs+TWoQ\nwAB0pfJDAHJDXOTCWRyTeXOseeOi5Btj5CnEuw3P0oXqdqevM1/+uWp0CM35zgZ8\nVD4aITxity0djzE6Qnx3Syzz+ZkoBgTnNum7d9A66/V636x4vTeqbZFBr9erJzgz\nhhurjcoacvRNhnjtDRM0dPeiCJ50CP3wEYuvUzDHUaowOsnLCjQIkWbR7Ni6KEIk\nMOz2U0OBSif3FTkhCgZWQKOOLo1P42jHC3ssUZAtVNXrCk3fw9/E15k8NPkBazZ6\n0iykLhH1trywrKRMVw67F44IE8Y=\n-----END CERTIFICATE-----</p>\n<p>然后和自己生成的源服务器证书内容拼在一起粘贴到 AWS ACM 控制面板，注意上下顺序！</p>\n<p>shell\n-----BEGIN CERTIFICATE-----\nCloudflare 根证书内容\n-----END CERTIFICATE-----</p>\n<p>-----BEGIN CERTIFICATE-----\n源服务器证书内容\n-----END CERTIFICATE-----</p>\n<p>导入成功后，你就能在自定义域名开通面板选择到它了！</p>\n<p><a name=EJtv7></a></p>\n<h2>三、设置域名 CNAME 记录指向 API 网关的自定义域名</h2>\n<p>注意是 CNAME 到终端节点配置显示的 API Gateway 域名：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1634732243510-755b40ab-3697-4043-88d3-8ecad8fff361.png#clientId=ubff064c0-24cb-4&#x26;from=paste&#x26;height=605&#x26;id=u99e4066e&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1210&#x26;originWidth=3266&#x26;originalType=binary%E2%88%B6=1&#x26;size=191569&#x26;status=done&#x26;style=none&#x26;taskId=uddcac59f-4a5f-4e8a-9ee2-65eaa3171ba&#x26;width=1633\" alt=\"image.png\"><br /><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1634731130385-2ba47b17-d4ba-4b03-9190-b04990195ac4.png#clientId=ubff064c0-24cb-4&#x26;from=paste&#x26;height=244&#x26;id=u84b0b342&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=488&#x26;originWidth=2212&#x26;originalType=binary%E2%88%B6=1&#x26;size=77140&#x26;status=done&#x26;style=none&#x26;taskId=u794bb26a-78d0-40ea-9904-b649008d77b&#x26;width=1106\" alt=\"image.png\"></p>\n<p><a name=ISNyw></a></p>\n<h2>四、Cloudflare 页面 SSL 规则</h2>\n<p>注意需要设置这个新的 CNAME 域名所有的路径（*）的 SSL 规则为“<strong>完全</strong>”，否则，直接访问会报错。<br /><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1634732325536-d864a562-5609-4429-bf8d-aeb586eb95d7.png#clientId=ubff064c0-24cb-4&#x26;from=paste&#x26;height=285&#x26;id=u0b67b7e7&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=570&#x26;originWidth=1806&#x26;originalType=binary%E2%88%B6=1&#x26;size=78350&#x26;status=done&#x26;style=none&#x26;taskId=ud2b8a230-6a8e-4201-a7c4-1741e9bc0d1&#x26;width=903\" alt=\"image.png\">\n<a name=v8GKb></a></p>\n<h2>五、Cloudflare 页面缓存规则</h2>\n<p>经历了以上九九八十一难，你的自定义域名终于通了，也就是说，可以通过你的已备案域名访问到 AWS lambda 的服务了！</p>\n<p>这个时候，不要忘记了我们的初衷，我们费了这么大劲，是要给 GraphQL 响应加上 CDN 缓存！</p>\n<p>这很简单，再加上两个规则即可，对于缓存级别，选择缓存所有内容；对于 TTL，选最长的。因为对于这个使用场景，是不需要它过期的，但是最长只能选到一个月。当有语雀文章更新时，是可以通过 Cloudflare API 主动清除缓存的。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1634732565216-ce3c07c8-5825-4118-86ad-35830a2f993c.png#clientId=ubff064c0-24cb-4&#x26;from=paste&#x26;height=512&#x26;id=u19eba3d7&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1024&#x26;originWidth=1714&#x26;originalType=binary%E2%88%B6=1&#x26;size=117861&#x26;status=done&#x26;style=none&#x26;taskId=u606b23f3-1651-4e20-b565-8262813f989&#x26;width=857\" alt=\"image.png\"></p>\n<p><a name=Zz7Sv></a></p>\n<h1>大功告成！</h1>\n<p><a name=MdzEb></a></p>\n<h1>总结</h1>\n<p>少量开发（大量配置，好在一劳永逸）结合少量费用（基本免费），将极其缓慢的接口响应，变得快得不能再快，这就是免费架构！</p>\n<p>通过少量开发使得原本的 GraphQL HTTP Post 请求转变为 GET 请求，从而可以利用 Cloudflare 的页面规则来实现 CDN 缓存；又通过 API Gateway 的自定义域名，去掉了代理服务，最终将<strong>三慢合一</strong>中的两慢解决掉了，实现了小程序页面的秒开效果！</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"Full Stack Developer, good at OAuth 2.0","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"本站源码","url":"https://github.com/Jeff-Tian/space","style":"link","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}