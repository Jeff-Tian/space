{"componentChunkName":"component---src-templates-post-js","path":"/posts/add-watermark-to-image-using-csharp-and-gdiplus/","result":{"data":{"sitePage":{"id":"SitePage /posts/add-watermark-to-image-using-csharp-and-gdiplus/"}},"pageContext":{"url":"/posts/add-watermark-to-image-using-csharp-and-gdiplus/","relativePath":"posts/add-watermark-to-image-using-csharp-and-gdiplus.md","relativeDir":"posts","base":"add-watermark-to-image-using-csharp-and-gdiplus.md","name":"add-watermark-to-image-using-csharp-and-gdiplus","frontmatter":{"title":"使用.NET的GDI+技术给图片加水印","stackbit_url_path":"posts/add-watermark-to-image-using-csharp-and-gdiplus","date":"2011-07-12 16:44:00","excerpt":"本文描述了使用.NET中的C#与GDI+来在图片上添加一个水印层的过程。","comments_count":0,"positive_reactions_count":0,"tags":["C#","GDI+","Watermark","水印"],"canonical_url":"https://be-net.azurewebsites.net/post/2011/07/12/add-watermark-to-image-using-csharp-and-gdiplus","template":"post"},"html":"<p>下载源文件：<a href=\"http://www.zizhujy.com/BlogEngine/BlogEngine/BlogEngine.NET/file.axd?file=2011%2f7%2fAddWatermark.zip\">AddWatermark.zip (370.41 kb)</a></p>\n<p><a href=\"https://raw.githubusercontent.com/Jeff-Tian/blogengine.net/master/Source/BlogEngine/BlogEngine.NET/App_Data/files/watermark_final.jpg\"><img style=\"display: inline; border-width: 0px;\" title=\"watermark_final\" src=\"https://raw.githubusercontent.com/Jeff-Tian/blogengine.net/master/Source/BlogEngine/BlogEngine.NET/App_Data/files/watermark_final_thumb.jpg\" border=\"0\" alt=\"Add watermark to image 给图片添加水印\" width=\"492\" height=\"370\" /></a></p>\n<p>注：原文在此：<a href=\"http://www.codeproject.com/KB/GDI-plus/watermark.aspx\">http://www.codeproject.com/KB/GDI-plus/watermark.aspx</a>。</p>\n<p>本文翻译和修改了原文。</p>\n<hr />\n<h2><strong><span style=\"color: #800080; font-size: x-large;\">摘要</span></strong></h2>\n<p>本文描述了使用.NET中的C#与GDI+来在图片上添加一个水印层的过程。</p>\n<h2><span style=\"color: #800080; font-size: x-large;\"><strong>简介</strong></span></h2>\n<p>当在网页放置图片时，经常会有在其上添加一个水印与/或版权声明的需要。这种信息的添加帮助人们识别是谁创作了这张图片以及谁拥有对其的版权。如果手工来完成这种任务将会非常耗时而且不容易保持一致的效果。通过使用一些简单的技术如C#和GDI+，就可以很轻松地完成这一任务。</p>\n<h2><span style=\"color: #800080; font-size: x-large;\"><strong>总览</strong></span></h2>\n<p>我将向你展示操纵图片的一系列技术。下面的一个清单，列出了其中的一些技术：</p>\n<ul>\n<li>在图片上插入文本并根据图片的尺寸来相应地定位 </li>\n<li>动态地选择文本字体大小，以使可读性最高 </li>\n<li>控制文本字符串的透明度 </li>\n<li>替换位图中的特定颜色来达到透明的效果 </li>\n<li>通过一个5x5颜色矩阵来改变图片的透明度 </li>\n</ul>\n<h2><span style=\"color: #800080; font-size: x-large;\"><strong>确定图片</strong></span></h2>\n<p><a href=\"https://raw.githubusercontent.com/Jeff-Tian/blogengine.net/master/Source/BlogEngine/BlogEngine.NET/App_Data/files/1305211066-1784_600-0_6-0.jpg\"><img style=\"margin: 0px 20px 10px 0px; display: inline; float: left; border-width: 0px;\" title=\"1305211066-1784_600-0_6-0\" src=\"https://raw.githubusercontent.com/Jeff-Tian/blogengine.net/master/Source/BlogEngine/BlogEngine.NET/App_Data/files/1305211066-1784_600-0_6-0_thumb.jpg\" border=\"0\" alt=\"Add watermark to image 给图片添加水印\" width=\"244\" height=\"184\" align=\"left\" /></a></p>\n<p>这个过程中的第一步就是加载一张你想要添加水印于其上的源图片。这张图片可以是任意尺寸。在这个例子中我将使用一张宽640像素高480像素的照片。</p>\n<p>紧接着主函数(static void Main(string[] args))的声明，定义两个string变量。第一个定义了寻找源图片、水印图片、以及输出结果新图片的位置。第二个变量将定义那个我们要用作水印的一部分的版权文本。</p>\n<pre class=\"brush: csharp\">            string workingDirectory = @\"C:\\\";\n            string copyright = \"www.zizhujy.com\";</pre>\n<p>接下来，从指定的文件创建一个Image对象，并且分别定义一个变量来存储它的宽度和高度值。这些维度值会被用来创建一个每像素使用24比特存储颜色数据的Bitmap对象。最后这个Bitmap对象被用来创建一个新的Graphics对象。</p>\n<pre class=\"brush: csharp\">            Image photo = Image.FromFile(workingDirectory + \"\\\\1305211066-1784_600-0_6-0.jpg\");\n            int width = photo.Width;\n            int height = photo.Height;\n<pre><code>        Bitmap bitmap = new Bitmap(width, height, PixelFormat.Format24bppRgb);\n        Graphics g = Graphics.FromImage(bitmap);&#x3C;/pre>\n</code></pre>\n<p><a href=\"https://raw.githubusercontent.com/Jeff-Tian/blogengine.net/master/Source/BlogEngine/BlogEngine.NET/App_Data/files/logo.png\"><img style=\"margin: 0px 20px 10px 0px; display: inline; float: left; border-width: 0px;\" title=\"logo\" src=\"https://raw.githubusercontent.com/Jeff-Tian/blogengine.net/master/Source/BlogEngine/BlogEngine.NET/App_Data/files/logo_thumb.png\" border=\"0\" alt=\"Add watermark to image 给图片添加水印\" width=\"95\" height=\"95\" align=\"left\" /></a> 下面的代码装入了水印图片。并且又一次分别定义了变量来存储它的宽度和高度值。</p>\n<pre class=\"brush: csharp\">Image imgWatermark = new Bitmap(workingDirectory + \"\\\\logo.png\"); \nint widthWatermark = imgWatermark.Width; \nint heightWatermark = imgWatermark.Height;</pre>\n<h2><span style=\"color: #800080; font-size: x-large;\"><strong>第1步 - 添加水印文本</strong></span></h2>\n<p>下面的代码将photo以原尺寸的100%的比例从(x=0,&nbsp; y=0)的位置画到Graphics对象里。接下来所有的绘制都将发生在源图片的上方。</p>\n<pre class=\"brush: csharp\">            g.SmoothingMode = SmoothingMode.AntiAlias;\n            g.DrawImage(photo, new Rectangle(0, 0, width, height), 0, 0, width, height, GraphicsUnit.Pixel);</pre>\n<p>为了最大化版权信息文本我们将测试7种不同的字体大小，来找出我们能够用到源图片中的可行的最大的字体大小。为了有效地做到这点，我们将定义一个整数数组存储字体大小数值，然后循环遍历它们，用以测量在不同字体大小的情况下的版权文本字符串的长度。一旦我们找到了最佳大小值，我们就退出循环并将文本绘制在源图片上。</p>\n<pre class=\"brush: csharp\">   \n            int[] sizes = new int[] { 16, 14, 12, 10, 8, 6, 4 };\n            Font font = null;\n            SizeF size = new SizeF();\n            for (int i = 0; i &lt; 7; i++)\n            {\n                font = new Font(\"arial\", sizes[i], FontStyle.Bold);\n                size = g.MeasureString(copyright,font);\n<pre><code>            if ((ushort)size.Width &#x26;lt; (ushort)width)\n                break;\n        }&#x3C;/pre>\n</code></pre>\n<p>因为源图片将会有不同的高度，固这里使用离底边5%的距离来绘制版权文本。并使用copyright字符串的高度来找出一个合适的y坐标值，用来绘制字符串。x坐标值可以通过计算图片的中心坐标，然后定义一个StringFormat对象并设置StringAlignment为Center来得到。</p>\n<pre class=\"brush: csharp\">int yPixlesFromBottom = (int)(height * .05);\n            float yPosFromBottom = ((height - yPixlesFromBottom) - (size.Height / 2));\n            float xCenterOfImg = (width / 2);\n<pre><code>        StringFormat strFormat = new StringFormat();\n        strFormat.Alignment = StringAlignment.Center;&#x3C;/pre>\n</code></pre>\n<p>现在我们有了足够的定位坐标来创建一个60%黑（alpha值为153）的SolidBrush。在偏离合适位置右下方1像素的地方绘制copyright字符串。这个偏离做出了一种阴影效果。然后用一个白色的SolidBrush再次重复这个过程，将相同的文本直接绘制在前面绘制好的字符串上。</p>\n<pre class=\"brush: csharp\">            SolidBrush semiTransBrushShadow =   new SolidBrush(Color.FromArgb(153, 0, 0, 0));\n<pre><code>        g.DrawString(copyright, font, semiTransBrushShadow, new PointF(xCenterOfImg + 1, yPosFromBottom + 1), strFormat);\n\n        SolidBrush semiTransBrush = new SolidBrush(Color.FromArgb(153, 255, 255, 255));\n\n        g.DrawString(copyright, font, semiTransBrush, new PointF(xCenterOfImg, yPosFromBottom), strFormat);&#x3C;/pre>\n</code></pre>\n<p><a href=\"https://raw.githubusercontent.com/Jeff-Tian/blogengine.net/master/Source/BlogEngine/BlogEngine.NET/App_Data/files/image_26.png\"><img style=\"display: inline; border-width: 0px;\" title=\"image\" src=\"https://raw.githubusercontent.com/Jeff-Tian/blogengine.net/master/Source/BlogEngine/BlogEngine.NET/App_Data/files/image_thumb_26.png\" border=\"0\" alt=\"Add watermark to image 给图片添加水印\" width=\"630\" height=\"51\" /></a></p>\n<h2><span style=\"color: #800080; font-size: x-large;\"><strong>第2步 - 添加图片水印</strong></span></h2>\n<p>基于之前已经修改的源图片创建一个Bitmap。将它装入到一个新的Graphics对象。</p>\n<pre class=\"brush: csharp\">            Bitmap bitmapWatermark = new Bitmap(bitmap);\n<pre><code>        Graphics gWatermark = Graphics.FromImage(bitmapWatermark);&#x3C;/pre>\n</code></pre>\n<p>为了达到一种半透明效果的水印我们将通过定义一个ImageAttribute对象并分别设置它的两个属性来应用两种颜色操作。第一步是通过一个透明颜色（Alpha=0, R=0, G=0, B=0）来替换掉水印图片中的背景颜色（如绿色）。要做到这点我们将使用Colormap并定义一个RemapTable。下面我们将用透明颜色替换掉图片中的绿色分量。</p>\n<pre class=\"brush: csharp\">            ImageAttributes imageAttributes = new ImageAttributes();\n            ColorMap colorMap = new ColorMap();\n<pre><code>        colorMap.OldColor = Color.FromArgb(255, 0, 255, 0);\n        colorMap.NewColor = Color.FromArgb(0, 0, 0, 0);\n        ColorMap[] remapTable = { colorMap };\n\n        imageAttributes.SetRemapTable(remapTable, ColorAdjustType.Bitmap);&#x3C;/pre>\n</code></pre>\n<p>第二步颜色操作是改变水印图片的透明度。这是通过应用一个包含RGBA空间坐标值的5x5的矩阵来做到的。通过设置第三行第三列（从零开始数）值为0.5f我们就达到了一定的不透明度（50%）。结果是透过这个水印图片能看到一点下面的图像。</p>\n<pre class=\"brush: csharp\">            float[][] colorMatrixElements = { \n               new float[] {1.0f,  0.0f,  0.0f,  0.0f, 0.0f},\n               new float[] {0.0f,  1.0f,  0.0f,  0.0f, 0.0f},\n               new float[] {0.0f,  0.0f,  1.0f,  0.0f, 0.0f},\n               new float[] {0.0f,  0.0f,  0.0f,  0.5f, 0.0f},\n               new float[] {0.0f,  0.0f,  0.0f,  0.0f, 1.0f}\n            };\n<pre><code>        ColorMatrix wmColorMatrix = new ColorMatrix(colorMatrixElements);\n\n        imageAttributes.SetColorMatrix(wmColorMatrix, ColorMatrixFlag.Default, ColorAdjustType.Bitmap);&#x3C;/pre>\n</code></pre>\n<p>通过将这两个颜色操作添加到imageAttributes对象里，我们能够绘制水印图片到源图片的右上方，我们还设置水印图片向下和向左偏离10像素。</p>\n<pre class=\"brush: csharp\">            int xPosOfWatermark = ((width - widthWatermark) - 10);\n            int yPosOfWatermark = 10;\n<pre><code>        gWatermark.DrawImage(imgWatermark, new Rectangle(xPosOfWatermark, yPosOfWatermark, widthWatermark, heightWatermark), 0, 0, widthWatermark, heightWatermark, GraphicsUnit.Pixel, imageAttributes);\n    &#x3C;/pre>\n</code></pre>\n<p><a href=\"https://raw.githubusercontent.com/Jeff-Tian/blogengine.net/master/Source/BlogEngine/BlogEngine.NET/App_Data/files/image_27.png\"><img style=\"display: inline; border-width: 0px;\" title=\"image\" src=\"https://raw.githubusercontent.com/Jeff-Tian/blogengine.net/master/Source/BlogEngine/BlogEngine.NET/App_Data/files/image_thumb_27.png\" border=\"0\" alt=\"Add watermark to image 给图片添加水印\" width=\"224\" height=\"244\" /></a></p>\n<p>我们最后一步就是要把源图片用新的加了水印的图片替换掉，并销毁两个Graphics对象，再将Image保存到文件系统。</p>\n<pre class=\"brush: csharp\">            photo = bitmapWatermark;\n            g.Dispose();\n            gWatermark.Dispose();\n<pre><code>        photo.Save(workingDirectory + \"\\\\watermark_final.jpg\", ImageFormat.Jpeg);\n        photo.Dispose();\n        imgWatermark.Dispose();&#x3C;/pre>\n</code></pre>\n<p>成功了！编译整个工程，运行它，你就会看见发生了什么！整个代码是相当的直观的，这些技术可以应用在数以百计的不同的图像操作上。可能性是没有止境的。</p>\n<hr />\n<h2><span style=\"color: #800080; font-size: x-large;\"><strong>后面的博文将对在图片上添加水印做更深入的探讨。</strong></span></h2>\n<p>附：<a href=\"/BlogEngine/BlogEngine/BlogEngine.NET/file.axd?file=2011%2f7%2fAddWatermark.zip\">本程序源代码</a>是一个Windows Console工程，其Program.cs源代码如下：</p>\n<pre class=\"brush: csharp\">using System;\nusing System.Drawing;\nusing System.Drawing.Drawing2D;\nusing System.Drawing.Imaging;\n<p>namespace AddWatermark\n{\nclass Program\n{\nstatic void Main(string[] args)\n{\nstring workingDirectory = @\"C:\";\nstring copyright = \"<a href=\"http://www.zizhujy.com\">www.zizhujy.com</a>\";</p>\n<pre><code>        Image photo = Image.FromFile(workingDirectory + \"\\\\1305211066-1784_600-0_6-0.jpg\");\n        int width = photo.Width;\n        int height = photo.Height;\n\n        Bitmap bitmap = new Bitmap(width, height, PixelFormat.Format24bppRgb);\n        Graphics g = Graphics.FromImage(bitmap);\n\n        Image imgWatermark = new Bitmap(workingDirectory + \"\\\\logo.png\");\n        int widthWatermark = imgWatermark.Width;\n        int heightWatermark = imgWatermark.Height;\n\n        g.SmoothingMode = SmoothingMode.AntiAlias;\n        g.DrawImage(photo, new Rectangle(0, 0, width, height), 0, 0, width, height, GraphicsUnit.Pixel);\n\n        int[] sizes = new int[] { 16, 14, 12, 10, 8, 6, 4 };\n        Font font = null;\n        SizeF size = new SizeF();\n        for (int i = 0; i &#x26;lt; 7; i++)\n        {\n            font = new Font(\"arial\", sizes[i], FontStyle.Bold);\n            size = g.MeasureString(copyright,font);\n\n            if ((ushort)size.Width &#x26;lt; (ushort)width)\n                break;\n        }\n\n        int yPixlesFromBottom = (int)(height * .05);\n        float yPosFromBottom = ((height - yPixlesFromBottom) - (size.Height / 2));\n        float xCenterOfImg = (width / 2);\n\n        StringFormat strFormat = new StringFormat();\n        strFormat.Alignment = StringAlignment.Center;\n\n        SolidBrush semiTransBrushShadow =   new SolidBrush(Color.FromArgb(153, 0, 0, 0));\n\n        g.DrawString(copyright, font, semiTransBrushShadow, new PointF(xCenterOfImg + 1, yPosFromBottom + 1), strFormat);\n\n        SolidBrush semiTransBrush = new SolidBrush(Color.FromArgb(153, 255, 255, 255));\n\n        g.DrawString(copyright, font, semiTransBrush, new PointF(xCenterOfImg, yPosFromBottom), strFormat);\n\n        Bitmap bitmapWatermark = new Bitmap(bitmap);\n\n        Graphics gWatermark = Graphics.FromImage(bitmapWatermark);\n\n        ImageAttributes imageAttributes = new ImageAttributes();\n        ColorMap colorMap = new ColorMap();\n\n        colorMap.OldColor = Color.FromArgb(255, 0, 255, 0);\n        colorMap.NewColor = Color.FromArgb(0, 0, 0, 0);\n        ColorMap[] remapTable = { colorMap };\n\n        imageAttributes.SetRemapTable(remapTable, ColorAdjustType.Bitmap);\n\n        float[][] colorMatrixElements = { \n           new float[] {1.0f,  0.0f,  0.0f,  0.0f, 0.0f},\n           new float[] {0.0f,  1.0f,  0.0f,  0.0f, 0.0f},\n           new float[] {0.0f,  0.0f,  1.0f,  0.0f, 0.0f},\n           new float[] {0.0f,  0.0f,  0.0f,  0.5f, 0.0f},\n           new float[] {0.0f,  0.0f,  0.0f,  0.0f, 1.0f}\n        };\n\n        ColorMatrix wmColorMatrix = new ColorMatrix(colorMatrixElements);\n\n        imageAttributes.SetColorMatrix(wmColorMatrix, ColorMatrixFlag.Default, ColorAdjustType.Bitmap);\n\n\n        int xPosOfWatermark = ((width - widthWatermark) - 10);\n        int yPosOfWatermark = 10;\n\n        gWatermark.DrawImage(imgWatermark, new Rectangle(xPosOfWatermark, yPosOfWatermark, widthWatermark, heightWatermark), 0, 0, widthWatermark, heightWatermark, GraphicsUnit.Pixel, imageAttributes);\n\n        photo = bitmapWatermark;\n        g.Dispose();\n        gWatermark.Dispose();\n\n        photo.Save(workingDirectory + \"\\\\watermark_final.jpg\", ImageFormat.Jpeg);\n        \n        photo.Dispose();\n        bitmapWatermark.Dispose();\n        imgWatermark.Dispose();\n    }\n}\n</code></pre>\n<p>}</pre></p>\n<p><a href=\"http://www.zizhujy.com/BlogEngine/BlogEngine/BlogEngine.NET/file.axd?file=2011%2f7%2fAddWatermark.zip\">AddWatermark.zip (370.41 kb)</a></p>\n<p>&nbsp;</p>\n<p>[donate:www.zizhujy.com]</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"Full Stack Developer, good at OAuth 2.0","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"本站源码","url":"https://github.com/Jeff-Tian/space","style":"link","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}