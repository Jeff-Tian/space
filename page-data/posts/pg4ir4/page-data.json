{"componentChunkName":"component---src-templates-post-js","path":"/posts/pg4ir4","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/pg4ir4","relativePath":"posts/pg4ir4","frontmatter":{"title":"通过重构改善系统性能（使用 Promise.all 替换带有 await 的 for 循环）","stackbit_url_path":"posts/pg4ir4","date":"2022-08-26T11:56:09","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<p><a name=LjSlc></a></p>\n<h1>背景</h1>\n<p>线上以前运行得好好的系统，突然不稳定了。而且在非生产环境中没有暴露问题，仅在生产环境出现问题。不稳定体现在用户订阅的通知消息，有时候可以收到，而有时候收不到。</p>\n<p><a name=UxJ3g></a></p>\n<h1>分析</h1>\n<p>非生产环境没有这个问题，因为数据量很少。而生产环境，数据量要大得多，导致有些数据得不到及时的处理。但是生产环境的数据量并不是特别大，几十万条数据而已，但是这点数据已经让系统出现性能问题了。</p>\n<p>看了代码才发现，大量使用了带 await 的 for 循环。每个 await 都比较耗时，再加上大量的 for 循环，这种串行处理方式导致系统在百万条数据以下时就不能及时应对了。然后对于向不同的用户发送消息通知这种场景，并不需要等待给前一个用户发完再向第二个用户发消息，所以这些操作完全可以并行。</p>\n<p><a name=tkDWD></a></p>\n<h1>解决</h1>\n<p>使用 Promise.all 替换带有 await 的 for 循环，性能大大提升，几十万条数据的规模那是可以轻松应对，系统的峰值吞吐量提升了40倍（由200不到提升到8000左右）。当然，这个峰值只是当前用户订阅规模下的，如果有更大的数据，相信这个峰值还可以再提高。\n<a name=YSZN5></a></p>\n<h2>改造前的表现</h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1661512308980-c49d1f7c-323c-4ecf-9119-4e8955c05bc3.png#clientId=ufe7de571-47e6-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=262&#x26;id=u772b0b08&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=524&#x26;originWidth=1374&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=153472&#x26;status=done&#x26;style=none&#x26;taskId=u91962eb4-6828-41db-aa22-4d87565ddd9&#x26;title=&#x26;width=687\" alt=\"image.png\">\n<a name=VnNxE></a></p>\n<h2>改造后的表现</h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1661512452249-4623ed6f-a82d-4587-a963-197d422b3cdd.png#clientId=ufe7de571-47e6-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=317&#x26;id=u58d9d1ef&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=633&#x26;originWidth=1621&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=139811&#x26;status=done&#x26;style=none&#x26;taskId=uc7ae3ac4-12ac-46d2-b3fc-ee545f54376&#x26;title=&#x26;width=810.5\" alt=\"image.png\"></p>\n<p><a name=wJsrA></a></p>\n<h1>这和重构有什么关系？</h1>\n<p><a name=GnjaI></a></p>\n<h2>什么是重构？</h2>\n<p>昨天异步社区转发了我之前关于重构的分享： <a href=\"https://zhuanlan.zhihu.com/p/557756574\">https://zhuanlan.zhihu.com/p/557756574</a>。 这里摘抄 Martin Fowler 对于重构的定义：</p>\n<blockquote>\n<p>所谓重构（refactoring）是这样一个过程：在不改变代码外在行为的前提下，对代码做出修改，以改进程序的内部结构。重构是一种经千锤百炼形成的有条不紊的程序整理方法，可以最大限度地减小整理过程中引入错误的概率。本质上说，重构就是在代码写好之后改进它的设计。</p>\n</blockquote>\n<p><a name=t5nLE></a></p>\n<h2>提升性能算重构吗？</h2>\n<p>按照Kent和Martin的定义，对代码的改动，是否算重构，需要看从外界是否能“观察得到”系统行为的改变。比如说如果有个bug，但是没有使用者注意到，你把它改掉了，这也可以叫重构。而这次碰到的问题，其实在数据量不大时，感觉不到，因此仅将串行改为并行，没有改变端到端的行为，因此在这种意义上来说，可以算是重构。</p>\n<p>一般来说，做性能调优带来的代码改动，会让代码不易读，违背了让代码变得易读和易改的初衷，不算重构。但是本例使用 Promise.all 替换带有 await 的 for 循环，在这个具体的做法中，并没有带来难以理解的代码，甚至还让代码可读性变得更好了，从这点上讲，是一个重构反而提升了性能的特例。</p>\n<p><a name=poyfm></a></p>\n<h1>实例一</h1>\n<p>这个改动非常典型，最好默认就使用 Promise.all。除非有实在的先后执行的依赖关系。<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1661513531055-23a76906-9c9b-4dc3-907a-6a5154266a33.png#clientId=u3f70c9b4-b7e5-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=233&#x26;id=u277f44e5&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=465&#x26;originWidth=1880&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=184687&#x26;status=done&#x26;style=none&#x26;taskId=u2e957213-7020-4017-907f-36e5db23692&#x26;title=&#x26;width=940\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1661513722500-544a40bc-8781-462c-bd84-f7ab0d0f4b2a.png#clientId=u3f70c9b4-b7e5-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=156&#x26;id=ub35767c7&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=312&#x26;originWidth=1785&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=92947&#x26;status=done&#x26;style=none&#x26;taskId=u19e28f31-12db-4f1b-a019-e277b2f58f5&#x26;title=&#x26;width=892.5\" alt=\"image.png\"></p>\n<p><a name=ZpQ5b></a></p>\n<h1>实例二</h1>\n<p>在将串行改并行的同时，将统计逻辑和业务逻辑拆开，实现关注点分离，可读性更好。<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1661514264983-601ffd1d-7f16-4a60-9b2f-bd2845d5b25d.png#clientId=u3f70c9b4-b7e5-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=461&#x26;id=u839ac1f9&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=921&#x26;originWidth=1890&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=374934&#x26;status=done&#x26;style=none&#x26;taskId=u78a907d7-bb57-4c67-814c-3e3d042f7cf&#x26;title=&#x26;width=945\" alt=\"image.png\"></p>\n<p>当然，在改一块儿前，不仅仅使用 Promise.all 替换了带有 await 的 for，还有对难以理解的统计逻辑进行优化，不是那么纯粹，因此实际在改动前，是先写测试的。首先，上面的左边那一坨代码，原本没有测试，《重构》一书强调，在重构前，需要先测试。所以先写好以下测试，确保自己理解了原有代码的逻辑，直到测试通过。\ntypescript\n// 使用 ts-mockery 模拟依赖对象的扫描函数，返回一个假的带有10个元素的数组\nconst postService = Mock.of<PostService>({\nterminatePost: jest.fn(),\nscanPosts: jest.fn().mockImplementation(async (triggerId, params, scanner) => {\nconst post = new Post()\npost.status = PostStatus.INITIAL\npost.context = { test: again }\npost.adapterType = PostAdapterType.WECHAT\nconst items = new Array(10).fill(0).map((_) => ({ ...post }))</p>\n<pre><code>    await scanner(items)\n}),\n</code></pre>\n<p>})</p>\n<p>...\ndescribe(handle single post item, () => {\nit(calculates total posted count, async () => {\nconst res = await sut.handleSinglePostItem(triggerId, post, [])\nexpect(res).toEqual(1)\n})</p>\n<pre><code>    it(logs error, async () => {\n        const warnings: any[] = []\n        console.warn = (...args) => warnings.push(args)\n        postService.terminatePost = jest.fn().mockRejectedValueOnce({ message: error })\n\n        const res = await sut.handleSinglePostItem(triggerId, post, [])\n        expect(res).toEqual(0)\n        expect(warnings.length).toEqual(1)\n        expect(warnings[0]).toStrictEqual([triggerId: Post失败: error])\n    })\n})\n\ndescribe(handle multiple post items, () => {\n    postService.terminatePost = jest.fn().mockImplementation(async (post) => {\n        console.log(terminating , post)\n        return true\n    })\n\n    // 对统计逻辑的测试\n    it(counts total Records, async () => {\n        const stats = {\n            totalRecords: 0,\n            totalPosted: 0,\n        }\n        await sut.scanPosts(triggerId, { Segment: 2 }, 0, stats)\n\n        expect(stats.totalRecords).toEqual(10)\n        expect(stats.totalPosted).toEqual(10)\n    })\n})\n</code></pre>\n<p>然后，再重构代码，在重构完以后，以上测试仍然通过，这才是重构成功。</p>\n<p><a name=FAEBQ></a></p>\n<h1>总结</h1>\n<p>当看到带有 await 的 for 循环时，很可能碰到了一个坏的模式。除非实在有先后顺序的必要，否则非常建议改成 Promise.all 来让操作并发执行，以提高系统的吞吐量。</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"Made with Stackbit.","url":"https://www.stackbit.com","style":"link","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}