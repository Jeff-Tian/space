{"componentChunkName":"component---src-templates-post-js","path":"/posts/frd65v","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/frd65v","relativePath":"posts/frd65v","frontmatter":{"title":"在自托管 GitLab 实例中集成 Keycloak 登录","stackbit_url_path":"posts/frd65v","date":"2021-08-31T07:43:49","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<p><a name=xwrvB></a></p>\n<h1>背景</h1>\n<p>在知乎上收到一个付费咨询（<a href=\"https://www.zhihu.com/consult/conversation/1413515497665662976/archive\">https://www.zhihu.com/consult/conversation/1413515497665662976/archive</a>），他已经在自己部署好的 GitLab 实例上集成了 Keycloak 登录，想更进一步，在用户选择 keycloak 登录 GitLab 后，其身份信息也自动带过去。</p>\n<p>这个功能其实正好是 GitLab 近期实现的 SAML Group Sync 功能，不过只对 GitLab 托管的部分客户开放。这位咨询者搭建的是自托管 GtiLab 企业版，目前的版本不支持这个功能。不过，为了重现这位咨询者碰到的实际问题，我也搭建了一个自托管的 GitLab 企业版，进行了 Keycloak 登录集成，过程好挺有趣的，因此记录下来。</p>\n<p><a name=ur2Qz></a></p>\n<h1>效果展示</h1>\n<p>录了一个视频，展示了如何通过薅 GitHub CodeSpace 羊毛的方式启动了一个 GitLab 企业版实例，然后点击 Keycloak 登录，重用了自己开发的关注微信公众号即登录的方式，成功登录 GitLab。</p>\n<p><a href=\"https://www.zhihu.com/zvideo/1416018136143802369\">https://www.zhihu.com/zvideo/1416018136143802369</a></p>\n<p><a name=DS5pb></a></p>\n<h1>步骤详解</h1>\n<p><a name=W35XC></a></p>\n<h2>部署 Keycloak</h2>\n<p>Keycloak 是一个开源的认证授权系统，基于 Java 开发。部署方式有多种，详见《<a href=\"https://zhuanlan.zhihu.com/p/349504145\">基于 keycloak 的关注公众号即登录功能的设计与实现</a>》中 5.1 的介绍。我按照其中介绍的部署到 Heroku 的方式，部署了一个实例：<a href=\"https://keycloak.jiwai.win/\">https://keycloak.jiwai.win/</a>，部署到 Heroku 的优势是简单、免费。</p>\n<p><a name=uGRT0></a></p>\n<h2>部署 GitLab</h2>\n<p>GitLab 官网介绍了多种部署方式，但是对于我的演示目的，各有优劣：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>SaaS</th>\n<th>部署到云（Google、AWS，Azure）上虚拟服务器上</th>\n<th>部署到云提供的 Kubernetes 集群</th>\n<th>本地部署</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>好处</td>\n<td>最简单</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>能外网访问</p>\n<p>我最想采用的方式 | 能外网访问 | 能外网访问 | 部署简单</p>\n<p>免费 |\n| 坏处 | 要钱！</p>\n<p>没有超级管理员权限 | 要钱！</p>\n<p>配置工作量大 | 要钱！</p>\n<p>配置工作量大 | 配置外网访问复杂</p>\n<p>耗本地机器资源 |</p>\n<p>基于一定要免费的原则，似乎只能本地部署。本地部署最简单的方式就是 docker-compose 启动，但是这样会有个问题，就是现在的浏览器（Chrome、Safari 等）都打不开页面，原因是 GitLab 实例的自签发证书不被信任！要设置信任特别复杂，再加上需要 Keycloak 回调 GitLab 实例，部署在本地有诸多不便。</p>\n<p>但是本地使用 docker-compose 启动 GitLab 实例的方式实在是太香了，有没有办法把本地 docker-compose 部署的方式移植到线上呢？想到这里，我把目光投向了 GitHub 的 CodeSpace，CodeSpace 在我炯炯有神的坚毅的不薅羊毛到底绝不罢休的眼神中瑟瑟发抖。</p>\n<p><a name=JiDmM></a></p>\n<h3>docker-compose</h3>\n<p>首先，我按照官网的知道说明，创建了 docker-compose.yml 文件，并将它提交到了 GitHub 代码仓库：<a href=\"https://github.com/Jeff-Tian/gitlab\">https://github.com/Jeff-Tian/gitlab</a> 。然后打开 GitHub 仓库主页，按下了句点键，GitHub 切换进入了网页编辑器界面：<a href=\"https://github.dev/Jeff-Tian/gitlab\">https://github.dev/Jeff-Tian/gitlab</a>。熟悉的 VsCode 编辑器出现了，就凭这，足以回答知乎上的这个问题了：《<a href=\"https://www.zhihu.com/question/363365943/answer/953401788?utm_source=wechat_session&#x26;utm_medium=social&#x26;utm_oi=60808105033728&#x26;utm_content=group3_Answer&#x26;utm_campaign=shareopn\">Visual Studio Code 可以翻盘成功主要是因为什么？</a>》。</p>\n<p><a name=Vdjle></a></p>\n<h3>VsCode 网页编辑器</h3>\n<p>接着，我打开 Terminal，想运行 docker-compose up -d 以像在本地启动 GitLab 实例一样在网页编辑器中启动 GitLab，看到了 Terminal 不被支持，但是不要慌，点击“继续”按钮就打开了 CodeSpace。（当然，后来知道了可以直接输入 <a href=\"https://github.com/codespaces\">https://github.com/codespaces</a> 打开已经新建过的项目，而不用每次重新创建）</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1630392461366-a585cad8-ce48-4d3a-8b60-60a056da0321.png#clientId=ua88e5981-122e-4&#x26;from=paste&#x26;id=ud67f0740&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=487&#x26;originWidth=976&#x26;originalType=binary%E2%88%B6=1&#x26;size=67796&#x26;status=done&#x26;style=none&#x26;taskId=u2822c38c-937a-4d1c-b5a3-0b7855f9f7f\" alt=\"image.png\"></p>\n<p>点击“继续”按钮后，就来到了 CodeSpace，仍然是熟悉的 VsCode 编辑器。但是这里的 Terminal 可以使用。运行 docker-compose up -d 。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1630392591908-87be1bb4-1983-47cc-b4ab-8f754b61980b.png#clientId=ua88e5981-122e-4&#x26;from=paste&#x26;id=ua4156a75&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=687&#x26;originWidth=1189&#x26;originalType=binary%E2%88%B6=1&#x26;size=144714&#x26;status=done&#x26;style=none&#x26;taskId=u5bc05d6f-6a7d-4a51-ab92-6e4bfeb5e2e\" alt=\"image.png\"></p>\n<p>实例启动后，就可以在网页端打开了，记住 docker-compose.yml 中配置了 8929 这个端口。按下 Cmd+Shift+P 键，选择 docker 容器插件提供的在浏览器打开功能，依次选择应用，端口：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1630392747369-7dd62f04-adde-4390-9d91-1ecfa86dd68a.png#clientId=ua88e5981-122e-4&#x26;from=paste&#x26;id=u7697c11a&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=354&#x26;originWidth=1281&#x26;originalType=binary%E2%88%B6=1&#x26;size=99405&#x26;status=done&#x26;style=none&#x26;taskId=u65e9f0e5-76a5-47cc-91b2-89ebc9b7831\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1630392774772-eb525e20-4a29-4342-a7c4-3e4dfdba516d.png#clientId=ua88e5981-122e-4&#x26;from=paste&#x26;id=u394ef1e4&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=249&#x26;originWidth=1306&#x26;originalType=binary%E2%88%B6=1&#x26;size=57729&#x26;status=done&#x26;style=none&#x26;taskId=u761ec28b-6328-476d-8ae3-7eeb4843d82\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1630392786680-046c1d6a-44a1-4089-b649-06badf2b07d7.png#clientId=ua88e5981-122e-4&#x26;from=paste&#x26;id=u3639bbde&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=224&#x26;originWidth=1247&#x26;originalType=binary%E2%88%B6=1&#x26;size=54609&#x26;status=done&#x26;style=none&#x26;taskId=uf113f340-22ce-4e14-a0e7-d9ae58392bf\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1630392802571-d42696f6-a428-48c3-af4c-4c85405a1da1.png#clientId=ua88e5981-122e-4&#x26;from=paste&#x26;id=ud0f5a69e&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=276&#x26;originWidth=1290&#x26;originalType=binary%E2%88%B6=1&#x26;size=64838&#x26;status=done&#x26;style=none&#x26;taskId=ub46cc56b-46d6-4de3-b8d4-a858777d40d\" alt=\"image.png\"></p>\n<p>这样就在新窗口中打开了： <a href=\"https://jeff-tian-gitlab-wq766wrh9r57-8929.githubpreview.dev/users/sign_in\">https://jeff-tian-gitlab-wq766wrh9r57-8929.githubpreview.dev/users/sign_in</a></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1630392848266-19e9e952-f29a-43b6-868e-9fd1209666d6.png#clientId=ua88e5981-122e-4&#x26;from=paste&#x26;id=u21406125&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=500&#x26;originWidth=1357&#x26;originalType=binary%E2%88%B6=1&#x26;size=59599&#x26;status=done&#x26;style=none&#x26;taskId=ufaaadbba-48b7-483f-a155-f63e9a2fc58\" alt=\"image.png\"></p>\n<p>GitLab 实例就这样部署好了，而且连 https 以及证书，都被 CodeSpace 搞定了，外网也可以访问！</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1630393013936-96d3a1b5-100e-479f-80de-35c069be35d9.png#clientId=ua88e5981-122e-4&#x26;from=paste&#x26;id=uf9efd981&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=679&#x26;originWidth=1103&#x26;originalType=binary%E2%88%B6=1&#x26;size=117676&#x26;status=done&#x26;style=none&#x26;taskId=u48fa0936-f06c-44cb-890d-9ebfbe337a1\" alt=\"image.png\"></p>\n<p><a name=fJQPc></a></p>\n<h2>配置 KeyCloak</h2>\n<p>接下来，需要在 Keycloak 中配置 GitLab 客户端，因为我们的目的是在 GitLab 中启用 Keycloak 登录，那么 Keycloak 就是一个 IDP 了，而 GitLab 是其一个 OAuth 2 客户端应用。要将 Keycloak 当作 IDP，一般有两种形式，OIDC 形式和 SAML 形式。</p>\n<p>使用 OIDC 的形式集成，有两篇文章做过详细的介绍：</p>\n<ul>\n<li>《<a href=\"https://zhuanlan.zhihu.com/p/360846976\">使用 OIDC 在一个 Keycloak 中集成另一个 Keycloak 用户认证</a>》</li>\n<li>《<a href=\"https://zhuanlan.zhihu.com/p/359057316\">在 eggjs 中集成 Keycloak 用户认证</a>》</li>\n</ul>\n<p>如果对这种集成方式感兴趣，可以详细参考。这里准备采用 SAML 方式集成，以便补充这种集成方式的实战。实际上，网上已经有一些 GitLab 和 Keycloak 采用 SAML 集成的文章了，但是采用了非常复杂的方法，因此整篇文章都在讲集成细节。这里采用了一个简单的方式，只需要一小节介绍即可。</p>\n<p><a name=SU46z></a></p>\n<h3>导出 GitLab 的 SAML 元数据 xml 定义</h3>\n<p>对于支持 SAML 集成的应用，可以访问其 /users/auth/saml/metadata 获得其 SAML 源数据信息。将其保存到本地：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1630393978383-f25cc4eb-148c-47b6-8a18-b570c86cf85e.png#clientId=ua88e5981-122e-4&#x26;from=paste&#x26;height=200&#x26;id=ucc105553&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=400&#x26;originWidth=1814&#x26;originalType=binary%E2%88%B6=1&#x26;size=179095&#x26;status=done&#x26;style=none&#x26;taskId=u19899639-86a2-4a7b-a972-26861eedd2f&#x26;width=907\" alt=\"image.png\"></p>\n<p><a name=pyXQ5></a></p>\n<h3>在 Keycloak 中导入 GitLab 的 SAML 元信息</h3>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1630394128380-da47a69a-1281-45b4-8e71-06a645a19dd1.png#clientId=ua88e5981-122e-4&#x26;from=paste&#x26;id=u7210c706&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=427&#x26;originWidth=1051&#x26;originalType=binary%E2%88%B6=1&#x26;size=85686&#x26;status=done&#x26;style=none&#x26;taskId=u244988cc-0d77-4356-8648-7ca4ba442cd\" alt=\"image.png\"></p>\n<p><a name=vf56e></a></p>\n<h3>在 Keycloak 中添加 GitLab 客户端的 email 映射</h3>\n<p>你可以添加更多的映射，以便把 Keycloak 中的用户信息映射到 GitLab 系统。但是只有 email 是必须的。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1630394247926-3e67153d-8063-4d4e-879c-97372aceb80a.png#clientId=ua88e5981-122e-4&#x26;from=paste&#x26;id=u4dbbf920&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=596&#x26;originWidth=977&#x26;originalType=binary%E2%88%B6=1&#x26;size=78487&#x26;status=done&#x26;style=none&#x26;taskId=u28d05c58-8977-4022-aff0-62b5a62ebca\" alt=\"image.png\"></p>\n<p><a name=KKhoP></a></p>\n<h2>配置 GitLab</h2>\n<p>现在，Keycloak 中已经有了我们新部署的 GitLab 实例信息，现在需要配置 GitLab，让它知道我们部署好的 Keycloak 实例信息。</p>\n<p>首先，需要记下 Keycloak 应用对应的 Realm 的 url，以及拷贝一下它的证书信息：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1630394430134-13831937-2f44-4c40-ae14-9ef628bbfb55.png#clientId=ua88e5981-122e-4&#x26;from=paste&#x26;height=250&#x26;id=u7ab3b749&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=500&#x26;originWidth=1874&#x26;originalType=binary%E2%88%B6=1&#x26;size=177204&#x26;status=done&#x26;style=none&#x26;taskId=uf19dbea5-2883-4349-8484-c3dd18d1018&#x26;width=937\" alt=\"image.png\"></p>\n<p>然后，回到 CodeSpaces，进入到 GitLab docker 镜像里：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1630394489329-33078b63-559e-4688-ad5e-246ed193d2cd.png#clientId=ua88e5981-122e-4&#x26;from=paste&#x26;id=u69e7d533&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=579&#x26;originWidth=848&#x26;originalType=binary%E2%88%B6=1&#x26;size=127617&#x26;status=done&#x26;style=none&#x26;taskId=uae444e52-21b2-44c8-a683-00655d86612\" alt=\"image.png\"></p>\n<p>在 shell 里，进入到 /etc/gitlab 目录，输入 vi gitlab.rb 命令，贴入一段 Keycloak 相关的配置：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1630394663792-9505dd3d-fc81-4430-94d2-ae547965cab8.png#clientId=ua88e5981-122e-4&#x26;from=paste&#x26;id=ub4454d69&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=598&#x26;originWidth=1203&#x26;originalType=binary%E2%88%B6=1&#x26;size=129411&#x26;status=done&#x26;style=none&#x26;taskId=u6b63e33c-a706-43bb-ae2d-837014fc1e7\" alt=\"image.png\">\n配置的文本内容如下，注意替换相关 url 和具体证书内容。</p>\n<p>ruby\ngitlab_rails[omniauth_enabled] = true\ngitlab_rails[omniauth_allow_single_sign_on] = [saml]</p>\n<h1>gitlab_rails[omniauth_auto_sign_in_with_provider] = saml</h1>\n<p>gitlab_rails[omniauth_block_auto_created_users] = false</p>\n<h1>gitlab_rails[omniauth_auto_link_ldap_user] = false</h1>\n<p>gitlab_rails[omniauth_auto_link_saml_user] = true\ngitlab_rails[omniauth_providers] = [\n{\nname: saml,\nargs: {\nassertion_consumer_service_url: <a href=\"https://jeff-tian-gitlab-wq766wrh9r57-8929.githubpreview.dev/users/auth/saml/callback\">https://jeff-tian-gitlab-wq766wrh9r57-8929.githubpreview.dev/users/auth/saml/callback</a>,\nidp_cert:  -----BEGIN CERTIFICATE-----\nn MIIC...WWDcIuuyzUn -----END CERTIFICATE----- n,\nidp_sso_target_url: https://keycloak.jiwai.win/auth/realms/UniHeart/protocol/saml/clients/jeff-tian-gitlab-wq766wrh9r57-8929.githubpreview.dev,\nissuer: jeff-tian-gitlab-wq766wrh9r57-8929.githubpreview.dev,\nname_identifier_format: urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\n},\nlabel: KEYCLOAK 登录\n}\n]</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1630394725556-26dd3283-e7a3-461a-828e-56aa82d6a97a.png#clientId=ua88e5981-122e-4&#x26;from=paste&#x26;id=u976c9546&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=568&#x26;originWidth=1432&#x26;originalType=binary%E2%88%B6=1&#x26;size=120818&#x26;status=done&#x26;style=none&#x26;taskId=u0f94025d-7163-4d77-b98b-2cc213a8dcb\" alt=\"image.png\"></p>\n<blockquote>\n<p><strong>小提示</strong>：这里是在网页中操作 vi，进入编辑模式后，要退出到普通模式，不能采用一般的 Esc 或者 Ctrl + [ 键，因为这只会让浏览器编辑器失去焦点。这应该是 VsCode 网页编辑器可以进一步优化的点，目前绕过这个问题的方式是，Ctrl + C ，退出插入模式的同事，不失去焦点。</p>\n</blockquote>\n<p>输入 :wq 保存并退出配置文件，然后重启 GitLab：<strong><em>gitlab-ctl reconfigure</em></strong>。</p>\n<p>重新打开 GitLab，就会看到登录框下多了一个 “Keycloak 登录” 选项：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1630395353012-bc57a4e5-54ad-40aa-8b62-4e32ca69e04a.png#clientId=ua88e5981-122e-4&#x26;from=paste&#x26;id=u02f6599f&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1346&#x26;originWidth=2496&#x26;originalType=binary%E2%88%B6=1&#x26;size=220988&#x26;status=done&#x26;style=none&#x26;taskId=u50f8113d-a5a1-4b32-b04d-c68d73890c0\" alt=\"image.png\"></p>\n<p><a name=MlIk3></a></p>\n<h2>体验</h2>\n<p>如展示小节的视频展示，登录成功后可以对比一下用户资料，匹配！</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1630395559662-23732adc-e706-4e5c-99f9-61ed232817cb.png#clientId=ua88e5981-122e-4&#x26;from=paste&#x26;id=u8ca68c74&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1064&#x26;originWidth=2652&#x26;originalType=binary%E2%88%B6=1&#x26;size=273914&#x26;status=done&#x26;style=none&#x26;taskId=u592f9821-2f5b-44a9-a624-cffff3ba839\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1630395608464-2e1277ea-205c-4120-8431-4cdbfc4cde44.png#clientId=ua88e5981-122e-4&#x26;from=paste&#x26;id=uac5e9f4f&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=804&#x26;originWidth=2334&#x26;originalType=binary%E2%88%B6=1&#x26;size=151509&#x26;status=done&#x26;style=none&#x26;taskId=u4acc34fc-2a85-4f0e-b949-41c7cbb0b36\" alt=\"image.png\"></p>\n<p><a name=Ep1IC></a></p>\n<h1>总结</h1>\n<p>通过薅 CodeSpace 羊毛的方式，部署了 GitLab 企业版实例，并通过配置的方式，对接 Keycloak 登录。</p>\n<p><a name=ZedTO></a></p>\n<h1>后期工作</h1>\n<p>目前通过 Docker-compose，使用了 GitLab 官方镜像，在对接 Keycloak 时还有些手动步骤。后面可以把配置好的 GitLab 打包成自定义镜像，以实现 0 配置对接。</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"本站源码","url":"https://github.com/Jeff-Tian/space","style":"link","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}