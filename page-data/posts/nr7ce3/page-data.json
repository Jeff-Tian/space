{"componentChunkName":"component---src-templates-post-js","path":"/posts/nr7ce3","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/nr7ce3","relativePath":"posts/nr7ce3","frontmatter":{"title":"常见授权机制对比以及选型建议","stackbit_url_path":"posts/nr7ce3","date":"2022-09-15T13:05:34","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<p><a name=YVvJI></a></p>\n<h1>结论</h1>\n<p>数字化系统的授权机制，一共有好几十种。对于企业内部系统来说，我极力推荐 <strong>ABAC</strong>。</p>\n<blockquote>\n<p>别再使用 RBAC 了！ ABAC，应用尽用。</p>\n</blockquote>\n<p><a name=ajv72></a></p>\n<h1>认证</h1>\n<p>尽管认证和授权是两回事，但总是成对出现。而对企业的数字化系统来说，认证又分为对外认证和对内认证，或者说是对最终用户认证和对内部员工认证。我本以为对公司来说，外部用户是最重要的，所以对外认证要比对内认证更加复杂，因为对内认证往往怎么简单怎么来，事实上，很多企业还真的是这样做的。然而出乎我的意料，对内认证其实更加复杂，原因是对外认证往往是单一场景，而对内认证却是多场景。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1663236743899-f2d130dc-0547-4816-bb8a-f53a05557a93.png#clientId=ub4bd44af-d2be-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;id=u92dd0436&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=518&#x26;originWidth=928&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=131192&#x26;status=done&#x26;style=none&#x26;taskId=u68e02a9d-a955-4927-99fd-0263399aa7f&#x26;title=\" alt=\"image.png\"></p>\n<p>一般来说，对外认证就是一个登录场景，没有太多的访问控制，即要么是非登录态，只能访问少量公开资源；要么是登录态，可以访问所有资源。但是对内认证的场景多样，其访问控制机制也相应地纷繁复杂。以下详解几个常见的访问控制机制。</p>\n<p><a name=VgH8U></a></p>\n<h1>授权/访问控制模型</h1>\n<p>授权，也叫访问控制，都是做允许或者禁止某个用户做某件事情的决定。一个最高层次的抽象模型图示意如下：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1663237065729-8e30e685-cb1a-4ec7-93de-793c5dd387ef.png#clientId=ub4bd44af-d2be-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;id=u976e86a4&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=502&#x26;originWidth=1008&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=64118&#x26;status=done&#x26;style=none&#x26;taskId=ud5216796-f407-47eb-bd4b-e3640d69754&#x26;title=\" alt=\"image.png\"></p>\n<ul>\n<li><strong>主体</strong>，是请求的发起者。可以是用户、也可以是进程、应用、设备等。</li>\n<li><strong>客体</strong>，是请求的接收方。可以是一个 API、一个文件、一个数据库等资源。</li>\n<li><strong>请求</strong>，是主体对客体进行的操作，比如读、写、执行等。</li>\n</ul>\n<p><a name=ey93E></a></p>\n<h1>常见的访问控制机制</h1>\n<p>业界上的访问控制机制特别多，这里列举几个常见的，并在后面对比一下它们的优缺点。</p>\n<ul>\n<li>**ACL **(Access Control Lists)，访问控制列表。需要管理员为每个资源（客体）显式分配权限。</li>\n<li>**RBAC **(Role-Based Access Control)，基于角色的访问控制。于 2000 年开始流行，它定义了一系列的角色与权限之间的关系。</li>\n<li><strong>GBAC</strong> (Group-Based Access Control)，可以维护具有层级关系的群组权限。</li>\n<li><strong>DAC</strong> (Discretionary Access Control)，自主访问控制。让资源（客体）所有者来定义访问控制规则。</li>\n<li><strong>MAC</strong> (Mandatory Access Control)，强制访问控制。基于安全级别标签的访问控制策略，其安全性最高。</li>\n<li><strong>Claims as Permissions</strong>，基于声明的访问控制。很多企业或组织都在某种形式上使用了这种机制。</li>\n<li><strong>ABAC</strong> (Attribute-Based Access Control policy)，基于属性的访问控制策略，它不将访问权限直接赋予给用户，而且通过评估一些布尔规则来为资源（客体）授予访问权限。</li>\n</ul>\n<p><a name=VEpQk></a></p>\n<h2>ACL</h2>\n<p>这是一种比较古老的权限控制机制，它是面向资源的访问控制模型。管理员为每个资源（客体）分配权限列表，这个列表里记录了用户/角色对于资源的操作权限，当需要访问这些资源时，会首先检查访问控制列表中是否存在当前用户/角色的访问权限，如果存在，允许相应的操作，否则就拒绝相应的操作。<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1663252438176-d34163ec-dd00-48b7-90f4-554e91f1ba80.png#clientId=ue666256a-2777-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=709&#x26;id=u4cdc5242&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=798&#x26;originWidth=1725&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=102224&#x26;status=done&#x26;style=none&#x26;taskId=u8755ed7f-c03f-479b-a590-c0d100cb88d&#x26;title=&#x26;width=1533.3333333333333\" alt=\"image.png\"><br />ACL 的核心思路是将某个对象的某种权限授予某个用户或者某个角色，它们之间的关系是多对多。\n<a name=EytsB></a></p>\n<h3>好处</h3>\n<ul>\n<li>实施起来最简单</li>\n</ul>\n<p><a name=RtNkN></a></p>\n<h3>坏处</h3>\n<ul>\n<li>一旦要修改安全策略或者需要审计，就意味着需要遍历大量的资源；</li>\n<li>应用开发者必须保证所有的资源在创建出来开始就有合适的保护措施。</li>\n</ul>\n<p><a name=tKPbn></a></p>\n<h2>RBAC</h2>\n<p>基于角色的访问控制，应用特别广泛。它是防止权限泛滥，实现最小特权原则的经典解决方案。RBAC 将用户按角色分类，通过用户的角色来确定用户对某项资源是否具备操作权限，它简化了用户与权限的管理，将用户与角色关联，角色与权限关联，然后权限与资源关联。<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1663252693216-c76d2d64-3e2e-47fa-a425-d3c9e1cbabcb.png#clientId=ue666256a-2777-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=374&#x26;id=u0a03579c&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=421&#x26;originWidth=912&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=48574&#x26;status=done&#x26;style=none&#x26;taskId=u70432c24-1eaf-47fa-a682-a763610f687&#x26;title=&#x26;width=810.6666666666666\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1663252586324-b203df5b-af5b-4f9f-bdf3-41073622eced.png#clientId=ue666256a-2777-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=528&#x26;id=u39100bce&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=594&#x26;originWidth=923&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=79283&#x26;status=done&#x26;style=none&#x26;taskId=u96436d27-a2db-4970-b68d-1811dde1da0&#x26;title=&#x26;width=820.4444444444445\" alt=\"image.png\">\n<a name=ZwfpO></a></p>\n<h3>好处</h3>\n<ul>\n<li>比 ACL 更具扩展性</li>\n<li>在粗粒度的访问控制中工作得特别好<br />比如这样的场景：拥有经理角色的用户可以批准采购单。</li>\n</ul>\n<p><a name=eQ3qR></a></p>\n<h3>坏处</h3>\n<ul>\n<li>随着组织的演进，往往出现角色爆炸的现象；<br />比如在一开始，一个销售的角色可以访问客户记录，这很合理。随着组织的扩张，开始组建按地域划分的销售团队，于是对客户记录的访问也需要按照地域来进行限制，这就导致系统中分别增加了美洲区的销售角色和亚太区的销售角色。</li>\n<li>当管理员更新用户的权限时，需要大量的手工操作；</li>\n<li>做不到细粒度的访问控制；<br />比如这样的场景就做不到：经理只能批准其部门产生的采购单。<br />为了解决这种场景下的问题，应用开发者需要在应用里写额外的代码来做相应的检查，这导致了一个访问控制被分别定义在了两个不同的地方。从而导致了\n<ul>\n<li>安全管理成本变高</li>\n<li>合规和审计变得困难</li>\n<li>安全策略缺少单一视图</li>\n</ul>\n</li>\n<li>资源与角色紧藕合，改一个角色会影响多个资源</li>\n</ul>\n<p><a name=lJBEQ></a></p>\n<h2>GBAC</h2>\n<p>基于群组的访问控制机制。看上去和 RBAC 很像，但是 GBAC 可以用来对一个或多个具有层级关系的群组来定义访问资源的权限。它允许将某个群组的访问权限继承到其下级群组中，当然，也可以选择不去继承。<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1663253395540-57eea4ed-1deb-41c4-935b-c68fc69282ef.png#clientId=ue666256a-2777-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;id=u56e4bf7d&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1075&#x26;originWidth=1916&#x26;originalType=url%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=147249&#x26;status=done&#x26;style=none&#x26;taskId=ufae32d2e-8c75-49e2-b6a3-6db47dfb738&#x26;title=\" alt=\"image.png\">\n<a name=qfsX4></a></p>\n<h3>好处</h3>\n<ul>\n<li>很适合用于公司的组织架构权限</li>\n</ul>\n<p><a name=XtZ69></a></p>\n<h3>坏处</h3>\n<p>同 RBAC。</p>\n<ul>\n<li>另外，如果公司的组织结构关系维护在别的系统中（比如 Azure AD 、SAP 或者企业微信中），那么容易造成群组关系维护困难（一个改变需要同步好几个系统）</li>\n</ul>\n<p><a name=Uo7Sz></a></p>\n<h2>DAC</h2>\n<p>自主访问控制，让客体（资源）的所有者来定义访问控制规则。它是 Trusted Computer System Evaluation Criteria （TCSEC）定义的和一种访问控制机制，在 DAC 中，系统会根据被操作对象的权限控制列表中的信息，来决定当前用户能够对其进行哪些操作，用户可以将其具备权限直接或者间接授予其他用户。</p>\n<p>比如百度网盘的资源上传者，需要将文件分享给他人时，就可以定义是对所有人公开，还是只对百度网盘用户公开，还是只对知道密码的人公开等等，并且可以定义对哪些人只读，对哪些人可以修改等等权限。<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1663239910333-dc895e23-dbbb-4fba-ac91-f3071203b950.png#clientId=ub4bd44af-d2be-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;id=ufe2bd15b&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=390&#x26;originWidth=670&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=48257&#x26;status=done&#x26;style=none&#x26;taskId=ub1ac92d9-4cc8-4038-8fcd-38f1c00d14c&#x26;title=\" alt=\"image.png\"></p>\n<p><a name=L0MeN></a></p>\n<h3>好处</h3>\n<ul>\n<li>灵活</li>\n<li>维护成本低</li>\n<li>降低了管理员的工作难度</li>\n</ul>\n<p><a name=D1SAZ></a></p>\n<h3>坏处</h3>\n<ul>\n<li>增强了整体访问控制监管的难度</li>\n<li>安全性没有保证，完全取决于所有者的个人安全意识</li>\n</ul>\n<p><a name=mWuvN></a></p>\n<h2>MAC</h2>\n<p>强制访问控制，通过定义安全级别标签来进行访问控制，也叫非自主访问控制，它可以限制主体对资源（客体）执行某种操作。它的安全策略由安全策略管理员集中控制，用户无权覆盖策略。比如为了保证机密性，MAC 不允许低级别的主体读取高级别的客体、不允许高级别的主体写入低级别的客体；为了保证完整性，MAC 不允许高级别的主体读取低级别的客体，不允许低级别的主体写入高级别的客体。一般普通公司不会采取 MAC，除非有相应的合规要求。</p>\n<p><a name=OlpOb></a></p>\n<h3>好处</h3>\n<ul>\n<li>非常安全</li>\n</ul>\n<p><a name=rH5uO></a></p>\n<h3>坏处</h3>\n<ul>\n<li>对实施要求很高</li>\n<li>需要对所有数据进行标记</li>\n</ul>\n<p><a name=sWzuH></a></p>\n<h2>Claims as Permissions</h2>\n<p>基于声明式的权限管理。这常常和 RBAC 结合使用，以弥补 RBAC 在细粒度的访问控制中的不足。如果我们想给 HR 部门的 Sally 一个临时的权限，来帮助用户 Bob 来申报采购单，可以声明式地为 Sally 直接添加特殊的权限，如：\njson\n{\nsub: 1234567890,\nname: Sally,\nrole: manager,\ndepartment: personal,\ncanRaiseAPurchaseOrder: true,\nmaxValueForPurchaseOrder: 1000,\n}</p>\n<p><a name=ZVYre></a></p>\n<h3>好处</h3>\n<ul>\n<li>非常灵活</li>\n</ul>\n<p><a name=rIEQt></a></p>\n<h3>坏处</h3>\n<ul>\n<li>难以审计</li>\n<li>难以验证正常的人拥有正确的权限</li>\n<li>需要重新变动人员组织和责任时，需要手动流程</li>\n<li>管理员倾向于添加越来越多的权限，但很少移除它们</li>\n<li>决策数据定义在安全系统中，又被复制到其他的系统中，容易导致不一致发生</li>\n<li>对于采用了 OAuth 或者 OpenID 单点登录的方案，在用户的令牌中携带全量用户权限，容易出现体积非常大的访问令牌</li>\n<li>在用户身份声明中携带权限信息，导致认证和授权含混在一起</li>\n</ul>\n<p><a name=KQH1s></a></p>\n<h2>声明与应用逻辑混合方案</h2>\n<p>以上几种访问控制机制都有如下特征：</p>\n<ul>\n<li>静态规则</li>\n<li>手动管理权限</li>\n<li>审计成本高</li>\n<li>适应组织的变化成本高</li>\n</ul>\n<p>对基于声明式的权限管理进行改进，就得到了声明与应用逻辑混合起来的方案，如：</p>\n<p>javascript\n{\nsub: 1234567890,\nname: John Doe,\nrole: manager,\ndepartment: sales\n}</p>\n<p>var maxPo = FindMaxPoValue(department)\nIf ( role ==‘manager’ &#x26;&#x26; poTotal &#x3C; maxPo )</p>\n<p>这样就规避了从原始系统复制决策数据到用户令牌中的问题，而是从原始系统去获取数据。如果 John 从一个部门转移到了另一个部门，其采购单的金额上限会从新的部门中获取。\n<a name=ozAbf></a></p>\n<h3>好处</h3>\n<ul>\n<li>IT 管理员只需要管理身份</li>\n<li>访问控制决策从信息源头获取，而不是在访问控制系统中的拷贝。</li>\n</ul>\n<p><a name=guuFp></a></p>\n<h3>坏处</h3>\n<ul>\n<li>不容易审计：审计员需要读应用代码</li>\n<li>更新访问控制逻辑需要重新部署应用</li>\n<li>认证和授权仍然混在一起，没能做到关注点分离</li>\n</ul>\n<p><a name=LX19H></a></p>\n<h1>ABAC</h1>\n<p>看了以上种种机制，各有优缺点。那么有没有一个完美的授权机制呢？我们开始呼唤这样的访问控制解决方案：</p>\n<ul>\n<li>能够地从组织内部自然获取到的信息来做访问控制决策</li>\n<li>没有额外的管理成本</li>\n<li>可以在不需要部署应用的情况下更改这个决策</li>\n<li>所有的利益相关者都能阅读</li>\n<li>易于审计</li>\n</ul>\n<p>这样的访问控制解决方案真的存在吗？其实 ABAC 就是这样的一种解决方案。它是基于属性的访问控制，有时也被称为 PBAC (Policy-Based Access Control)。它不给用户直接赋予访问权限，而是通过执行一系列的布尔规则来为资源授权（动态计算一个或者一组属性是否满足某一条件来进行授权）。ABAC 中一般来说包含用户属性、环境属性、操作属性以及资源属性。比如，以下是一个表达门禁访问权限的伪代码：</p>\n<blockquote>\n<p>如果当前时间在 8 点到 18 点之间，并且用户拥有员工角色</p>\n</blockquote>\n<p>驱动这些规则的数据被称为属性，可以从任何地方获得，而不局限于身份声明。比如当前时间（环境属性）、资源拥有者（资源属性）等等。<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1663252769235-682a6f76-3c81-4908-b7e7-247a169f86b6.png#clientId=ue666256a-2777-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;id=u16339d69&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=702&#x26;originWidth=1917&#x26;originalType=url%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=140141&#x26;status=done&#x26;style=none&#x26;taskId=udaab2672-e8bb-405c-93f8-f0c6cd4a62f&#x26;title=\" alt=\"image.png\"><br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1663253011127-508b4905-ff38-4ac2-946f-6a54715361aa.png#clientId=ue666256a-2777-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;id=u5883610f&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1000&#x26;originWidth=1916&#x26;originalType=url%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=198994&#x26;status=done&#x26;style=none&#x26;taskId=u3255b73f-8ff8-475f-9da5-4a3d9b2dd8f&#x26;title=\" alt=\"image.png\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1663252895918-31c432d6-4045-4c5f-ba9d-c9a823871718.png#clientId=ue666256a-2777-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;id=u94653176&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=697&#x26;originWidth=1917&#x26;originalType=url%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=140158&#x26;status=done&#x26;style=none&#x26;taskId=u1aa5b920-fb81-4f36-9d63-a85ea2990f1&#x26;title=\" alt=\"image.png\"><br />ABAC 和所有之前介绍过的机制都不同，当安全需求变化时，ABAC 不需要手动调整具体权限。它只需要设定好策略逻辑，就能使得所有资源的访问控制都立即生效。因此，ABAC 是一种抽象程度更高的机制。它不从单一安全系统中获取决策属性，而是可以从组织中的任何地方获取。</p>\n<p>其实 ABAC 也存在很多年了，NIST 组织对 ABAC 做了正式的定义，这个正式的定义包含如下组件：</p>\n<ul>\n<li>策略实施点（<strong>PEP</strong>），在资源服务器处提供不同的环境来实施授权决策。<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1663253038492-f57efd3e-c613-44e1-b9bd-9a9bebae1de8.png#clientId=ue666256a-2777-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;id=u542305e5&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=919&#x26;originWidth=1916&#x26;originalType=url%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=166551&#x26;status=done&#x26;style=none&#x26;taskId=uf090df6b-9507-494c-860f-7d8b97ffb0c&#x26;title=\" alt=\"image.png\"></li>\n<li>策略决策点（<strong>PDP</strong>），提供分布式策略决策点。授权请求被发送到此处，策略在这里根据请求的权限来评估。</li>\n<li>策略访问点（<strong>PAP</strong>），通常是一组 UI 管理界面，用来管理资源服务器、资源、范围、权限和策略。<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1663253066989-22652568-c951-4483-86e5-4145e3aee1de.png#clientId=ue666256a-2777-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;id=ucca06b8c&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1147&#x26;originWidth=1916&#x26;originalType=url%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=299142&#x26;status=done&#x26;style=none&#x26;taskId=ue0bd32f0-cc5a-4666-a67e-24c60c07b0d&#x26;title=\" alt=\"image.png\"></li>\n<li>策略信息点（<strong>PIP</strong>），当评估授权策略时从运行环境中的身份声明里获取属性。</li>\n</ul>\n<p>当需要决定允许还是拒绝一个请求时，应用代码与 PEP 交互。PEP 构建了请求的上下文，并询问 PDP 的决定结果。而 PDP 从 PAP 处拉取策略，并使用上下文中的属性以及从 PIP 获取额外的属性，来对请求进行评估。从而，PAP 可以在策略存储中响应变化，而不需要重新部署应用。<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1663243706072-73fbf596-3427-4d9a-935e-70f5d9e5ac70.png#clientId=ub4bd44af-d2be-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;id=u7acc517f&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=694&#x26;originWidth=902&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=145045&#x26;status=done&#x26;style=none&#x26;taskId=uf2ce4d0b-cf27-4eda-9a58-e260701f651&#x26;title=\" alt=\"image.png\"><br />很多 ABAC 解决方案基于 OASIS XACML 架构，安全专家通过 XML 来定义访问控制策略。但是除此之外，还有另外的领域特定语言（DSL）可以用来定义访问控制策略，比如 ALFA，大致长这样:\njava\nnamespace AcmeCorp.DoorPolicy\n{\nimport Oasis.Attributes</p>\n<p>policy buildingAccess\n{\ntarget clause ResourceType == door\napply denyUnlessPermit</p>\n<pre><code> // Employees can open the door during office hours only\n rule openMainDoor\n {\n   target clause Resource == mainDoor and\n                 Action == open\n   permit\n   condition Subject.Role == employee and\n             CurrentTime >= 08:00:00:time and\n             CurrentTime &#x3C; 18:00:00:time\n  }\n}\n</code></pre>\n<p>}</p>\n<p>ALFA 的目标是希望几乎所有人都能阅读和验证策略的意图。使用领域特定语言（DSL）编写安全策略，所有审计员以及业务利益相关方都可以根据组织的职责贡献和验证安全策略并演进。如果觉得学习一门新的 DSL 也是成本，那么有些解决方案（比如知名开源身份与访问管理系统 Keycloak）还直接采用了广泛使用的 JavaScript 来做为策略 DSL。\njavascript\nconst context = $evaluation.getContext();\nconst contextAttributes = context.getAttributes();</p>\n<p>if (contextAttributes.containsValue(kc.client.network.ip_address, 127.0.0.1)) {\n$evaluation.grant();\n}</p>\n<p><a name=xeo6M></a></p>\n<h3>好处</h3>\n<p>拥有我们所呼唤的所有特性，即</p>\n<ul>\n<li>能够地从组织内部自然获取到的信息来做访问控制决策</li>\n<li>没有额外的管理成本</li>\n<li>可以在不需要部署应用的情况下更改这个决策</li>\n<li>所有的利益相关者都能阅读</li>\n<li>易于审计</li>\n</ul>\n<p><a name=TzSEg></a></p>\n<h3>坏处</h3>\n<ul>\n<li>比较复杂</li>\n<li>实施难度较大</li>\n<li>DSL 的学习曲线</li>\n</ul>\n<p><a name=oAKDq></a></p>\n<h1>总结</h1>\n<p>应用主要就是为用户交付功能而设计的，但是一般不是所有用户都能在应用中干所有事情。比如应用中有的特性是保密的，有些需要用户有更高级的订阅（付费）等等。交付这些限制性的功能，同样是应用设计中的关键部分。本文探索了控制访问功能的常见机制，对比了其优缺点，并且<strong>极力推荐在企业的内部系统中，采用 ABAC 方案。</strong>\n<a name=JpXWB></a></p>\n<h1>参考资料</h1>\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/176568?cid=100041701\">安全攻防技能 30 讲</a><br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1663241676629-01698e09-bdb0-4b27-aed9-49b4910a2ff0.png#clientId=ub4bd44af-d2be-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=1105&#x26;id=u744fbe9a&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=2209&#x26;originWidth=1242&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=476756&#x26;status=done&#x26;style=none&#x26;taskId=u18a46ba4-7389-4065-81a5-93208932e67&#x26;title=&#x26;width=621\" alt=\"image.png\"></li>\n<li>《<a href=\"https://www.dedao.cn/ebook/reader?id=5kMLgX2vKGy7x5M8YRoDQbLgqkEeAw2NBRwBNn2r6ljVPO1mX9ad4JZpzZn1RbeE\">深入浅出Spring Security</a>》</li>\n<li><a href=\"https://www.identityserver.com/articles/authorization-what-are-my-options\">https://www.identityserver.com/articles/authorization-what-are-my-options</a></li>\n<li><a href=\"https://www.keycloak.org/docs/latest/authorization_services/index.html\">https://www.keycloak.org/docs/latest/authorization_services/index.html</a></li>\n</ul>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"Made with Stackbit.","url":"https://www.stackbit.com","style":"link","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}