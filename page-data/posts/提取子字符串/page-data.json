{"componentChunkName":"component---src-templates-post-js","path":"/posts/提取子字符串/","result":{"data":{"sitePage":{"id":"SitePage /posts/提取子字符串/"}},"pageContext":{"url":"/posts/提取子字符串/","relativePath":"posts/提取子字符串.md","relativeDir":"posts","base":"提取子字符串.md","name":"提取子字符串","frontmatter":{"title":"提取子字符串","stackbit_url_path":"posts/提取子字符串","date":"2010-04-15 04:35:47","excerpt":"","comments_count":0,"positive_reactions_count":0,"tags":[null],"canonical_url":"https://be-net.azurewebsites.net/post/2010/04/15/提取子字符串","template":"post"},"html":"<pre><code>    &#x3C;p>在编程时，经常会碰到这种情况，我们对一个特定位置出现的子字符串感兴趣，我们需要将它从一大堆字符中提取出来。比如我们可能编写程序来提取一大堆博客网页中的博文，这一大堆博客网页中的博文内容都不相同，但是它们出现的位置是相同的。事实上你可以发现，每个网页，它们的外观是一至的，有着相同的导航条以及侧栏等。通过察看源代码，你会发现，博文内容的前面以及后面，都有着一模一样的HTML代码。而博文内容往往出现在&#x26;lt;div id=\"post-body\"&#x26;gt;标签以及&#x26;lt;/div&#x26;gt;&#x26;lt;!--博文结束注释--&#x26;gt;标签之间。&#x3C;/p>\n</code></pre>\n<p>即形如以下类似的结构：</p>\n<pre class=\"brush: html\">&lt;div id=\"post-body\"&gt;博文内容。博文内容。博文内容。博文内容。&lt;/div&gt;&lt;!--博文结束注释--&gt;</pre>\n<p>而我们要做的，正是需要提取上述标签对之间的内容，而上述标签本身以及它们之前与之后的内容，我们都不感兴趣。</p>\n<p>对于上面的这种需求，我们可以自己编写一个小函数来满足，就叫它 distillSubString 吧。它接受三个参数，第一个s是母字符串，如一篇博文网页的整个HTML代码；第二个参数sPre是前导字符串模板，如&lt;div id=\"post-body\"&gt;；第三个参数sExt是后续字符串模板，如&lt;/div&gt;&lt;!--博文结束注释--&gt;。它返回位于前导字符串模板与后续字符串模板之间的子字符串。</p>\n<p>VB.NET 源码如下：</p>\n<pre class=\"brush: vb\">    ''' &lt;summary&gt;\n    ''' 提取子字符串\n    ''' &lt;/summary&gt;\n    ''' &lt;param name=\"s\"&gt;母字符串&lt;/param&gt;\n    ''' &lt;param name=\"sPre\"&gt;前导字符串模板&lt;/param&gt;\n    ''' &lt;param name=\"sExt\"&gt;后续字符串模板&lt;/param&gt;\n    ''' &lt;returns&gt;位于前导字符串模板与后续字符串模板之间的子字符串&lt;/returns&gt;\n    ''' &lt;remarks&gt;涂鸦，www.myfootprints.cn，2010-4-15&lt;/remarks&gt;\n    Private Function distillSubString(ByVal s As String, ByVal sPre As String, ByVal sExt As String) As String\n        Dim substr As String\n<pre><code>    substr = s.Substring(s.IndexOf(sPre) + sPre.Length)\n    substr = Microsoft.VisualBasic.Left(substr, substr.IndexOf(sExt))\n    distillSubString = substr\nEnd Function\n</code></pre>\n</pre>\n<p>可以这样调用上述函数。</p>\n<pre class=\"brush: vb\">Dim blogContent\nDim parentString = \"&lt;div id=\"\"post-body\"\"&gt;博文内容。博文内容。博文内容。博文内容。&lt;/div&gt;&lt;!--博文结束注释--&gt;\"\n<p>blogContent = distillSubString(parentString, \"&#x3C;div id=\"\"post-body\"\">\", \"&#x3C;/div>&#x3C;!--博文结束注释-->\")</pre></p>\n<p>以上算法是两步剔除法。对于母字符串的副本，先将前导字符串模板及其以前的所有字符剔除。然后，对于剩下的字符串，将后续字符串模板及其以后的字符全部剔除。</p>\n<p>还可以使用这个算法，先找出紧挨着前导字符串模板之后的第一个字符的位置i，这个位置i = 前导字符串模板的开始位置index1加上前导字符串模板的长度；然后再找到后续字符串模板的开始位置index2，并记j = index2 - 1；最后，直接提取母字符串的从第i位置开始到第j位置结束的子字符串。</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","author":"@zizhujy","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"Made with Stackbit.","url":"https://www.stackbit.com","style":"link","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[],"slicesMap":{}}