{"componentChunkName":"component---src-templates-post-js","path":"/posts/idlkas","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/idlkas","relativePath":"posts/idlkas","frontmatter":{"title":"使用 k6 快速测出一个 api 的大致吞吐量","stackbit_url_path":"posts/idlkas","date":"2021-02-22T09:11:47","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<p><a name=ktjYy></a></p>\n<h2>吞吐量</h2>\n<p>如果一个网页应用每秒钟接收到 50 个请求，但是它实际上每秒钟只能处理 30 个，那么另外的 20 个请求就只能在一个队列中等待。在性能测试结果中，吞吐量的表现经常使用 TPS 来表示。</p>\n<p><a name=apOvo></a></p>\n<h2>测试策略</h2>\n<p>可以使用负载测试找到应用的 TPS，其策略是使用一系列的事务组合（平常的和密集的），来看看有多少事务在可接受的时间框架内成功通过。</p>\n<p><a name=0yeGJ></a></p>\n<h2>工具</h2>\n<p>工具上，可以采用高端专业的工具比如 Visual Studio Team System 中的负载测试功能，当然也可以自己写代码来模拟负载。自己写代码衡量请求的响应时间虽然很容易，但是来模拟负载，就需要太多的工作了。Visual Studio Team System 可以让你挑选一系列的事务组合、模拟网络延时，它还将用户的思考时间也考虑进去了、甚至还有测试迭代等等功能，所以采用这个高大上的工具来做负载测试是非常适合的。</p>\n<p>但是，除非是 .NET 技术栈，很少有人会去安装 Visual Studio，且不说安装麻烦，等待时间长，操作上需要太多鼠标点击，各种图形界面操作，非常令人反感。</p>\n<p>可能有人会说，有图形界面操作，多么令人感动啊，怎么会令人反感？是的，图形界面显得更友好，但是太多步骤太多动画就不方便快速做一些实验。所以今天特别介绍使用另一个工具：k6，来做同样的事情。相比 Visual Studio，它轻量化，使用简单。但是它没有图形界面，需要写点代码，这可能极度符合另一拨人（包括我）的口味。</p>\n<p><a name=mXTZy></a></p>\n<h2>k6</h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1613985077778-1eae68e3-c0f0-469b-92f7-65d592c76a2b.png#align=left&#x26;display=inline&#x26;height=317&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=317&#x26;originWidth=284&#x26;size=91624&#x26;status=done&#x26;style=none&#x26;width=284\" alt=\"image.png\"><br />k6 是以开发者为中心，自由开源的负载测试工具，使得性能测试更有效率的同时还让使用者感到极度舒适。其特性有：</p>\n<ul>\n<li>命令行工具和对开发者友好的开放接口</li>\n<li>支持 JavaScript ES2015/ES6 脚本</li>\n<li>对自动化友好，支持自定义检查和定义阀值</li>\n</ul>\n<p><a name=uAJXl></a></p>\n<h2>k6 不是什么</h2>\n<p>虽然 k6 是一个高性能负载测试工具，可以使用 JavaScript 编写测试脚本，但是为了实现这些特性，不得不在架构设计上做一些取舍：</p>\n<ul>\n<li>并不在浏览器里运行<br />由于跳过了浏览器，k6 对系统资源的消耗大幅度降低，让工具自身显著高效。尽管如此，仍然可以使用 k6 来做网站的负载测试，甚至可以从录制好的用户会话中创建出测试。</li>\n<li>并不在 NodeJs 环境里运行<br />JavaScript 在整体上并不适合高性能场景。为达到最高的性能，这个工具采用 Go 语言编写，嵌入了 JavaScript 运行时从而让测试脚本的编写变得容易。如果你要加载 npm 模块或者使用 NodeJs API 的库，你可以使用 webpack 打包 npm 模块然后在测试中加载它们。</li>\n</ul>\n<p><a name=QyQOs></a></p>\n<h2>k6 的负载测试宣言</h2>\n<ul>\n<li>简单的测试胜过没有测试</li>\n<li>负载测试应该面向目标</li>\n<li>负载测试应该由开发者执行（有启发！颠覆三观吗？）</li>\n<li>对开发者的体验特别重要</li>\n<li>只在预生产环境做负载测试</li>\n</ul>\n<p><a name=GtAtH></a></p>\n<h2>k6 的安装</h2>\n<p>详见官方文档，如果是 mac，推荐如下方式：\nshell\nbrew install k6</p>\n<p><a name=ItO8z></a></p>\n<h2>快速测试一个 API 的吞吐量能力</h2>\n<p>首先，确保是非生产环境。其次，找一个终端节点，这里拿一个只返回 OK 的健康检查接口为例。</p>\n<p>然后，写一个 JavaScript 脚本，命名为 k6.js，如下所示：\njavascript\nimport http from k6/http;\nimport { sleep } from k6;</p>\n<p>export let options = {\nstages: [\n{ duration: 2m, target: 100 }, // 低于正常的负载场景\n{ duration: 5m, target: 100 },\n{ duration: 2m, target: 200 }, // 正常负载场景\n{ duration: 5m, target: 200 },\n{ duration: 2m, target: 300 }, // 临界点附近\n{ duration: 5m, target: 300 },\n{ duration: 2m, target: 400 }, // 超出临界点\n{ duration: 5m, target: 400 },\n{ duration: 10m, target: 0 }, // 缩小规模，恢复阶段\n],\n};</p>\n<p>export default function () {\nconst BASE_URL = <a href=\"http://localhost:3000\">http://localhost:3000</a>; // 确保不要用生产环境 URL</p>\n<pre><code>let responses = http.batch([\n    [\n        GET,\n        ${BASE_URL}/v2/health,\n        null,\n        { tags: { name: Health Check } },\n    ],\n]);\n\nsleep(1);\n</code></pre>\n<p>}</p>\n<p>然后从命令行运行 k6：\nshell\nk6 run k6.js</p>\n<p>比如会得到这样的结果：\nshell\nrunning (38m00.7s), 000/400 VUs, 514826 complete and 0 interrupted iterations\ndefault ✓ [======================================] 000/400 VUs  38m0s</p>\n<pre><code>data_received..............: 256 MB 112 kB/s\ndata_sent..................: 44 MB  19 kB/s\nhttp_req_blocked...........: avg=9.88µs  min=0s med=3µs    max=2.29s    p(90)=5µs    p(95)=7µs\nhttp_req_connecting........: avg=261ns   min=0s med=0s     max=1.09ms   p(90)=0s     p(95)=0s\nhttp_req_duration..........: avg=2.12ms  min=0s med=1.18ms max=267.25ms p(90)=4.31ms p(95)=5.85ms\nhttp_req_receiving.........: avg=28.12µs min=0s med=29µs   max=2.66ms   p(90)=46µs   p(95)=55µs\nhttp_req_sending...........: avg=12µs    min=0s med=12µs   max=2.57ms   p(90)=20µs   p(95)=25µs\nhttp_req_tls_handshaking...: avg=0s      min=0s med=0s     max=0s       p(90)=0s     p(95)=0s\nhttp_req_waiting...........: avg=2.08ms  min=0s med=1.12ms max=267.2ms  p(90)=4.25ms p(95)=5.8ms\nhttp_reqs..................: 514826 225.72893/s\niteration_duration.........: avg=1s      min=1s med=1s     max=3.3s     p(90)=1s     p(95)=1s\niterations.................: 514826 225.72893/s\nvus........................: 1      min=1   max=400\nvus_max....................: 400    min=400 max=400\n</code></pre>\n<p>从上面的报告中可以得到一个大概的结论：TPS 约等于 226，即每秒钟可以处理大约 226 个请求。</p>\n<p><a name=VHxuU></a></p>\n<h2>总结</h2>\n<p>本文介绍了一种区别于 Visual Studio Team System 以及 JMeter 这种基于图形界面的负载测试工具，并详细展示了一个最基本的使用步骤。可见真的是非常简单，对开发者友好，特别适合自动化。另外，特别喜欢 k6 的负载测试宣言，首先喜欢它的对开发者友好特性，其次被它的负载测试应该由开发者执行这一条震撼到了。希望对你有启发，欢迎留言分享你是怎么做负载测试的。</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"Full Stack Developer, good at OAuth 2.0","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"本站源码","url":"https://github.com/Jeff-Tian/space","style":"link","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}