{"componentChunkName":"component---src-templates-post-js","path":"/posts/无干扰模式的信息提示-(版本2)/","result":{"data":{"sitePage":{"id":"SitePage /posts/无干扰模式的信息提示-(版本2)/"}},"pageContext":{"url":"/posts/无干扰模式的信息提示-(版本2)/","relativePath":"posts/无干扰模式的信息提示-(版本2).md","relativeDir":"posts","base":"无干扰模式的信息提示-(版本2).md","name":"无干扰模式的信息提示-(版本2)","frontmatter":{"title":"无干扰模式的信息提示 (版本2)","stackbit_url_path":"posts/无干扰模式的信息提示-(版本2)","date":"2010-01-04 16:47:10","excerpt":"","comments_count":0,"positive_reactions_count":0,"tags":[null],"canonical_url":"https://be-net.azurewebsites.net/post/2010/01/04/无干扰模式的信息提示-(版本2)","template":"post"},"html":"<pre><code>    &#x3C;script type=\"text/javascript\" src=\"http://www.myfootprints.cn/jsLib/mfMessage.js\">&#x3C;/script>\n</code></pre>\n<script type=\"text/javascript\">\n<!--\nfunction showMessage(s) {\nvar oInfo = new mfMessage();\noInfo.showMessage(s, true);\n}\n//-->\n</script>\n<div style=\"text-indent: 2em;\">\n<p>两种信息提示方式的对比：</p>\n<p><input type=\"button\" value=\"原始的\" onclick=\"alert('原始的信息提示。');\"> <input type=\"button\" value=\"无干扰\" onclick=\"showMessage('无干扰的信息提示。')\"></p>\n<hr>\n<p>在2009年12月13日，我写了篇博文《<a href=\"http://www.myfootprints.cn/blog/post/NonIntrusiveMessage.html\" title=\"无干扰模式的信息提示\" target=\"_blank\">无干扰模式的信息提示</a>》，其中有文件 mfMessage.js，今天对它进行了一些小的改进，在这里将它贴出来。</p>\n<p>以下是mfMessage.js的源代码，你可以复制到自己的网页应用中，不用作任何修改它就会工作得很好。如果你将它改进得更好，也请慷慨地与我（admin@myfootprints.cn）分享。谢谢！</p>\n<pre class=\"brush: javascript\" style=\"text-indent: 0;\">//\n// mfMessage 对象\n//\nfunction mfMessage(sMessageWindowId) {\n    this.message = '';\n    if (sMessageWindowId) {\n        this.messageWindowId = sMessageWindowId;\n    } else {\n        this.messageWindowId = 'mfMessageWindow';\n    }\n    this._init_ = false;\n    // 通知window对象，在HTML文档加载完成后告诉我（mfMessage对象）一声\n    if (!window.document.body) {\n        this.addEventHandler(window, 'load', function() {\n            window.isReady = true;\n        });\n    } else {\n        window.isReady = true;\n    }\n}\n<p>//\n// 初始化工作\n// 注意：此过程应该在HTML文档加载完成后再调用\n//\nmfMessage.prototype.init = function() {\nif (this.<em>init</em>) { return; }\nif (!window.isReady) { return; }</p>\n<pre><code>var sMessageWindowId = this.messageWindowId;\n\nfunction hideMessage() {\n    var oWin = document.getElementById(sMessageWindowId);\n    oWin.style.display = 'none';\n}\n\n// 如果发现有未销毁的mfMessage对象留下的信息窗口，则删掉它先\nvar oOldWin = document.getElementById(sMessageWindowId);\nif (oOldWin != null) {\n    oOldWin.parentNode.removeChild(oOldWin);\n}\n\nvar oDocFragment = document.createDocumentFragment();\nvar oWin = document.createElement('div');\noWin.setAttribute('id', this.messageWindowId);\noWin.style.display = 'none';\n// 其他CSS属性\noWin.style.position = 'fixed';\noWin.style.left = '0';\noWin.style.top = '0';\noWin.style.width = '100%';\noWin.style.zIndex = '1001';\noWin.style.textAlign = 'center';\n\noDocFragment.appendChild(oWin);\n// 将文档碎片加入到页面的body中\ntry {\n    var oBody = document.body;\n    oBody.insertBefore(oDocFragment, oBody.firstChild);\n} catch (oError) {\n    // 如果在这里碰到了错误，一般是由于HTML文档未加载完成，所以造成 document.body 对象是 null\n    // 应该等到文档加载完成后再来做此操作\n    //        this.addEventHandler(window, 'load', function() {\n    //            var oBody = document.body;\n    //            oBody.insertBefore(oDocFragment, oBody.firstChild);\n    //        });\n}\nthis.addEventHandler(oWin, 'click', hideMessage);\nthis._init_ = true;\n</code></pre>\n<p>};</p>\n<p>//\n// 显示信息\n// 注意：此过程应该在HTML文档加载完成后再调用\n//\nmfMessage.prototype.showMessage = function(vMsg, bNonIntrusive, lDelay) {\nif (vMsg.length &#x3C;= 0) { return; }\nif (window.isReady) {\nif (!this.<em>init</em>) {\nthis.init();\n}\nvar sMessageWindowId = this.messageWindowId;\nfunction hideMessage() {\nvar oWin = document.getElementById(sMessageWindowId);\noWin.style.display = 'none';\n}\nvar oWin = document.getElementById(this.messageWindowId);\ntry {\noWin.removeChild(oWin.firstChild);\n} catch (oError) {\n}\nvar oMessage;\nif (vMsg.constructor == window.Array &#x26;&#x26; vMsg.length > 1) {\noMessage = document.createElement('ul');\nfor (var i = 0; i &#x3C; vMsg.length; i++) {\nvar oMessageLI = document.createElement('li');\nvar oMessageText = document.createTextNode(vMsg[i]);\noMessage.appendChild(oMessageLI);\noMessageLI.appendChild(oMessageText);\n}\n} else {\noMessage = document.createTextNode(vMsg);\n}\nvar oMessageWrapper = document.createElement('div');\n// 设置 oMessageWrapper 的CSS属性\noMessageWrapper.style.padding = '5px';\noMessageWrapper.style.color = 'black';\noMessageWrapper.style.fontWeight = 'bold';\noMessageWrapper.style.backgroundColor = '#FFF1A8';\noMessageWrapper.style.cursor = 'pointer';\noMessageWrapper.style.display = 'inline-block';\noMessageWrapper.style.width = 'auto';\noMessageWrapper.style.height = 'auto';\noMessageWrapper.style.textAlign = 'left';\noMessageWrapper.style.fontSize = '16px';\noMessageWrapper.appendChild(oMessage);</p>\n<pre><code>    oWin.appendChild(oMessageWrapper);\n    oWin.style.display = 'block';\n    if (bNonIntrusive) {\n        // 无干扰模式，启动计时器\n        var lD;\n        if (lDelay) {\n            lD = lDelay;\n        } else {\n            lD = 2000;\n        }\n        window.setTimeout(hideMessage, lD);\n    }\n} else {\n}\n</code></pre>\n<p>};</p>\n<p>//\n// 显示信息，参数为HTML代码\n// 注意：此过程应该在HTML文档加载完成后再调用\n//\nmfMessage.prototype.showHTMLMessage = function(sMsg, bNonIntrusive, lDelay) {\nif (sMsg.length &#x3C;= 0) { return; }\nif (window.isReady) {\nif (!this.<em>init</em>) {\nthis.init();\n}\nvar sMessageWindowId = this.messageWindowId;\nfunction hideMessage() {\nvar oWin = document.getElementById(sMessageWindowId);\noWin.style.display = 'none';\n}\nvar oWin = document.getElementById(this.messageWindowId);\ntry {\noWin.removeChild(oWin.firstChild);\n} catch (oError) {\n}\nvar oMessageWrapper = document.createElement('div');\n// 设置 oMessageWrapper 的CSS属性\noMessageWrapper.style.padding = '5px';\noMessageWrapper.style.color = 'black';\noMessageWrapper.style.fontWeight = 'bold';\noMessageWrapper.style.backgroundColor = '#FFF1A8';\noMessageWrapper.style.cursor = 'pointer';\noMessageWrapper.style.display = 'inline-block';\noMessageWrapper.style.width = 'auto';\noMessageWrapper.style.height = 'auto';\noMessageWrapper.style.textAlign = 'left';\noMessageWrapper.style.fontSize = '16px';\noMessageWrapper.innerHTML = sMsg;</p>\n<pre><code>    oWin.appendChild(oMessageWrapper);\n    oWin.style.display = 'block';\n    if (bNonIntrusive) {\n        // 无干扰模式，启动计时器\n        var lD;\n        if (lDelay) {\n            lD = lDelay;\n        } else {\n            lD = 2000;\n        }\n        window.setTimeout(hideMessage, lD);\n    }\n} else {\n}\n</code></pre>\n<p>};</p>\n<p>// 获取浏览器客户窗口的左端位置\nmfMessage.prototype.getClientLeft = function() {\nreturn typeof self.pageXOffset != 'undefined' ? self.pageXOffset : document.documentElement &#x26;&#x26; document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body.scrollLeft ? document.body.scrollLeft : 0;\n};</p>\n<p>// 获取浏览器客户窗口的顶端位置\nmfMessage.prototype.getClientTop = function() {\nreturn typeof self.pageYOffset != 'undefined' ? self.pageYOffset : document.documentElement &#x26;&#x26; document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop ? document.body.scrollTop : 0;\n};</p>\n<p>// 获取浏览器客户端窗口的宽度\nmfMessage.prototype.getClientWidth = function() {\nreturn self.innerWidth ? self.innerWidth : document.documentElement &#x26;&#x26; document.documentElement.clientWidth ? document.documentElement.clientWidth : document.body ? document.body.clientWidth : 0;\n};</p>\n<p>// 获取浏览器客户端窗口的高度\nmfMessage.prototype.getClientHeight = function() {\nreturn self.innerHeight ? self.innerHeight : document.documentElement &#x26;&#x26; document.documentElement.clientHeight ? document.documentElement.clientHeight : document.body ? document.body.clientHeight : 0;\n};</p>\n<p>// 添加事件监听\nmfMessage.prototype.addEventHandler = function(oTarget, sEventType, fnHandler, vArgument /* optional */) {\n//# 生成handler函数\nvar handler;\nif (typeof (vArgument) == 'undefined') {\nhandler = fnHandler;\n} else {\nhandler = function() {\nfnHandler(vArgument);\n};\n}\nif (oTarget.addEventListener) {         // for DOM-compliant browsers\noTarget.addEventListener(sEventType, handler, false);\n} else if (oTarget.attachEvent) {       // for IE\noTarget.attachEvent(\"on\" + sEventType, handler);\n} else {                                // for all others\noTarget[\"on\" + sEventType] = handler;\n}\n};</p>\n<p>// 移除事件监听\nmfMessage.prototype.removeEventHandler = function(oTarget, sEventType, fnHandler) {\nif (oTarget.removeEventListener) {      // for DOM-compliant browsers\noTarget.removeEventListener(sEventType, fnHandler, false);\n} else if (oTarget.detachEvent) {       // for IE\noTarget.detachEvent(\"on\" + sEventType, fnHandler);\n} else {                                // for all others\noTarget[\"on\" + sEventType] = null;\n}\n};</p>\n<p>// 格式化事件对象\nmfMessage.prototype.formatEvent = function(oEvent) {\nvar sUserAgent = navigator.userAgent;\nvar isOpera = sUserAgent.indexOf(\"Opera\") > -1;\nvar isIE = sUserAgent.indexOf(\"compatible\") > -1\n&#x26;&#x26; sUserAgent.indexOf(\"MSIE\") > -1\n&#x26;&#x26; !isOpera;\nvar isWin = (navigator.platform == \"Win32\") || (navigator.platform == \"Windows\");\n// 检测是否为Google公司开发的Chrome浏览器 - <a href=\"mailto:jie.tian@myfootprints.cn\">jie.tian@myfootprints.cn</a>, 2009-11-13\nvar isChrome = sUserAgent.indexOf('Chrome') > -1;\n// - <a href=\"mailto:jie.tian@myfootprints.cn\">jie.tian@myfootprints.cn</a>\nif ((isIE &#x26;&#x26; isWin) || (isChrome)) {\n// 下面这句程序对Chrome浏览器无效。你调用时请用 oEvent.keyCode，否则在Chrome浏览器可能总是出现 oEvent.charCode = 0 的现象，让你的程序失常 - <a href=\"mailto:jie.tian@myfootprints.cn\">jie.tian@myfootprints.cn</a>, 2009-11-13\noEvent.charCode = (oEvent.type == \"keypress\" || oEvent.type == 'keyup' || oEvent.type == 'keydown') ? oEvent.keyCode : 0;\noEvent.eventPhase = 2;\noEvent.isChar = (oEvent.charcode > 0);\noEvent.pageX = oEvent.clientX + document.body.scrollLeft;\noEvent.pageY = oEvent.clientY + document.body.scrollTop;\noEvent.preventDefault = function() {\nthis.returnValue = false;\n};</p>\n<pre><code>    if (oEvent.type == \"mouseout\") {\n        oEvent.relatedTarget = oEvent.toElement;\n    } else if (oEvent.type == \"mouseover\") {\n        oEvent.relatedTarget = oEvent.fromElement;\n    }\n\n    oEvent.stopPropagation = function() {\n        this.cancelBubble = true;\n    };\n\n    oEvent.target = oEvent.srcElement;\n    oEvent.time = (new Date()).getTime();\n} else {\n    // 由于对于Chrome浏览器，event对象的charCode属性不可写，所以，不如统一成keyCode - jie.tian@myfootprints.cn, 2009-11-13\n    oEvent.keyCode = (oEvent.type == \"keypress\" || oEvent.type == 'keyup' || oEvent.type == 'keydown') ? oEvent.charCode : 0;\n}\n\nreturn oEvent;\n</code></pre>\n<p>};</p>\n<p>mfMessage.prototype.getEvent = function() {\nif (window.event) {\nreturn this.formatEvent(window.event);\n} else {\nreturn EventUtil.getEvent.caller.arguments[0];\n}\n};</p>\n<p>mfMessage.prototype.focusOnFirstFormElement = function() {\nif (document.forms.length > 0) {\nfor (var i = 0; i &#x3C; document.forms[0].elements.length; i++) {\nvar oField = document.forms[0].elements[i];\n// 如果表单的某个元素是隐藏字段，这个字段是不支持focus()方法的。\n// 另外在载入很慢的页面中，在页面完全载入完之前用户可能就开始进行输入了。这时如果再把焦点设置到第一个字段上，就会中断用户当前的输入。为处理这个问题，应该先检查是在第一个字段中已经有值。\n// 如果有，则不改变焦点\nif (oField.type != \"hidden\") {\ntry {\nif (oField.value == '') {\noField.focus();\n}\nreturn;\n} catch (e) {\n// do nothing\n}\n}\n}\n}\n};</p>\n<p>mfMessage.prototype.showCookie = function() {\nvar s;\ns = '<p>Cookie长度： ' + document.cookie.length + '</p><ul>';\ns += '<li>' + document.cookie + '</li>';\ns += '';\nthis.showHTMLMessage(s);\n};</p>\n<p>// 获取Cookie值\nmfMessage.prototype.getCookieValue = function (sCookieName) {\nvar sSearch = sCookieName + '=';\nvar sReturn = '';\nif (document.cookie.length > 0) {\nvar lOffset = document.cookie.indexOf(sSearch);\nvar lEnd;\nif (lOffset != -1) {\nlOffset += sSearch.length;\nlEnd = document.cookie.indexOf(';', lOffset);\nif (lEnd == -1) {\nlength = document.cookie.length;\n}\nsReturn = unescape(document.cookie.substring(lOffset, lEnd));\n} else {\nsReturn = '';\n}\n} else {\nsReturn = '';\n}\nreturn sReturn;\n};</p>\n</ul></pre>\n</div>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"本站源码","url":"https://github.com/Jeff-Tian/space","style":"link","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}