{"componentChunkName":"component---src-templates-post-js","path":"/posts/owp0hc","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/owp0hc","relativePath":"posts/owp0hc","frontmatter":{"title":"使用 Logback 给日志中的敏感数据打码","stackbit_url_path":"posts/owp0hc","date":"2021-08-04T03:30:21","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<p><a name=ICI8Z></a></p>\n<h1>背景</h1>\n<p>最近在公司的 Java 项目中看到很多这样的代码：</p>\n<p>java\npublic void maskData(List<ReservationDto> list) {\n...\nfor (ReservationDto dto : list) {\nfor (String fieldName : fields) {\ntry {\nField field = ReservationDto.class.getDeclaredField(fieldName);\nfield.setAccessible(true);\nfield.set(dto, ******);\n} catch (Exception e) {\n}\n}\n}\n...\n}</p>\n<p>有人可能立即识别到一个坏味道，有一个空的 catch 块。对于这样的代码，我并不感到惊讶，因为 Java 工程的形象在我心目中早就崩塌了：《<a href=\"https://zhuanlan.zhihu.com/p/376821879\">后端工程圣殿形象的崩塌以及重建</a>》。</p>\n<p>我这次对该 Java 工程的改造，并不在这个空的异常捕获块，而是识别到该工程有一个明显的需求，对于某些字段，需要用星号*打码。目前该工程有很多自行实现的打码方法，造成了很多代码重复。并且需要打印日志时主动调用这样的打码方法，违反了单一职责原则，即在打印日志时，还需要关注打码逻辑。</p>\n<p><a name=RKU9h></a></p>\n<h1>打码需求</h1>\n<p>当大量数据被日志记录下来后，对于其中的敏感数据进行打码非常重要。一般做得好的公司，会有专门的团队对项目进行渗透测试，如果发现日志中有敏感数据泄露，是不会允许项目上线的。</p>\n<p><a name=pfaRx></a></p>\n<h1>Logback</h1>\n<p>我看了下项目，日志部分使用了 Logback。在 Java 的生态世界里，它算是最常用的日志框架了，也是其前驱者 Log4j 的替代者。它比 Log4j 的性能更好，也提供了更多的配置和在存档旧日志文件中具有更多的灵活性。</p>\n<p>目前项目中的 logback 配置如下：</p>\n<p>xml</p>\n<?xml version=1.0 encoding=UTF-8?>\n<configuration>\n    <contextName>uniheart</contextName>\n<pre><code>&#x3C;springProperty scope=context name=appName source=spring.application.name/>\n\n&#x3C;appender name=STDOUT class=ch.qos.logback.core.ConsoleAppender>\n    &#x3C;layout class=ch.qos.logback.classic.PatternLayout>\n        &#x3C;pattern>[TraceNo=%X{x-request-id}] %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n\n        &#x3C;/pattern>\n    &#x3C;/layout>\n&#x3C;/appender>\n\n&#x3C;root level=INFO>\n    &#x3C;appender-ref ref=STDOUT />\n&#x3C;/root>\n</code></pre>\n</configuration>\n<p><a name=jx1Mi></a></p>\n<h1>重新实现打码</h1>\n<p>本文将使用另外一种方式实现日志中的敏感数据打码，以解决打码逻辑分散在代码各处的问题，即将打码逻辑放在单独的文件里，并允许通过配置的方式去做扩展。</p>\n<p>这里通过一个实际的例子展示打码前后的效果，但是可以应用在更多的地方。</p>\n<p><a name=pLSFF></a></p>\n<h1>FeignClient 请求日志中的敏感数据</h1>\n<p>这个实际的例子就是 FeignClient 请求日志。由于微服务架构的广泛应用，因此存在服务间相互调用的情况，一般通过 FeignClient 来调用上游服务。但是在联调过程中，往往需要记录下实际的请求日志。在实际项目中，如同打码逻辑一样，这种请求日志也是分散在各个调用处，并且对于一个请求，会打印多行日志分别记录请求头、入参、调用的端点地址等等，这样并不高效，在《<a href=\"https://zhuanlan.zhihu.com/p/386126054\">将 FeignClient 的请求记录成 cURL 格式</a>》详细介绍了这一点，并给出了一个解决方案，即在 FeignConfig 文件中一处实现请求日志的打印，并且将请求打印成一个 cURL 命令，从而方便重放和沟通。</p>\n<p>《<a href=\"https://zhuanlan.zhihu.com/p/386126054\">将 FeignClient 的请求记录成 cURL 格式</a>》虽然解决了日志打印问题，但是实际的服务接口调用，往往需要认证，而认证往往需要密钥，这种密钥就是敏感数据，不应该明文显示。比如实际日志中会看到：</p>\n<p>shell\n[TraceNo=521F2E813AD8491AA0075CCCF5DAD682] 2021-08-04 10:26:56.750 [http-nio-8081-exec-1] INFO  c.l.c.r.p.infrastructure.rpc.common.FeignConfig - cURL to replay for 521F2E813AD8491AA0075CCCF5DAD682:\ncurl --location --request POST <a href=\"http://k8s-default-ingressl-0de2febdbe-1784506518.cn-northwest-1.elb.amazonaws.com.cn/auth/webtoken\">http://k8s-default-ingressl-0de2febdbe-1784506518.cn-northwest-1.elb.amazonaws.com.cn/auth/webtoken</a>\n--header Content-Length: 152\n--header Content-Type: application/json\n--header x-request-id: 521F2E813AD8491AA0075CCCF5DAD682</p>\n<p>--data-raw {\nclient_id:dev_interface,\nclient_secret:1234567890,\ngrant_type:client_credentials,\nscope:member\n}</p>\n<p>其实，这里的 client_secret 明文显示在日志中，就会有很大风险。</p>\n<p><a name=ZoFVE></a></p>\n<h1>PatternLayout</h1>\n<p>可以通过配置打码规则来对所有的由 Logback 产生的日志输出进行打码，从而集中打码逻辑。要实现打码逻辑集中化，我们需要实现自定义的 <strong><em>ch.qos.logback.classic.PatternLayout</em></strong>，从而用自定义的 Layout 来扩展每一个 Logback appender。具体地说，在这里我们实现一个 MaskingPatternLayout 类作为 PatternLayout  的一个实现，它支持的打码规则配置，是以正则表达式代表的打码模式。</p>\n<p>实现的 MaskingPatternLayout 如下：</p>\n<p>java\npackage com.uniheart;</p>\n<p>import ch.qos.logback.classic.PatternLayout;\nimport ch.qos.logback.classic.spi.ILoggingEvent;</p>\n<p>import java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;</p>\n<p>public class MaskingPatternLayout extends PatternLayout {</p>\n<pre><code>private Pattern multilinePattern;\nprivate List&#x3C;String> maskPatterns = new ArrayList&#x3C;>();\n\n// 对 xml 配置文件中定义的每一项，都分别调用\npublic void addMaskPattern(String maskPattern) {\n    maskPatterns.add(maskPattern);\n    multilinePattern = Pattern.compile(maskPatterns.stream().collect(Collectors.joining(|)), Pattern.MULTILINE);\n}\n\n@Override\npublic String doLayout(ILoggingEvent event) {\n    return maskMessage(super.doLayout(event));\n}\n\nprivate String maskMessage(String message) {\n    if (multilinePattern == null) {\n        return message;\n    }\n    StringBuilder sb = new StringBuilder(message);\n    Matcher matcher = multilinePattern.matcher(sb);\n    while (matcher.find()) {\n        IntStream.rangeClosed(1, matcher.groupCount()).forEach(group -> {\n            if (matcher.group(group) != null) {\n                // 用星号替换每一个匹配到的字符\n                IntStream.range(matcher.start(group), matcher.end(group)).forEach(i -> sb.setCharAt(i, *));\n            }\n        });\n    }\n    return sb.toString();\n}\n</code></pre>\n<p>}</p>\n<p>PattternLayout.doLayout() 的实现专门负责对应用中每一条日志信息被配置好的模式匹配到的数据进行打码。</p>\n<p>Logback 的配置文件（文件名定义在应用的配置里的 logging.config.classpath 项）中的 maskPattern 数组构成了多行的模式。但是遗憾的是 Logback 引擎本身不支持构造器注入，从而需要对配置的每一项，分别调用 addMaskPattern() 方法。所以每次添加新的正则表达式模式到配置文件后，就需要重新编译。</p>\n<p><a name=Xw7ym></a></p>\n<h1>打码配置</h1>\n<p>总的来说，我们需要使用正则表达式来进行敏感数据的打码。对于上面提到的 FeignClient 的日志，我们需要将 client_secret 打码，这可以使用如下的正则表达式：</p>\n<p>java\nclient_secrets*:s*(.*?)</p>\n<p>现在把它加入到 logback xml 配置文件中的 maskPattern 标签下，从而之前的配置文件变成了这样：</p>\n<p>xml</p>\n<?xml version=1.0 encoding=UTF-8?>\n<configuration>\n    <contextName>uniheart</contextName>\n<pre><code>&#x3C;springProperty scope=context name=appName source=spring.application.name/>\n\n&#x3C;appender name=mask class=ch.qos.logback.core.ConsoleAppender>\n    &#x3C;encoder class=ch.qos.logback.core.encoder.LayoutWrappingEncoder>\n        &#x3C;layout class=com.uniheart.MaskingPatternLayout>\n            &#x3C;maskPattern>client_secrets*:s*(.*?)&#x3C;/maskPattern>\n            &#x3C;pattern>[TraceNo=%X{x-request-id}] %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n\n            &#x3C;/pattern>\n        &#x3C;/layout>\n    &#x3C;/encoder>\n&#x3C;/appender>>\n\n&#x3C;root level=INFO>\n    &#x3C;appender-ref ref=mask />\n&#x3C;/root>\n</code></pre>\n</configuration>\n<p><a name=uDL4j></a></p>\n<h1></h1>\n<p><a name=N0fII></a></p>\n<h1>执行效果</h1>\n<p>再次运行应用，就会看到先前的日志变成了这样：</p>\n<p>shell\n[TraceNo=521F2E813AD8491AA0075CCCF5DAD682] 2021-08-04 10:26:56.750 [http-nio-8081-exec-1] INFO  c.l.c.r.p.infrastructure.rpc.common.FeignConfig - cURL to replay for 521F2E813AD8491AA0075CCCF5DAD682:\ncurl --location --request POST <a href=\"http://k8s-default-ingressl-0de2febdbe-1784506518.cn-northwest-1.elb.amazonaws.com.cn/auth/webtoken\">http://k8s-default-ingressl-0de2febdbe-1784506518.cn-northwest-1.elb.amazonaws.com.cn/auth/webtoken</a>\n--header Content-Length: 152\n--header Content-Type: application/json\n--header x-request-id: 521F2E813AD8491AA0075CCCF5DAD682</p>\n<p>--data-raw {\nclient_id:dev_interface,\nclient_secret:********************************,\ngrant_type:client_credentials,\nscope:member\n}</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1628047539373-d1300f1d-7a89-4216-936c-9b8bf8c46247.png#clientId=u598fef81-c21c-4&#x26;from=paste&#x26;id=u0e08a055&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=720&#x26;originWidth=2686&#x26;originalType=binary%E2%88%B6=1&#x26;size=205867&#x26;status=done&#x26;style=none&#x26;taskId=u9f52d73b-b9ca-493f-b813-3e50ee17161\" alt=\"image.png\"></p>\n<p>通过这种方式，日志打印者不需要再关注打码逻辑，从而可以在统一的 logback 配置文件里来定义打码规则。</p>\n<p><a name=UqvMa></a></p>\n<h1>总结</h1>\n<p>在应用日志中，通过使用 Logback 的 PatternLayout 的特性来对敏感数据打码，可以集中在配置文件里使用正则表达式定义打码规则，减少了日志打印者的心智负担，有更好的扩展性，还避免了重复代码。</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"本站源码","url":"https://github.com/Jeff-Tian/space","style":"link","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}