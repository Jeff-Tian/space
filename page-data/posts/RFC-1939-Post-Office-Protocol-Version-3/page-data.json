{"componentChunkName":"component---src-templates-post-js","path":"/posts/RFC-1939-Post-Office-Protocol-Version-3/","result":{"data":{"sitePage":{"id":"SitePage /posts/RFC-1939-Post-Office-Protocol-Version-3/"}},"pageContext":{"url":"/posts/RFC-1939-Post-Office-Protocol-Version-3/","relativePath":"posts/RFC-1939-Post-Office-Protocol-Version-3.md","relativeDir":"posts","base":"RFC-1939-Post-Office-Protocol-Version-3.md","name":"RFC-1939-Post-Office-Protocol-Version-3","frontmatter":{"title":"RFC 1939 - Post Office Protocol - Version 3","stackbit_url_path":"posts/RFC-1939-Post-Office-Protocol-Version-3","date":"2010-01-23 06:31:53","excerpt":"","comments_count":0,"positive_reactions_count":0,"tags":[null],"canonical_url":"https://be-net.azurewebsites.net/post/2010/01/23/RFC-1939-Post-Office-Protocol-Version-3","template":"post"},"html":"<pre><code>    &#x3C;div>\n</code></pre>\n<h1>RFC1939 - Post Office Protocol - Version 3</h1>\n<pre>Network Working Group J. Myers\nRequest for Comments: 1939 Carnegie Mellon\nSTD: 53 M. Rose\nObsoletes: 1725 Dover Beach Consulting, Inc.\nCategory: Standards Track May 1996\n<p>Post Office Protocol - Version 3</p>\n<p>Status of this Memo</p>\n<p>This document specifies an Internet standards track protocol for the\nInternet community, and requests discussion and suggestions for\nimprovements. Please refer to the current edition of the \"Internet\nOfficial Protocol Standards\" (STD 1) for the standardization state\nand status of this protocol. Distribution of this memo is unlimited.</p>\n<p>Table of Contents</p>\n<ol>\n<li>Introduction ................................................ 2</li>\n<li>A Short Digression .......................................... 2</li>\n<li>Basic Operation ............................................. 3</li>\n<li>The AUTHORIZATION State ..................................... 4</li>\n</ol>\n<p>QUIT Command ................................................ 5\n5. The TRANSACTION State ....................................... 5\nSTAT Command ................................................ 6\nLIST Command ................................................ 6\nRETR Command ................................................ 8\nDELE Command ................................................ 8\nNOOP Command ................................................ 9\nRSET Command ................................................ 9\n6. The UPDATE State ............................................ 10\nQUIT Command ................................................ 10\n7. Optional POP3 Commands ...................................... 11\nTOP Command ................................................. 11\nUIDL Command ................................................ 12\nUSER Command ................................................ 13\nPASS Command ................................................ 14\nAPOP Command ................................................ 15\n8. Scaling and Operational Considerations ...................... 16\n9. POP3 Command Summary ........................................ 18\n10. Example POP3 Session ....................................... 19\n11. Message Format ............................................. 19\n12. References ................................................. 20\n13. Security Considerations .................................... 20\n14. Acknowledgements ........................................... 20\n15. Authors' Addresses ......................................... 21\nAppendix A. Differences from RFC1725 .......................... 22</p>\n<p>Appendix B. Command Index ...................................... 23</p>\n<ol>\n<li>Introduction</li>\n</ol>\n<p>On certain types of smaller nodes in the Internet it is often\nimpractical to maintain a message transport system (MTS). For\nexample, a workstation may not have sufficient resources (cycles,\ndisk space) in order to permit a SMTP server [RFC821] and associated\nlocal mail delivery system to be kept resident and continuously\nrunning. Similarly, it may be expensive (or impossible) to keep a\npersonal computer interconnected to an IP-style network for long\namounts of time (the node is lacking the resource known as\n\"connectivity\").</p>\n<p>Despite this, it is often very useful to be able to manage mail on\nthese smaller nodes, and they often support a user agent (UA) to aid\nthe tasks of mail handling. To solve this problem, a node which can\nsupport an MTS entity offers a maildrop service to these less endowed\nnodes. The Post Office Protocol - Version 3 (POP3) is intended to\npermit a workstation to dynamically access a maildrop on a server\nhost in a useful fashion. Usually, this means that the POP3 protocol\nis used to allow a workstation to retrieve mail that the server is\nholding for it.</p>\n<p>POP3 is not intended to provide extensive manipulation operations of\nmail on the server; normally, mail is downloaded and then deleted. A\nmore advanced (and complex) protocol, IMAP4, is discussed in\n[RFC1730].</p>\n<p>For the remainder of this memo, the term \"client host\" refers to a\nhost making use of the POP3 service, while the term \"server host\"\nrefers to a host which offers the POP3 service.</p>\n<ol start=\"2\">\n<li>A Short Digression</li>\n</ol>\n<p>This memo does not specify how a client host enters mail into the\ntransport system, although a method consistent with the philosophy of\nthis memo is presented here:</p>\n<p>When the user agent on a client host wishes to enter a message\ninto the transport system, it establishes an SMTP connection to\nits relay host and sends all mail to it. This relay host could\nbe, but need not be, the POP3 server host for the client host. Of\ncourse, the relay host must accept mail for delivery to arbitrary\nrecipient addresses, that functionality is not required of all\nSMTP servers.</p>\n<ol start=\"3\">\n<li>Basic Operation</li>\n</ol>\n<p>Initially, the server host starts the POP3 service by listening on\nTCP port 110. When a client host wishes to make use of the service,\nit establishes a TCP connection with the server host. When the\nconnection is established, the POP3 server sends a greeting. The\nclient and POP3 server then exchange commands and responses\n(respectively) until the connection is closed or aborted.</p>\n<p>Commands in the POP3 consist of a case-insensitive keyword, possibly\nfollowed by one or more arguments. All commands are terminated by a\nCRLF pair. Keywords and arguments consist of printable ASCII\ncharacters. Keywords and arguments are each separated by a single\nSPACE character. Keywords are three or four characters long. Each\nargument may be up to 40 characters long.</p>\n<p>Responses in the POP3 consist of a status indicator and a keyword\npossibly followed by additional information. All responses are\nterminated by a CRLF pair. Responses may be up to 512 characters\nlong, including the terminating CRLF. There are currently two status\nindicators: positive (\"+OK\") and negative (\"-ERR\"). Servers MUST\nsend the \"+OK\" and \"-ERR\" in upper case.</p>\n<p>Responses to certain commands are multi-line. In these cases, which\nare clearly indicated below, after sending the first line of the\nresponse and a CRLF, any additional lines are sent, each terminated\nby a CRLF pair. When all lines of the response have been sent, a\nfinal line is sent, consisting of a termination octet (decimal code\n046, \".\") and a CRLF pair. If any line of the multi-line response\nbegins with the termination octet, the line is \"byte-stuffed\" by\npre-pending the termination octet to that line of the response.\nHence a multi-line response is terminated with the five octets\n\"CRLF.CRLF\". When examining a multi-line response, the client checks\nto see if the line begins with the termination octet. If so and if\noctets other than CRLF follow, the first octet of the line (the\ntermination octet) is stripped away. If so and if CRLF immediately\nfollows the termination character, then the response from the POP\nserver is ended and the line containing \".CRLF\" is not considered\npart of the multi-line response.</p>\n<p>A POP3 session progresses through a number of states during its\nlifetime. Once the TCP connection has been opened and the POP3\nserver has sent the greeting, the session enters the AUTHORIZATION\nstate. In this state, the client must identify itself to the POP3\nserver. Once the client has successfully done this, the server\nacquires resources associated with the client's maildrop, and the\nsession enters the TRANSACTION state. In this state, the client\nrequests actions on the part of the POP3 server. When the client has</p>\n<p>issued the QUIT command, the session enters the UPDATE state. In\nthis state, the POP3 server releases any resources acquired during\nthe TRANSACTION state and says goodbye. The TCP connection is then\nclosed.</p>\n<p>A server MUST respond to an unrecognized, unimplemented, or\nsyntactically invalid command by responding with a negative status\nindicator. A server MUST respond to a command issued when the\nsession is in an incorrect state by responding with a negative status\nindicator. There is no general method for a client to distinguish\nbetween a server which does not implement an optional command and a\nserver which is unwilling or unable to process the command.</p>\n<p>A POP3 server MAY have an inactivity autologout timer. Such a timer\nMUST be of at least 10 minutes' duration. The receipt of any command\nfrom the client during that interval should suffice to reset the\nautologout timer. When the timer expires, the session does NOT enter\nthe UPDATE state--the server should close the TCP connection without\nremoving any messages or sending any response to the client.</p>\n<ol start=\"4\">\n<li>The AUTHORIZATION State</li>\n</ol>\n<p>Once the TCP connection has been opened by a POP3 client, the POP3\nserver issues a one line greeting. This can be any positive\nresponse. An example might be:</p>\n<p>S: +OK POP3 server ready</p>\n<p>The POP3 session is now in the AUTHORIZATION state. The client must\nnow identify and authenticate itself to the POP3 server. Two\npossible mechanisms for doing this are described in this document,\nthe USER and PASS command combination and the APOP command. Both\nmechanisms are described later in this document. Additional\nauthentication mechanisms are described in [RFC1734]. While there is\nno single authentication mechanism that is required of all POP3\nservers, a POP3 server must of course support at least one\nauthentication mechanism.</p>\n<p>Once the POP3 server has determined through the use of any\nauthentication command that the client should be given access to the\nappropriate maildrop, the POP3 server then acquires an exclusive-\naccess lock on the maildrop, as necessary to prevent messages from\nbeing modified or removed before the session enters the UPDATE state.\nIf the lock is successfully acquired, the POP3 server responds with a\npositive status indicator. The POP3 session now enters the\nTRANSACTION state, with no messages marked as deleted. If the\nmaildrop cannot be opened for some reason (for example, a lock can\nnot be acquired, the client is denied access to the appropriate</p>\n<p>maildrop, or the maildrop cannot be parsed), the POP3 server responds\nwith a negative status indicator. (If a lock was acquired but the\nPOP3 server intends to respond with a negative status indicator, the\nPOP3 server must release the lock prior to rejecting the command.)\nAfter returning a negative status indicator, the server may close the\nconnection. If the server does not close the connection, the client\nmay either issue a new authentication command and start again, or the\nclient may issue the QUIT command.</p>\n<p>After the POP3 server has opened the maildrop, it assigns a message-\nnumber to each message, and notes the size of each message in octets.\nThe first message in the maildrop is assigned a message-number of\n\"1\", the second is assigned \"2\", and so on, so that the nth message\nin a maildrop is assigned a message-number of \"n\". In POP3 commands\nand responses, all message-numbers and message sizes are expressed in\nbase-10 (i.e., decimal).</p>\n<p>Here is the summary for the QUIT command when used in the\nAUTHORIZATION state:</p>\n<p>QUIT</p>\n<p>Arguments: none</p>\n<p>Restrictions: none</p>\n<p>Possible Responses:\n+OK</p>\n<p>Examples:\nC: QUIT\nS: +OK dewey POP3 server signing off</p>\n<ol start=\"5\">\n<li>The TRANSACTION State</li>\n</ol>\n<p>Once the client has successfully identified itself to the POP3 server\nand the POP3 server has locked and opened the appropriate maildrop,\nthe POP3 session is now in the TRANSACTION state. The client may now\nissue any of the following POP3 commands repeatedly. After each\ncommand, the POP3 server issues a response. Eventually, the client\nissues the QUIT command and the POP3 session enters the UPDATE state.</p>\n<p>Here are the POP3 commands valid in the TRANSACTION state:</p>\n<p>STAT</p>\n<p>Arguments: none</p>\n<p>Restrictions:\nmay only be given in the TRANSACTION state</p>\n<p>Discussion:\nThe POP3 server issues a positive response with a line\ncontaining information for the maildrop. This line is\ncalled a \"drop listing\" for that maildrop.</p>\n<p>In order to simplify parsing, all POP3 servers are\nrequired to use a certain format for drop listings. The\npositive response consists of \"+OK\" followed by a single\nspace, the number of messages in the maildrop, a single\nspace, and the size of the maildrop in octets. This memo\nmakes no requirement on what follows the maildrop size.\nMinimal implementations should just end that line of the\nresponse with a CRLF pair. More advanced implementations\nmay include other information.</p>\n<p>NOTE: This memo STRONGLY discourages implementations\nfrom supplying additional information in the drop\nlisting. Other, optional, facilities are discussed\nlater on which permit the client to parse the messages\nin the maildrop.</p>\n<p>Note that messages marked as deleted are not counted in\neither total.</p>\n<p>Possible Responses:\n+OK nn mm</p>\n<p>Examples:\nC: STAT\nS: +OK 2 320</p>\n<p>LIST [msg]</p>\n<p>Arguments:\na message-number (optional), which, if present, may NOT\nrefer to a message marked as deleted</p>\n<p>Restrictions:\nmay only be given in the TRANSACTION state</p>\n<p>Discussion:\nIf an argument was given and the POP3 server issues a\npositive response with a line containing information for\nthat message. This line is called a \"scan listing\" for\nthat message.</p>\n<p>If no argument was given and the POP3 server issues a\npositive response, then the response given is multi-line.\nAfter the initial +OK, for each message in the maildrop,\nthe POP3 server responds with a line containing\ninformation for that message. This line is also called a\n\"scan listing\" for that message. If there are no\nmessages in the maildrop, then the POP3 server responds\nwith no scan listings--it issues a positive response\nfollowed by a line containing a termination octet and a\nCRLF pair.</p>\n<p>In order to simplify parsing, all POP3 servers are\nrequired to use a certain format for scan listings. A\nscan listing consists of the message-number of the\nmessage, followed by a single space and the exact size of\nthe message in octets. Methods for calculating the exact\nsize of the message are described in the \"Message Format\"\nsection below. This memo makes no requirement on what\nfollows the message size in the scan listing. Minimal\nimplementations should just end that line of the response\nwith a CRLF pair. More advanced implementations may\ninclude other information, as parsed from the message.</p>\n<p>NOTE: This memo STRONGLY discourages implementations\nfrom supplying additional information in the scan\nlisting. Other, optional, facilities are discussed\nlater on which permit the client to parse the messages\nin the maildrop.</p>\n<p>Note that messages marked as deleted are not listed.</p>\n<p>Possible Responses:\n+OK scan listing follows\n-ERR no such message</p>\n<p>Examples:\nC: LIST\nS: +OK 2 messages (320 octets)\nS: 1 120</p>\n<p>S: 2 200\nS: .\n...\nC: LIST 2\nS: +OK 2 200\n...\nC: LIST 3\nS: -ERR no such message, only 2 messages in maildrop</p>\n<p>RETR msg</p>\n<p>Arguments:\na message-number (required) which may NOT refer to a\nmessage marked as deleted</p>\n<p>Restrictions:\nmay only be given in the TRANSACTION state</p>\n<p>Discussion:\nIf the POP3 server issues a positive response, then the\nresponse given is multi-line. After the initial +OK, the\nPOP3 server sends the message corresponding to the given\nmessage-number, being careful to byte-stuff the termination\ncharacter (as with all multi-line responses).</p>\n<p>Possible Responses:\n+OK message follows\n-ERR no such message</p>\n<p>Examples:\nC: RETR 1\nS: +OK 120 octets\nS: <the pop3=\"\" server=\"\" sends=\"\" the=\"\" entire=\"\" message=\"\" here=\"\">\nS: .</p>\n<p>DELE msg</p>\n<p>Arguments:\na message-number (required) which may NOT refer to a\nmessage marked as deleted</p>\n<p>Restrictions:\nmay only be given in the TRANSACTION state</p>\n<p>Discussion:\nThe POP3 server marks the message as deleted. Any future\nreference to the message-number associated with the message\nin a POP3 command generates an error. The POP3 server does\nnot actually delete the message until the POP3 session\nenters the UPDATE state.</p>\n<p>Possible Responses:\n+OK message deleted\n-ERR no such message</p>\n<p>Examples:\nC: DELE 1\nS: +OK message 1 deleted\n...\nC: DELE 2\nS: -ERR message 2 already deleted</p>\n<p>NOOP</p>\n<p>Arguments: none</p>\n<p>Restrictions:\nmay only be given in the TRANSACTION state</p>\n<p>Discussion:\nThe POP3 server does nothing, it merely replies with a\npositive response.</p>\n<p>Possible Responses:\n+OK</p>\n<p>Examples:\nC: NOOP\nS: +OK</p>\n<p>RSET</p>\n<p>Arguments: none</p>\n<p>Restrictions:\nmay only be given in the TRANSACTION state</p>\n<p>Discussion:\nIf any messages have been marked as deleted by the POP3\nserver, they are unmarked. The POP3 server then replies</p>\n<p>with a positive response.</p>\n<p>Possible Responses:\n+OK</p>\n<p>Examples:\nC: RSET\nS: +OK maildrop has 2 messages (320 octets)</p>\n<ol start=\"6\">\n<li>The UPDATE State</li>\n</ol>\n<p>When the client issues the QUIT command from the TRANSACTION state,\nthe POP3 session enters the UPDATE state. (Note that if the client\nissues the QUIT command from the AUTHORIZATION state, the POP3\nsession terminates but does NOT enter the UPDATE state.)</p>\n<p>If a session terminates for some reason other than a client-issued\nQUIT command, the POP3 session does NOT enter the UPDATE state and\nMUST not remove any messages from the maildrop.</p>\n<p>QUIT</p>\n<p>Arguments: none</p>\n<p>Restrictions: none</p>\n<p>Discussion:\nThe POP3 server removes all messages marked as deleted\nfrom the maildrop and replies as to the status of this\noperation. If there is an error, such as a resource\nshortage, encountered while removing messages, the\nmaildrop may result in having some or none of the messages\nmarked as deleted be removed. In no case may the server\nremove any messages not marked as deleted.</p>\n<p>Whether the removal was successful or not, the server\nthen releases any exclusive-access lock on the maildrop\nand closes the TCP connection.</p>\n<p>Possible Responses:\n+OK\n-ERR some deleted messages not removed</p>\n<p>Examples:\nC: QUIT\nS: +OK dewey POP3 server signing off (maildrop empty)\n...\nC: QUIT</p>\n<p>S: +OK dewey POP3 server signing off (2 messages left)\n...</p>\n<ol start=\"7\">\n<li>Optional POP3 Commands</li>\n</ol>\n<p>The POP3 commands discussed above must be supported by all minimal\nimplementations of POP3 servers.</p>\n<p>The optional POP3 commands described below permit a POP3 client\ngreater freedom in message handling, while preserving a simple POP3\nserver implementation.</p>\n<p>NOTE: This memo STRONGLY encourages implementations to support\nthese commands in lieu of developing augmented drop and scan\nlistings. In short, the philosophy of this memo is to put\nintelligence in the part of the POP3 client and not the POP3\nserver.</p>\n<p>TOP msg n</p>\n<p>Arguments:\na message-number (required) which may NOT refer to to a\nmessage marked as deleted, and a non-negative number\nof lines (required)</p>\n<p>Restrictions:\nmay only be given in the TRANSACTION state</p>\n<p>Discussion:\nIf the POP3 server issues a positive response, then the\nresponse given is multi-line. After the initial +OK, the\nPOP3 server sends the headers of the message, the blank\nline separating the headers from the body, and then the\nnumber of lines of the indicated message's body, being\ncareful to byte-stuff the termination character (as with\nall multi-line responses).</p>\n<p>Note that if the number of lines requested by the POP3\nclient is greater than than the number of lines in the\nbody, then the POP3 server sends the entire message.</p>\n<p>Possible Responses:\n+OK top of message follows\n-ERR no such message</p>\n<p>Examples:\nC: TOP 1 10\nS: +OK</p>\n<p>S: &#x3C;the pop3=\"\" server=\"\" sends=\"\" the=\"\" headers=\"\" of=\"\" message,=\"\" a=\"\" blank=\"\" line,=\"\" and=\"\" first=\"\" 10=\"\" lines=\"\" body=\"\" message=\"\">\nS: .\n...\nC: TOP 100 3\nS: -ERR no such message</p>\n<p>UIDL [msg]</p>\n<p>Arguments:\na message-number (optional), which, if present, may NOT\nrefer to a message marked as deleted</p>\n<p>Restrictions:\nmay only be given in the TRANSACTION state.</p>\n<p>Discussion:\nIf an argument was given and the POP3 server issues a positive\nresponse with a line containing information for that message.\nThis line is called a \"unique-id listing\" for that message.</p>\n<p>If no argument was given and the POP3 server issues a positive\nresponse, then the response given is multi-line. After the\ninitial +OK, for each message in the maildrop, the POP3 server\nresponds with a line containing information for that message.\nThis line is called a \"unique-id listing\" for that message.</p>\n<p>In order to simplify parsing, all POP3 servers are required to\nuse a certain format for unique-id listings. A unique-id\nlisting consists of the message-number of the message,\nfollowed by a single space and the unique-id of the message.\nNo information follows the unique-id in the unique-id listing.</p>\n<p>The unique-id of a message is an arbitrary server-determined\nstring, consisting of one to 70 characters in the range 0x21\nto 0x7E, which uniquely identifies a message within a\nmaildrop and which persists across sessions. This\npersistence is required even if a session ends without\nentering the UPDATE state. The server should never reuse an\nunique-id in a given maildrop, for as long as the entity\nusing the unique-id exists.</p>\n<p>Note that messages marked as deleted are not listed.</p>\n<p>While it is generally preferable for server implementations\nto store arbitrarily assigned unique-ids in the maildrop,</p>\n<p>this specification is intended to permit unique-ids to be\ncalculated as a hash of the message. Clients should be able\nto handle a situation where two identical copies of a\nmessage in a maildrop have the same unique-id.</p>\n<p>Possible Responses:\n+OK unique-id listing follows\n-ERR no such message</p>\n<p>Examples:\nC: UIDL\nS: +OK\nS: 1 whqtswO00WBw418f9t5JxYwZ\nS: 2 QhdPYR:00WBw1Ph7x7\nS: .\n...\nC: UIDL 2\nS: +OK 2 QhdPYR:00WBw1Ph7x7\n...\nC: UIDL 3\nS: -ERR no such message, only 2 messages in maildrop</p>\n<p>USER name</p>\n<p>Arguments:\na string identifying a mailbox (required), which is of\nsignificance ONLY to the server</p>\n<p>Restrictions:\nmay only be given in the AUTHORIZATION state after the POP3\ngreeting or after an unsuccessful USER or PASS command</p>\n<p>Discussion:\nTo authenticate using the USER and PASS command\ncombination, the client must first issue the USER\ncommand. If the POP3 server responds with a positive\nstatus indicator (\"+OK\"), then the client may issue\neither the PASS command to complete the authentication,\nor the QUIT command to terminate the POP3 session. If\nthe POP3 server responds with a negative status indicator\n(\"-ERR\") to the USER command, then the client may either\nissue a new authentication command or may issue the QUIT\ncommand.</p>\n<p>The server may return a positive response even though no\nsuch mailbox exists. The server may return a negative\nresponse if mailbox exists, but does not permit plaintext</p>\n<p>password authentication.</p>\n<p>Possible Responses:\n+OK name is a valid mailbox\n-ERR never heard of mailbox name</p>\n<p>Examples:\nC: USER frated\nS: -ERR sorry, no mailbox for frated here\n...\nC: USER mrose\nS: +OK mrose is a real hoopy frood</p>\n<p>PASS string</p>\n<p>Arguments:\na server/mailbox-specific password (required)</p>\n<p>Restrictions:\nmay only be given in the AUTHORIZATION state immediately\nafter a successful USER command</p>\n<p>Discussion:\nWhen the client issues the PASS command, the POP3 server\nuses the argument pair from the USER and PASS commands to\ndetermine if the client should be given access to the\nappropriate maildrop.</p>\n<p>Since the PASS command has exactly one argument, a POP3\nserver may treat spaces in the argument as part of the\npassword, instead of as argument separators.</p>\n<p>Possible Responses:\n+OK maildrop locked and ready\n-ERR invalid password\n-ERR unable to lock maildrop</p>\n<p>Examples:\nC: USER mrose\nS: +OK mrose is a real hoopy frood\nC: PASS secret\nS: -ERR maildrop already locked\n...\nC: USER mrose\nS: +OK mrose is a real hoopy frood\nC: PASS secret\nS: +OK mrose's maildrop has 2 messages (320 octets)</p>\n<p>APOP name digest</p>\n<p>Arguments:\na string identifying a mailbox and a MD5 digest string\n(both required)</p>\n<p>Restrictions:\nmay only be given in the AUTHORIZATION state after the POP3\ngreeting or after an unsuccessful USER or PASS command</p>\n<p>Discussion:\nNormally, each POP3 session starts with a USER/PASS\nexchange. This results in a server/user-id specific\npassword being sent in the clear on the network. For\nintermittent use of POP3, this may not introduce a sizable\nrisk. However, many POP3 client implementations connect to\nthe POP3 server on a regular basis -- to check for new\nmail. Further the interval of session initiation may be on\nthe order of five minutes. Hence, the risk of password\ncapture is greatly enhanced.</p>\n<p>An alternate method of authentication is required which\nprovides for both origin authentication and replay\nprotection, but which does not involve sending a password\nin the clear over the network. The APOP command provides\nthis functionality.</p>\n<p>A POP3 server which implements the APOP command will\ninclude a timestamp in its banner greeting. The syntax of\nthe timestamp corresponds to the `msg-id' in [RFC822], and\nMUST be different each time the POP3 server issues a banner\ngreeting. For example, on a UNIX implementation in which a\nseparate UNIX process is used for each instance of a POP3\nserver, the syntax of the timestamp might be:</p>\n<p><a href=\"mailto:process-id.clock@hostname\">process-id.clock@hostname</a></p>\n<p>where `process-ID' is the decimal value of the process's\nPID, clock is the decimal value of the system clock, and\nhostname is the fully-qualified domain-name corresponding\nto the host where the POP3 server is running.</p>\n<p>The POP3 client makes note of this timestamp, and then\nissues the APOP command. The <code>name' parameter has identical semantics to the </code>name' parameter of the USER\ncommand. The `digest' parameter is calculated by applying\nthe MD5 algorithm [RFC1321] to a string consisting of the\ntimestamp (including angle-brackets) followed by a shared</p>\n<p>secret. This shared secret is a string known only to the\nPOP3 client and server. Great care should be taken to\nprevent unauthorized disclosure of the secret, as knowledge\nof the secret will allow any entity to successfully\nmasquerade as the named user. The `digest' parameter\nitself is a 16-octet value which is sent in hexadecimal\nformat, using lower-case ASCII characters.</p>\n<p>When the POP3 server receives the APOP command, it verifies\nthe digest provided. If the digest is correct, the POP3\nserver issues a positive response, and the POP3 session\nenters the TRANSACTION state. Otherwise, a negative\nresponse is issued and the POP3 session remains in the\nAUTHORIZATION state.</p>\n<p>Note that as the length of the shared secret increases, so\ndoes the difficulty of deriving it. As such, shared\nsecrets should be long strings (considerably longer than\nthe 8-character example shown below).</p>\n<p>Possible Responses:\n+OK maildrop locked and ready\n-ERR permission denied</p>\n<p>Examples:\nS: +OK POP3 server ready &#x3C;<a href=\"mailto:1896.697170952@dbc.mtview.ca.us\">1896.697170952@dbc.mtview.ca.us</a>>\nC: APOP mrose c4c9334bac560ecc979e58001b3e22fb\nS: +OK maildrop has 1 message (369 octets)</p>\n<p>In this example, the shared secret is the string `tan-\nstaaf'. Hence, the MD5 algorithm is applied to the string</p>\n<p>&#x3C;<a href=\"mailto:1896.697170952@dbc.mtview.ca.us\">1896.697170952@dbc.mtview.ca.us</a>>tanstaaf</p>\n<p>which produces a digest value of</p>\n<p>c4c9334bac560ecc979e58001b3e22fb</p>\n<ol start=\"8\">\n<li>Scaling and Operational Considerations</li>\n</ol>\n<p>Since some of the optional features described above were added to the\nPOP3 protocol, experience has accumulated in using them in large-\nscale commercial post office operations where most of the users are\nunrelated to each other. In these situations and others, users and\nvendors of POP3 clients have discovered that the combination of using\nthe UIDL command and not issuing the DELE command can provide a weak\nversion of the \"maildrop as semi-permanent repository\" functionality\nnormally associated with IMAP. Of course the other capabilities of</p>\n<p>IMAP, such as polling an existing connection for newly arrived\nmessages and supporting multiple folders on the server, are not\npresent in POP3.</p>\n<p>When these facilities are used in this way by casual users, there has\nbeen a tendency for already-read messages to accumulate on the server\nwithout bound. This is clearly an undesirable behavior pattern from\nthe standpoint of the server operator. This situation is aggravated\nby the fact that the limited capabilities of the POP3 do not permit\nefficient handling of maildrops which have hundreds or thousands of\nmessages.</p>\n<p>Consequently, it is recommended that operators of large-scale multi-\nuser servers, especially ones in which the user's only access to the\nmaildrop is via POP3, consider such options as:</p>\n<ul>\n<li>Imposing a per-user maildrop storage quota or the like.</li>\n</ul>\n<p>A disadvantage to this option is that accumulation of messages may\nresult in the user's inability to receive new ones into the\nmaildrop. Sites which choose this option should be sure to inform\nusers of impending or current exhaustion of quota, perhaps by\ninserting an appropriate message into the user's maildrop.</p>\n<ul>\n<li>Enforce a site policy regarding mail retention on the server.</li>\n</ul>\n<p>Sites are free to establish local policy regarding the storage and\nretention of messages on the server, both read and unread. For\nexample, a site might delete unread messages from the server after\n60 days and delete read messages after 7 days. Such message\ndeletions are outside the scope of the POP3 protocol and are not\nconsidered a protocol violation.</p>\n<p>Server operators enforcing message deletion policies should take\ncare to make all users aware of the policies in force.</p>\n<p>Clients must not assume that a site policy will automate message\ndeletions, and should continue to explicitly delete messages using\nthe DELE command when appropriate.</p>\n<p>It should be noted that enforcing site message deletion policies\nmay be confusing to the user community, since their POP3 client\nmay contain configuration options to leave mail on the server\nwhich will not in fact be supported by the server.</p>\n<p>One special case of a site policy is that messages may only be\ndownloaded once from the server, and are deleted after this has\nbeen accomplished. This could be implemented in POP3 server</p>\n<p>software by the following mechanism: \"following a POP3 login by a\nclient which was ended by a QUIT, delete all messages downloaded\nduring the session with the RETR command\". It is important not to\ndelete messages in the event of abnormal connection termination\n(ie, if no QUIT was received from the client) because the client\nmay not have successfully received or stored the messages.\nServers implementing a download-and-delete policy may also wish to\ndisable or limit the optional TOP command, since it could be used\nas an alternate mechanism to download entire messages.</p>\n<ol start=\"9\">\n<li>POP3 Command Summary</li>\n</ol>\n<p>Minimal POP3 Commands:</p>\n<p>USER name valid in the AUTHORIZATION state\nPASS string\nQUIT</p>\n<p>STAT valid in the TRANSACTION state\nLIST [msg]\nRETR msg\nDELE msg\nNOOP\nRSET\nQUIT</p>\n<p>Optional POP3 Commands:</p>\n<p>APOP name digest valid in the AUTHORIZATION state</p>\n<p>TOP msg n valid in the TRANSACTION state\nUIDL [msg]</p>\n<p>POP3 Replies:</p>\n<p>+OK\n-ERR</p>\n<p>Note that with the exception of the STAT, LIST, and UIDL commands,\nthe reply given by the POP3 server to any command is significant\nonly to \"+OK\" and \"-ERR\". Any text occurring after this reply\nmay be ignored by the client.</p>\n<ol start=\"10\">\n<li>Example POP3 Session</li>\n</ol>\n<p>S: &#x3C;wait for=\"\" connection=\"\" on=\"\" tcp=\"\" port=\"\" 110=\"\">\nC: <open connection=\"\">\nS: +OK POP3 server ready &#x3C;<a href=\"mailto:1896.697170952@dbc.mtview.ca.us\">1896.697170952@dbc.mtview.ca.us</a>>\nC: APOP mrose c4c9334bac560ecc979e58001b3e22fb\nS: +OK mrose's maildrop has 2 messages (320 octets)\nC: STAT\nS: +OK 2 320\nC: LIST\nS: +OK 2 messages (320 octets)\nS: 1 120\nS: 2 200\nS: .\nC: RETR 1\nS: +OK 120 octets\nS: &#x3C;the pop3=\"\" server=\"\" sends=\"\" message=\"\" 1=\"\">\nS: .\nC: DELE 1\nS: +OK message 1 deleted\nC: RETR 2\nS: +OK 200 octets\nS: &#x3C;the pop3=\"\" server=\"\" sends=\"\" message=\"\" 2=\"\">\nS: .\nC: DELE 2\nS: +OK message 2 deleted\nC: QUIT\nS: +OK dewey POP3 server signing off (maildrop empty)\nC: <close connection=\"\">\nS: <wait for=\"\" next=\"\" connection=\"\"></p>\n<ol start=\"11\">\n<li>Message Format</li>\n</ol>\n<p>All messages transmitted during a POP3 session are assumed to conform\nto the standard for the format of Internet text messages [RFC822].</p>\n<p>It is important to note that the octet count for a message on the\nserver host may differ from the octet count assigned to that message\ndue to local conventions for designating end-of-line. Usually,\nduring the AUTHORIZATION state of the POP3 session, the POP3 server\ncan calculate the size of each message in octets when it opens the\nmaildrop. For example, if the POP3 server host internally represents\nend-of-line as a single character, then the POP3 server simply counts\neach occurrence of this character in a message as two octets. Note\nthat lines in the message which start with the termination octet need\nnot (and must not) be counted twice, since the POP3 client will\nremove all byte-stuffed termination characters when it receives a\nmulti-line response.</p>\n<ol start=\"12\">\n<li>References</li>\n</ol>\n<p>[RFC821] Postel, J., \"Simple Mail Transfer Protocol\", STD 10, RFC\n821, USC/Information Sciences Institute, August 1982.</p>\n<p>[RFC822] Crocker, D., \"Standard for the Format of ARPA-Internet Text\nMessages\", STD 11, RFC822, University of Delaware, August 1982.</p>\n<p>[RFC1321] Rivest, R., \"The MD5 Message-Digest Algorithm\", RFC1321,\nMIT Laboratory for Computer Science, April 1992.</p>\n<p>[RFC1730] Crispin, M., \"Internet Message Access Protocol - Version\n4\", RFC1730, University of Washington, December 1994.</p>\n<p>[RFC1734] Myers, J., \"POP3 AUTHentication command\", RFC1734,\nCarnegie Mellon, December 1994.</p>\n<ol start=\"13\">\n<li>Security Considerations</li>\n</ol>\n<p>It is conjectured that use of the APOP command provides origin\nidentification and replay protection for a POP3 session.\nAccordingly, a POP3 server which implements both the PASS and APOP\ncommands should not allow both methods of access for a given user;\nthat is, for a given mailbox name, either the USER/PASS command\nsequence or the APOP command is allowed, but not both.</p>\n<p>Further, note that as the length of the shared secret increases, so\ndoes the difficulty of deriving it.</p>\n<p>Servers that answer -ERR to the USER command are giving potential\nattackers clues about which names are valid.</p>\n<p>Use of the PASS command sends passwords in the clear over the\nnetwork.</p>\n<p>Use of the RETR and TOP commands sends mail in the clear over the\nnetwork.</p>\n<p>Otherwise, security issues are not discussed in this memo.</p>\n<ol start=\"14\">\n<li>Acknowledgements</li>\n</ol>\n<p>The POP family has a long and checkered history. Although primarily\na minor revision to RFC1460, POP3 is based on the ideas presented in\nRFCs 918, 937, and 1081.</p>\n<p>In addition, Alfred Grimstad, Keith McCloghrie, and Neil Ostroff\nprovided significant comments on the APOP command.</p>\n<ol start=\"15\">\n<li>Authors' Addresses</li>\n</ol>\n<p>John G. Myers\nCarnegie-Mellon University\n5000 Forbes Ave\nPittsburgh, PA 15213</p>\n<p>EMail: <a href=\"mailto:jgm+@cmu.edu\">jgm+@cmu.edu</a></p>\n<p>Marshall T. Rose\nDover Beach Consulting, Inc.\n420 Whisman Court\nMountain View, CA 94043-2186</p>\n<p>EMail: <a href=\"mailto:mrose@dbc.mtview.ca.us\">mrose@dbc.mtview.ca.us</a></p>\n<p>Appendix A. Differences from RFC1725</p>\n<p>This memo is a revision to RFC1725, a Draft Standard. It makes the\nfollowing changes from that document:</p>\n<ul>\n<li>\n<p>clarifies that command keywords are case insensitive.</p>\n</li>\n<li>\n<p>specifies that servers must send \"+OK\" and \"-ERR\" in</p>\n</li>\n</ul>\n<p>upper case.</p>\n<ul>\n<li>specifies that the initial greeting is a positive response,</li>\n</ul>\n<p>instead of any string which should be a positive response.</p>\n<ul>\n<li>\n<p>clarifies behavior for unimplemented commands.</p>\n</li>\n<li>\n<p>makes the USER and PASS commands optional.</p>\n</li>\n<li>\n<p>clarified the set of possible responses to the USER command.</p>\n</li>\n<li>\n<p>reverses the order of the examples in the USER and PASS</p>\n</li>\n</ul>\n<p>commands, to reduce confusion.</p>\n<ul>\n<li>clarifies that the PASS command may only be given immediately</li>\n</ul>\n<p>after a successful USER command.</p>\n<ul>\n<li>clarified the persistence requirements of UIDs and added some</li>\n</ul>\n<p>implementation notes.</p>\n<ul>\n<li>\n<p>specifies a UID length limitation of one to 70 octets.</p>\n</li>\n<li>\n<p>specifies a status indicator length limitation</p>\n</li>\n</ul>\n<p>of 512 octets, including the CRLF.</p>\n<ul>\n<li>clarifies that LIST with no arguments on an empty mailbox</li>\n</ul>\n<p>returns success.</p>\n<ul>\n<li>adds a reference from the LIST command to the Message Format</li>\n</ul>\n<p>section</p>\n<ul>\n<li>\n<p>clarifies the behavior of QUIT upon failure</p>\n</li>\n<li>\n<p>clarifies the security section to not imply the use of the</p>\n</li>\n</ul>\n<p>USER command with the APOP command.</p>\n<ul>\n<li>\n<p>adds references to RFCs 1730 and 1734</p>\n</li>\n<li>\n<p>clarifies the method by which a UA may enter mail into the</p>\n</li>\n</ul>\n<p>transport system.</p>\n<ul>\n<li>clarifies that the second argument to the TOP command is a</li>\n</ul>\n<p>number of lines.</p>\n<ul>\n<li>changes the suggestion in the Security Considerations section</li>\n</ul>\n<p>for a server to not accept both PASS and APOP for a given user\nfrom a \"must\" to a \"should\".</p>\n<ul>\n<li>adds a section on scaling and operational considerations</li>\n</ul>\n<p>Appendix B. Command Index</p>\n<p>APOP ....................................................... 15\nDELE ....................................................... 8\nLIST ....................................................... 6\nNOOP ....................................................... 9\nPASS ....................................................... 14\nQUIT ....................................................... 5\nQUIT ....................................................... 10\nRETR ....................................................... 8\nRSET ....................................................... 9\nSTAT ....................................................... 6\nTOP ........................................................ 11\nUIDL ....................................................... 12\nUSER ....................................................... 13\n</wait></close></the></the></open></wait><a href=\"mailto:/process-id.clock@hostname\">/process-id.clock@hostname</a></the></the></pre></p>\n</div>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"本站源码","url":"https://github.com/Jeff-Tian/space","style":"link","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}