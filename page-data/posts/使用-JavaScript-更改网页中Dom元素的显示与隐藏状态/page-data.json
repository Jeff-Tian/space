{"componentChunkName":"component---src-templates-post-js","path":"/posts/使用-JavaScript-更改网页中Dom元素的显示与隐藏状态/","result":{"data":{"sitePage":{"id":"SitePage /posts/使用-JavaScript-更改网页中Dom元素的显示与隐藏状态/"}},"pageContext":{"url":"/posts/使用-JavaScript-更改网页中Dom元素的显示与隐藏状态/","relativePath":"posts/使用-JavaScript-更改网页中Dom元素的显示与隐藏状态.md","relativeDir":"posts","base":"使用-JavaScript-更改网页中Dom元素的显示与隐藏状态.md","name":"使用-JavaScript-更改网页中Dom元素的显示与隐藏状态","frontmatter":{"title":"使用 JavaScript 更改网页中Dom元素的显示与隐藏状态","stackbit_url_path":"posts/使用-JavaScript-更改网页中Dom元素的显示与隐藏状态","date":"2010-01-29 07:00:43","excerpt":"","comments_count":0,"positive_reactions_count":0,"tags":[null],"canonical_url":"https://be-net.azurewebsites.net/post/2010/01/29/使用-JavaScript-更改网页中Dom元素的显示与隐藏状态","template":"post"},"html":"<pre><code>    &#x3C;div style=\"text-indent: 2em;\">\n</code></pre>\n<p>如果某一Dom元素在网页中是不可见的，要使用 JavaScript 将它更改为可见状态，需要注意检查这个元素的祖先元素是否可见，而不是仅仅修改该元素的 style.display以及style.visible 就行了的。如果它某个祖先元素是隐藏的，那么即使这个元素的style.display属性为block而且style.visible属性为true，在网页中它仍然不会出现。</p>\n<p>同样，如果要判断一给定的元素在页面中是否可见，不可以仅仅判断该元素自身的style.display和style.visible属性，还要依次检查其所有的祖先元素的style.display和style.visible，如果它们的style.display全不为'none'且style.visible全不为false，那么就可以确定该元素是可见的。</p>\n<p>原理如上，很简单，但在实际操作上，除了style要检查外，为了确保安全，还要对其最终样式（在IE中为currentStyle，在Dom中为document.defaultView.getComputedStyle）进行同样的操作。</p>\n<p>最终实现的代码为(mfDomKit.js)：</p>\n</div>\n<div style=\"text-indent: 0;\">\n<pre class=\"brush: javascript\">//****************************************************************************************\n// 注释：mfDomKit 对象\n//\n// 日期             作者                行为\n// ---------------------------------------------------------------------------------------\n// 2010-1-29        涂鸦                创建\n//****************************************************************************************\n<p>function mfDomKit() {\nthis.version = '1.0';\n}</p>\n<p>//////////////////////////////////////////////////////////////////////////////////////////\n// 注释：   判断一个元素是否可见\n//\n// 参数：   o   要判断的元素，一般是一个HTML元素，如一个<div> </div>层等\n//\n// 返回：   true    如果可见\n//          false   如果不可见\n//\n// 日期         作者                行为\n// ---------------------------------------------------------------------------------------\n// 2010-1-29    涂鸦                创建\n//////////////////////////////////////////////////////////////////////////////////////////\nmfDomKit.prototype.isVisible = function(o) {\nif (o) {\nif (o.style) {\nif (o.style.display == 'none' || o.style.visible == 'false') {\nreturn false;\n} else {\n//return true;\n// 递归检查其父结点，直到最顶层\nif (o.parentElement) {\nreturn this.isVisible(o.parentElement);\n} else {\nreturn true;\n}\n} // end if (o.style.display == 'none')\n} else {\nif (document.defaultView) {\nif (document.defaultView.getComputedStyle(o, null).display == 'none' || document.defaultView.getComputedStyle(o, null).visible == 'false') {\nreturn false;\n} else {\n//return true;\n// 递归检查其父结点，直到最顶层\nif (o.parentElement) {\nreturn this.isVisible(o.parentElement);\n} else {\nreturn true;\n}\n} // end if (document.defaultView.getComputedStyle(o, null).display == 'none')\n} else {\nif (o.currentStyle) {\nif (o.currentStyle.display == 'none' || o.currentStyle.visible == 'false') {\nreturn false;\n} else {\n// 递归检查其父结点，直到最顶层\nif (o.parentElement) {\nreturn this.isVisible(o.parentElement);\n} else {\nreturn true;\n}\n}\n} else {\nreturn true;\n}\n}\n} // end if (o.style.display)\n}\n};</p>\n<p>//////////////////////////////////////////////////////////////////////////////////////////\n// 注释：   显示一个元素\n//\n// 参数：   o                   要显示的元素，一般是一个HTML元素，如<div> </div>层等\n//          oLastChangedDisplay 可选参数，一般不用传递过去。它的作用在试图显示元素 o 时，\n//                              记住那个最后被修改了Display属性的元素。它会在递归时作为中间\n//                              变量，如果不传递过去，此函数会自动生成这样的中间变量。所以\n//                              一般是不用显式传递此参数的。\n//\n// 返回：   oLastChangedDisplay 返回一个元素，该元素就是那个在试图显示元素 o 的过程中，最后\n//                              一个被改变了Display属性的元素。它可能是 o 自身，也可能是 o\n//                              的祖先节点元素。\n//\n// 日期         作者        行为\n// --------------------------------------------------------------------------------------\n// 2010-1-29    涂鸦        创建\n/////////////////////////////////////////////////////////////////////////////////////////\nmfDomKit.prototype.showElement = function(o, oLastChangedDisplay) {\nif (!oLastChangedDisplay) {\nvar oLastChangedDisplay = null;\n}\nif (o) {\nif (o.style) {\nif (o.style.display == 'none') {\no.style.display = '';\n// 记住被修改过display属性的元素\noLastChangedDisplay = o;\n}\nif (o.style.visible == 'false') {\no.style.visible = 'true';\n// 记住被修改过display属性的元素\noLastChangedDisplay = o;\n}\n} else {\nif (document.defaultView) {\nif (document.defaultView.getComputedStyle(o, null).display == 'none') {\ndocument.defaultView.getComputedStyle(o, null).display = '';\noLastChangedDisplay = o;\n}\nif (document.defaultView.getComputedStyle(o, null).visible == 'false') {\ndocument.defaultView.getComputedStyle(o, null).visible = 'true';\noLastChangedDisplay = o;\n}\n} else {\nif (o.currentStyle) {\nif (o.currentStyle.display == 'none') {\no.currentStyle.display = '';\noLastChangedDisplay = o;\n}\nif (o.currentStyle.visible == 'false') {\no.currentStyle.visible = 'true';\noLastChangedDisplay = o;\n}\n} else {\n}\n}\n} // end if (o.style.display)</p>\n<pre><code>    // 递归检查其父结点，直到最顶层\n    if (o.parentElement) {\n        return this.showElement(o.parentElement, oLastChangedDisplay);\n    } else {\n        return oLastChangedDisplay;\n    }\n} // end if (o)\n</code></pre>\n<p>};</p>\n<p>/////////////////////////////////////////////////////////////////////////////////////////////\n// 注释：   隐藏一个元素\n//\n// 参数：   o   要隐藏的元素\n//\n// 返回：   什么也不返回\n//\n// 日期         作者                行为\n// ------------------------------------------------------------------------------------------\n// 2010-1-29    涂鸦                创建\n/////////////////////////////////////////////////////////////////////////////////////////////\nmfDomKit.prototype.hideElement = function(o) {\nif (o) {\no.style.display = 'none';\n}\n};</p>\n<p>//////////////////////////////////////////////////////////////////////////////////////////////\n// 注释：   切换一个元素的显示与隐藏状态\n//\n// 参数：   o   要切换显示与隐藏状态的元素\n//\n// 返回：   true    切换成了显示状态\n//          false   切换成了隐藏状态\n//\n// 日期             作者                行为\n// -------------------------------------------------------------------------------------------\n// 2010-1-29        涂鸦                创建\n///////////////////////////////////////////////////////////////////////////////////////////////\nmfDomKit.prototype.toggleElement = function(o) {\nif (this.isVisible(o)) {\nthis.hideElement(o);\nreturn false;\n} else {\nthis.showElement(o);\nreturn true;\n}\n};\n</pre></p>\n</div>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","author":"@zizhujy","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"Made with Stackbit.","url":"https://www.stackbit.com","style":"link","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[],"slicesMap":{}}