{"componentChunkName":"component---src-templates-post-js","path":"/posts/自己动手编写一个Web服务器/","result":{"data":{"sitePage":{"id":"SitePage /posts/自己动手编写一个Web服务器/"}},"pageContext":{"url":"/posts/自己动手编写一个Web服务器/","relativePath":"posts/自己动手编写一个Web服务器.md","relativeDir":"posts","base":"自己动手编写一个Web服务器.md","name":"自己动手编写一个Web服务器","frontmatter":{"title":"自己动手编写一个Web服务器","stackbit_url_path":"posts/自己动手编写一个Web服务器","date":"2010-05-22 13:01:00","excerpt":"","comments_count":0,"positive_reactions_count":0,"tags":[null],"canonical_url":"https://be-net.azurewebsites.net/post/2010/05/22/自己动手编写一个Web服务器","template":"post"},"html":"<pre><code>    &#x3C;p>以下代码是我自己写的第一个Web服务器。它支持纯文本的英文字符的静态HTML页面。复制并将代码编译成.class文件后，运行它即可。它的监听端口是6789，网站根目录为C:\\Inetpub，如果该目录下有一个test.html文件，那么，运行它后，在浏览器中输入：&#x3C;/p>\n</code></pre>\n<p>http://localhost:6789/test.html，即可实现访问。</p>\n<p>它还可以作为一个查看浏览器请求报文（HTTP请求报文）的工具，要实现这点，只需要在浏览器中输入一个并不存在的网页文件（如 http://localhost:6789/notexists.html），服务器程序便把客户端浏览器的请求报文回显出来。</p>\n<p>源代码如下：</p>\n<pre class=\"brush: java\">\nimport java.io.*;\nimport java.net.*;\n<p>public class MyWebServer {\npublic static String WebRoot = \"C:\\Inetpub\";</p>\n<pre><code>/**\n * 将虚拟路径转换成实际物理路径\n * @param virtualPath\n * @return\n * @throws Exception\n */\nprivate static String mapPath(String virtualPath) throws Exception {\n\t\n\treturn WebRoot + virtualPath.replace(\"/\", \"\\\\\");\n}\n\nprivate static String parseVirtualPathFromRequest(String request) throws Exception {\n\treturn request.substring(4, request.indexOf(\" HTTP/1.1\"));\n}\n\npublic static void main(String argv[]) throws Exception {\n\t// 客户端来的请求字符串\n\tString request;\n\tString requestLine;\n\t// 响应字符串\n\tString response;\n\t// HTML 模板\n\tString htmlTemplate = \"&#x26;lt;html&#x26;gt;&#x26;lt;head&#x26;gt;&#x26;lt;meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=utf-8\\\"/&#x26;gt;&#x26;lt;title&#x26;gt;&#x26;lt;/title&#x26;gt;&#x26;lt;/head&#x26;gt;&#x26;lt;body&#x26;gt;&#x26;lt;/body&#x26;gt;&#x26;lt;/html&#x26;gt;\";\n\t\n\tlong count;\n\t\n\t// 显示启动信息\n\tprintInfo(\"我的网页服务器启动了。\");\n\t\n\t// 定义端口值\n\tint portNo;\n\t\n\tportNo = 6789;\n\t// 定义欢迎套接字\n\tServerSocket welcomeSocket = new ServerSocket(portNo);\n\t// 输入信息\n\tprintInfo(\"我的网页服务器在端口 \" + portNo + \" 处开启了一个欢迎套接字。\");\n\t\n\t// 不断接收来自客户端的请求\n\tcount = 0L;\n\twhile (true) {\n\t\t// 建立新的连接套接字\n\t\tSocket connectionSocket = welcomeSocket.accept();\n\t\tif (connectionSocket != null) {\n\t\t\tprintInfo(\"我的网页服务器收到来自客户端的请求，连接套接字已经建立。\");\n\t\t\tBufferedReader inFromClient = new BufferedReader(new InputStreamReader(connectionSocket.getInputStream()));\n\t\t\tDataOutputStream outToClient = new DataOutputStream(connectionSocket.getOutputStream());\n\n\t\t\trequest = \"\";\n\t\t\tresponse = \"\";\n\t\t\trequestLine = \"\";\n\t\t\twhile (true) {\t\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\tprintInfo(\"我的网页服务器开始读入客户端的请求字符串……\");\n\t\t\t\t\trequestLine = inFromClient.readLine();\n\t\t\t\t\tif (! requestLine.equals(\"\")) {\n\t\t\t\t\t\trequest += requestLine + \"\\n\";\n\t\t\t\t\t\tprintInfo(\"客户端请求：\" + requestLine);\n\t\t\t\t\t\tif (request.contains(\"quit\") || request.contains(\"exit\")) {\n\t\t\t\t\t\t\tprintInfo(\"客户端请求退出。\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (request.contains(\"quit\") || request.contains(\"exit\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprintInfo(\"客户端请求为空。我的网页服务器准备关闭该TCP连接。\");\n\t\t\t\t\t\t// 关闭连接前，给予一个响应\n\t\t\t\t\t\tString filePath = mapPath(parseVirtualPathFromRequest(request));\n\t\t\t\t\t\tFile file = new File(filePath);\n\t\t\t\t\t\tif (file.exists()) {\n\t\t\t\t\t\t\tFileReader myFile = new FileReader(filePath);\n\t\t\t\t\t\t\tBufferedReader myReader = new BufferedReader(myFile);\n\t\t\t\t\t\t\tString fileStream = myReader.readLine();\n\t\t\t\t\t\t\twhile (fileStream != null) {\n\t\t\t\t\t\t\t\tresponse += fileStream + \"\\n\";\n\t\t\t\t\t\t\t\tfileStream = myReader.readLine();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmyReader.close();\n\t\t\t\t\t\t\tmyFile.close();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tresponse = htmlTemplate.replace(\"&#x26;lt;title&#x26;gt;&#x26;lt;/title&#x26;gt;\", \"&#x26;lt;title&#x26;gt;Response Frome MyWebServer&#x26;lt;/title&#x26;gt;\").replace(\"&#x26;lt;body&#x26;gt;&#x26;lt;/body&#x26;gt;\", \"&#x26;lt;body&#x26;gt;&#x26;lt;h1&#x26;gt;Echo your request: &#x26;lt;/h1&#x26;gt;&#x26;lt;pre&#x26;gt;\" + request + \"&#x26;lt;/pre&#x26;gt;&#x26;lt;p&#x26;gt;You request \" + filePath + \", which is not exists.&#x26;lt;/p&#x26;gt;&#x26;lt;/body&#x26;gt;\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\toutToClient.writeBytes(response);\n\t\t\t\t\t\tprintInfo(\"我的网页服务器响应： \" + response);\n\t\t\t\t\t\t\n\t\t\t\t\t\tconnectionSocket.close();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tresponse = \"退出\" + \"\\n\";\n\t\t\t\t\tprintInfo(\"连接断开了，可能是客户端离开。详细信息为：\\n\" + e.toString());\n\t\t\t\t\tbreak;\n\t\t\t\t} finally {\n\t\t\t\t}\n\t\t\t} \n\t\t\tprintInfo(\"连接关闭了。\");\n\t\t\tinFromClient.close();\n\t\t\toutToClient.close();\n\t\t} else {\n\t\t\tprintInfo(\"我的网页服务器收到来自客户端的请求，但是连接套接字未能建立。\");\n\t\t}\n\t\tconnectionSocket.close();\n\t}\t\t\n}\n\n/**\n * 在控制板中输入信息\n * @param info\n * @throws Exception\n */\nprivate static void printInfo(String info) throws Exception {\n\tSystem.out.println(info);\n}\n</code></pre>\n<p>}\n</pre></p>\n<div>&nbsp;</div>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"Made with Stackbit.","url":"https://www.stackbit.com","style":"link","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}