{"componentChunkName":"component---src-templates-post-js","path":"/posts/gnu74o","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/gnu74o","relativePath":"posts/gnu74o","frontmatter":{"title":"闭包的妙用 —— memoize","stackbit_url_path":"posts/gnu74o","date":"2021-02-27T08:33:11","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<p><a name=JPWgH></a></p>\n<h2>闭包回顾</h2>\n<p>在《闭包是个什么球》中介绍说闭包是一个特殊的高阶函数，它会返回另一个函数，而这个被返回的函数，又引用了其上层函数中的变量。那么，这种特殊的或者说奇怪的函数有什么用呢？我在另一篇《闭包有什么用》一文里罗列了一些。今天再次回到闭包这个话题，使用一个例子来具体说明其用处，这个例子就是 memoize。</p>\n<p><a name=ZocNI></a></p>\n<h2>memoize</h2>\n<p>memoize，是一个常见的函数，很多库比如 lodash 或者 rambda 中都有，可供你拿来就用。它用空间换时间，让耗时的操作只会执行一次，从而加快程序的运行速度。</p>\n<p>它的实现，就用到了闭包。我们试着来实现一个 naive memoize 吧！首先明确一下需求：</p>\n<p>对于某个函数 fn，只要它一旦被 memoize 过，那么，对于同样的参数，它将立即给出结果而不需要再次计算。</p>\n<p>动手写代码实现 memoize 前，先想想怎么验证它是否被实现了呢？（这是一个测试驱动开发的好习惯）</p>\n<p>思路是在某个函数中增加一个计数器，一旦调用一次，就增加 1。所以对于同样的参数调用，期待这个计数器只会被增加一次。不如就用加法函数来验证吧：\ntypescript\nit(memoize sum, () => {\nlet count = 0;</p>\n<pre><code>const sum = (x1: number, x2: number) => {\n  count++;\n\n  return x1 + x2;\n};\n\nconst memoizedSum = memoize(sum);\n\nexpect(count).toBe(0);\nexpect(memoizedSum(1, 1)).toEqual(2);\nexpect(count).toBe(1);\nexpect(memoizedSum(1, 1)).toEqual(2);\nexpect(count).toBe(1);\nexpect(memoizedSum(1, 2)).toEqual(3);\nexpect(count).toBe(2);\n</code></pre>\n<p>});</p>\n<p>跑一下，发现 memoize 含没有被定义，我们来写个实现：\ntypescript\nexport const memoize = (fn: Function) => {\nconst cache: Record&#x3C;string, any> = {};</p>\n<p>return (...args: any) => {\nconst key = JSON.stringify(args);\nif (!cache[key]) {\ncache[key] = fn(...args);\n}</p>\n<pre><code>return cache[key];\n</code></pre>\n<p>};\n};</p>\n<p>再次运行测试，通过了！仔细看一下这个幼稚的实现，简直是闭包定义（返回一个引用了上层函数也就是外部作用域里的变量的函数的高阶函数）的完美体现。首先，memoize 接受一个函数作为参数；其次，它并不执行那个参数，而是返回另外一个函数，这个被返回的函数体才会去调用原本传入的函数，因此将原函数的执行延迟了。最后，返回的函数体中引用了上层函数里定义的 cache 变量。</p>\n<p><a name=XVpuO></a></p>\n<h2>总结</h2>\n<p>到这里，一个幼稚的 memoize 就实现了，用法和 lodash 里的 memoize 类似。</p>\n<p><a name=EVZic></a></p>\n<h2>避坑指南</h2>\n<p>我曾经在使用 lodash 的 memoize 时，希望用最小的改动，将一个耗时操作封装一下，成为一个只会将同样的事情做一次的操作，于是写了这样的代码：\ndiff\nexport timeConsumingFn = () {\n...\n}</p>\n<p>export main() {\n...</p>\n<ul>\n<li>timeConsumingFn()</li>\n</ul>\n<ul>\n<li>_.memoize(timeConsumingFn)()\n...</li>\n</ul>\n<p>}</p>\n<p>结果发现，还是每次执行都很耗时，感觉被 lodash 的 memoize 骗了。后来仔细一想，原来时自己的使用姿势不正确，因为上面的写法中，虽然对原耗时操作进行了 memoize 封装，但是每次调用都是重新封装一次，于是被封装后的函数，对它来说，每次都是第一次执行，所以导致了原来的目标没有实现。还记得在 memoize 函数体中有一个 cache 吗？以上写法导致每次都是新建一个 cache，每次的 cache 里存了一个操作结果后，就没有继续利用了。就是说，以上写法不仅没能让原本的操作加快速度，反而增加了很多内存占用。</p>\n<p><a name=EjnHJ></a></p>\n<h2>正确的写法</h2>\n<p>应该将 memoize 封装后的函数使用新的函数名保存，并保证每次执行使用第一次封装后的新函数（关键在于封装只需要而且只能进行一次）。\ndiff\nexport timeConsumingFn = () {\n...\n}</p>\n<ul>\n<li>memoizedTimeConsumingFn = _.memoize(timeConsumingFn)</li>\n</ul>\n<p>export main() {\n...</p>\n<ul>\n<li>timeConsumingFn()</li>\n</ul>\n<ul>\n<li>memoizedTimeConsumingFn()\n...</li>\n</ul>\n<p>}</p>\n<p>成功实现加快程序运行速度的目标！</p>\n<p><a name=rDUNH></a></p>\n<h2>将避坑指南写进测试里</h2>\n<p>以上介绍了 lodash 的 memoize 避坑指南，那么我们写的幼稚的 memoize 有同样的坑吗？当然有，那么写一个测试用例，以示警告：</p>\n<p>typescript\nit(doesnt memoize if you use it like this: , () => {\nlet count = 0;\nconst sum = (x1: number, x2: number) => {\ncount++;</p>\n<pre><code>return x1 + x2;\n</code></pre>\n<p>};</p>\n<p>expect(count).toBe(0);\nexpect(memoize(sum)(1, 1)).toEqual(2);\nexpect(count).toBe(1);\nexpect(memoize(sum)(1, 1)).toEqual(2);\nexpect(count).toBe(2);\n});</p>\n<p><a name=ksdYS></a></p>\n<h2>忘掉避坑指南</h2>\n<p>虽然有办法避坑，但是那个坑实在太容易掉进去了呀！毕竟 memoize 这个名字听上去就是只要用一下它就将原函数记住了呀，还非要一个额外的变量存储那个被记住的函数？</p>\n<p>所以我们现在将幼稚的 memoize 再增强一下吧，这个增强版，我们希望即使直接用，不用新的变量，也能达到同样的效果。不如把这个增强的 memoize 函数叫做 memoized 吧，我们希望达到的效果，也写成测试用例，只需要把那个预警测试用例稍改一下：\ntypescript\nit(does memoize if you use memoized instead, () => {\nlet count = 0;\nconst sum = (x1: number, x2: number) => {\ncount++;</p>\n<pre><code>return x1 + x2;\n</code></pre>\n<p>};</p>\n<p>expect(count).toBe(0);\nexpect(memoized(sum)(1, 1)).toEqual(2);\nexpect(count).toBe(1);\nexpect(memoized(sum)(1, 1)).toEqual(2);\nexpect(count).toBe(1);\n});</p>\n<p>看上去非常完美，怎么实现这个 memoized 呢？我有一个很直接简单粗暴的想法，可能也是一个疯狂的想法：<strong>为什么不用 memoize 将它自己封装一下呢</strong>？毕竟 memoize 是一个函数，而 memoize 的参数可以是任何函数。于是我写下了如下的实现代码：\ntypescript\nexport const memoized = memoize(memoize);</p>\n<p>有点不敢相信，但是运行一下测试，通过！</p>\n<p>使用 memoized，再也不用记住那个避坑指南了，减少了很多认知负担。从此这个程序员过上了幸福的编码生活。</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"本站源码","url":"https://github.com/Jeff-Tian/space","style":"link","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}