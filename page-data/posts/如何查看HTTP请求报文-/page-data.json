{"componentChunkName":"component---src-templates-post-js","path":"/posts/如何查看HTTP请求报文-/","result":{"data":{"sitePage":{"id":"SitePage /posts/如何查看HTTP请求报文-/"}},"pageContext":{"url":"/posts/如何查看HTTP请求报文-/","relativePath":"posts/如何查看HTTP请求报文-.md","relativeDir":"posts","base":"如何查看HTTP请求报文-.md","name":"如何查看HTTP请求报文-","frontmatter":{"title":"如何查看HTTP请求报文 ","stackbit_url_path":"posts/如何查看HTTP请求报文-","date":"2010-01-19 15:42:18","excerpt":"","comments_count":0,"positive_reactions_count":0,"tags":[null],"canonical_url":"https://be-net.azurewebsites.net/post/2010/01/19/如何查看HTTP请求报文-","template":"post"},"html":"<pre><code>    &#x3C;div style=\"text-indent: 2em;\">\n</code></pre>\n<p>我曾经写过一篇文章，<a href=\"http://www.myfootprints.cn/blog/post/16.html\" target=\"_blank\" title=\"如何查看HTTP响应报文\">如何查看HTTP响应报文</a>，说的是，通过Windows系统下的命令行，使用Telnet命令来查看服务器返回的HTTP响应报文。在那里，是通过手动输入HTTP请求报文（即自己是客户端），将此报文发送给服务器，然后接收来自服务器的回复报文。</p>\n<p>今天，我们将位置反过来，自己是服务器，接受来自客户端的HTTP请求报文，然后给予客户端以响应。与上次相反，上次不关心请求报文，而这次是不关心响应报文（即我们不给客户端合乎HTTP协议的HTTP响应报文，而是随便一个什么响应吧），专门查看来自客户端的规范的HTTP请求报文。</p>\n<p>做法是，自己编写一个服务器程序。（我正好在学习Java编程，这里使用Java程序设计语言。）写好这个程序后，编译并运行它，然后在你可以使用的机器的浏览器里，将其设置中的代理服务器的地址设置为正在运行服务器程序的机器的IP地址，然后将端口号填写上服务器程序监听所在的端口号。设置好后，随便在浏览器地址栏里输入一个网址，尝试打开它。这时浏览器便发送了相应的HTTP请求报文，并被自己写好的服务器程序读取到，让服务器将它读到的报文显示出来，我们就可以查看到客户端的请求报文了。</p>\n<p>通过此练习后，我还突然理解了网站服务器程序（如IIS、Apache等）的工作方式。原来它们就是一直在一个端口监听来自客户端的连接请求。一旦连接建立，客户向服务器程序请求相关资源（如Web页面），它们就去磁盘里寻找相关的文件，找到后，将文件内容打包到HTTP响应报文中，返回给客户端。我想，我就快要能够自己写一个网站服务器程序了。</p>\n<p>通过此练习，我还看到了浏览器的工作方式，它在前一个连接关闭之后，立即又发起了另一个HTTP请求，请求的是该网页中的一个引用对象 favicon.ico。</p>\n<p>以下是服务器程序代码(TCPServer.java)：</p>\n<pre class=\"brush: java\" style=\"text-indent: 0;\">import java.io.*;\nimport java.net.*;\n<p>public class TCPServer {\npublic static void main(String argv[]) throws Exception {\n// 客户端来的请求字符串\nString sClientLine;\n// 处理后的字符串\nString sMyLine;\nLong lCount;</p>\n<pre><code>\t// 显示启动信息\n\tSystem.out.println(\"服务器程序启动了。\");\n\t\n\t// 定义端口值\n\tint iPortNo;\n\t\n\tiPortNo = 6789;\n\t// 定义欢迎套接字\n\tServerSocket oWelcomeSocket = new ServerSocket(iPortNo);\n\t// 输出信息\n\tSystem.out.println(\"服务器在端口 \" + iPortNo + \" 处开启了一个欢迎套接字。\");\n\t// 不断地接收来自客户端的请求\n\tlCount = 0L;\n\twhile (true) {\n\t\t// 新建立连接套接字\n\t\tSocket oConnectionSocket = oWelcomeSocket.accept();\n\t\tif (oConnectionSocket != null) {\n\t\t\tSystem.out.println(\"服务器收到来自客户端的请求，连接套接字已经建立。\");\n\t\t\tBufferedReader oInFromClient = new BufferedReader(new InputStreamReader(oConnectionSocket.getInputStream()));\n\t\t\tDataOutputStream oOutToClient = new DataOutputStream(oConnectionSocket.getOutputStream());\n\t\t\twhile (true) {\n\t\t\t\tsClientLine = \"\";\n\t\t\t\tsMyLine = \"\";\n\t\t\t\ttry {\n</code></pre>\n<p>//\t\t\t\t\t\tif (oInFromClient.ready()) {\nSystem.out.println(\"开始读入客户端的请求字符串……\");\nsClientLine = oInFromClient.readLine();\nif (! sClientLine.equals(\"\")) {\nsMyLine = sClientLine + '\\n';\nSystem.out.println(\"客户端说： \" + sClientLine);\nif (sClientLine.equalsIgnoreCase(\"quit\") || sClientLine.equalsIgnoreCase(\"exit\")) {\nSystem.out.println(\"客户端想离开。\");\nsMyLine = \"好的，我会让你走的。\";\n}\noOutToClient.writeBytes(sMyLine);\nSystem.out.println(\"我说： \" + sMyLine);\nif (sClientLine.equalsIgnoreCase(\"quit\") || sClientLine.equalsIgnoreCase(\"exit\")) {\nbreak;\n}\n} else {\nSystem.out.println(\"客户端什么也没有说。我准备关闭此连接。\");\noConnectionSocket.close();\nbreak;\n}\n//\t\t\t\t\t\t} else {\n//\t\t\t\t\t\t\tSystem.out.println(\"客户端缓冲数据未准备好。我准备关闭此连接。\");\n//\t\t\t\t\t\t\toConnectionSocket.close();\n//\t\t\t\t\t\t\tbreak;\n//\t\t\t\t\t\t}\n} catch (Exception oError) {\nsMyLine = \"退出\" + '\\n';\nSystem.out.println(\"连接断开了，可能是客户端断开的。\");\nbreak;\n} finally {</p>\n<pre><code>\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(\"连接关闭了。\");\n\t\t} else {\n\t\t\tSystem.out.println(\"服务器收到来自客户端的请求，连接套接字建立失败。\");\n\t\t}\n</code></pre>\n<p>//\t\t\tlCount ++;\n//\t\t\tif (lCount >= 10) {\n//\t\t\t\tbreak;\n//\t\t\t}\n}\n// 服务器程序结束\n//\t\tSystem.out.println(\"服务器程序结束。\");\n}\n}\n</pre></p>\n<p>以下是运行上面的程序，并截获到HTTP请求报文所显示的相关内容：</p>\n<pre style=\"text-indent: 0; broder: dashed 2px #dedede; padding: 10px;\">服务器程序启动了。\n服务器在端口 6789 处开启了一个欢迎套接字。\n服务器收到来自客户端的请求，连接套接字已经建立。\n开始读入客户端的请求字符串……\n客户端说： GET http://www.myfootprints.cn/ HTTP/1.1\n我说： GET http://www.myfootprints.cn/ HTTP/1.1\n<p>开始读入客户端的请求字符串……\n客户端说： Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/x-silverlight, application/x-ms-application, application/x-ms-xbap, application/vnd.ms-xpsdocument, application/xaml+xml, application/x-shockwave-flash, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, <em>/</em>\n我说： Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/x-silverlight, application/x-ms-application, application/x-ms-xbap, application/vnd.ms-xpsdocument, application/xaml+xml, application/x-shockwave-flash, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, <em>/</em></p>\n<p>开始读入客户端的请求字符串……\n客户端说： Accept-Language: zh-cn\n我说： Accept-Language: zh-cn</p>\n<p>开始读入客户端的请求字符串……\n客户端说： User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; QQWubi 87; QQDownload 609; Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) ; CIBA; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)\n我说： User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; QQWubi 87; QQDownload 609; Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) ; CIBA; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)</p>\n<p>开始读入客户端的请求字符串……\n客户端说： Accept-Encoding: gzip, deflate\n我说： Accept-Encoding: gzip, deflate</p>\n<p>开始读入客户端的请求字符串……\n客户端说： Proxy-Connection: Keep-Alive\n我说： Proxy-Connection: Keep-Alive</p>\n<p>开始读入客户端的请求字符串……\n客户端说： Host: <a href=\"http://www.myfootprints.cn\">www.myfootprints.cn</a>\n我说： Host: <a href=\"http://www.myfootprints.cn\">www.myfootprints.cn</a></p>\n<p>开始读入客户端的请求字符串……\n客户端说： Cookie: lstat_bc_1342022=10971800501034495286\n我说： Cookie: lstat_bc_1342022=10971800501034495286</p>\n<p>开始读入客户端的请求字符串……\n客户端什么也没有说。我准备关闭此连接。\n连接关闭了。\n服务器收到来自客户端的请求，连接套接字已经建立。\n开始读入客户端的请求字符串……\n客户端说： GET <a href=\"http://www.myfootprints.cn/favicon.ico\">http://www.myfootprints.cn/favicon.ico</a> HTTP/1.1\n我说： GET <a href=\"http://www.myfootprints.cn/favicon.ico\">http://www.myfootprints.cn/favicon.ico</a> HTTP/1.1</p>\n<p>开始读入客户端的请求字符串……\n客户端说： Accept: <em>/</em>\n我说： Accept: <em>/</em></p>\n<p>开始读入客户端的请求字符串……\n客户端说： Accept-Encoding: gzip, deflate\n我说： Accept-Encoding: gzip, deflate</p>\n<p>开始读入客户端的请求字符串……\n客户端说： User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; QQWubi 87; QQDownload 609; Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) ; CIBA; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)\n我说： User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; QQWubi 87; QQDownload 609; Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) ; CIBA; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)</p>\n<p>开始读入客户端的请求字符串……\n客户端说： Host: <a href=\"http://www.myfootprints.cn\">www.myfootprints.cn</a>\n我说： Host: <a href=\"http://www.myfootprints.cn\">www.myfootprints.cn</a></p>\n<p>开始读入客户端的请求字符串……\n客户端说： Proxy-Connection: Keep-Alive\n我说： Proxy-Connection: Keep-Alive</p>\n<p>开始读入客户端的请求字符串……\n客户端说： Cookie: lstat_bc_1342022=10971800501034495286\n我说： Cookie: lstat_bc_1342022=10971800501034495286</p>\n<p>开始读入客户端的请求字符串……\n客户端什么也没有说。我准备关闭此连接。\n连接关闭了。\n</pre></p>\n</div>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","author":"@zizhujy","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"Made with Stackbit.","url":"https://www.stackbit.com","style":"link","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}}}},"staticQueryHashes":[],"slicesMap":{}}