{"componentChunkName":"component---src-templates-post-js","path":"/posts/giptcw","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/giptcw","relativePath":"posts/giptcw","frontmatter":{"title":"给 Java gradle 工程添加 git hooks","stackbit_url_path":"posts/giptcw","date":"2021-06-08T11:56:24","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<p>接《<a href=\"https://zhuanlan.zhihu.com/p/376821879\">后端工程圣殿形象的崩塌以及重建</a>》，今天记录一下使用土办法给 Java gradle 工程添加 git hooks 的步骤，并且创建了一个样例项目和提交记录放在了 GitHub：<a href=\"https://github.com/Jeff-Tian/securing-web-with-wechat-mp/commit/2a844e890cb0d91eaf5b5684f9d750cf586613a2\">https://github.com/Jeff-Tian/securing-web-with-wechat-mp/commit/2a844e890cb0d91eaf5b5684f9d750cf586613a2</a>。欢迎👏 围观和批评，毕竟这是一个很土的办法。</p>\n<p><a name=EwTxM></a></p>\n<h1>背景简介</h1>\n<p>Git 钩子可以在某些事件发生时，执行指定的任务。比如我希望在自己的工程里，当进行 git commit 和 push 前，跑一边测试，确保新的代码改动没有带来问题，那么就可以分别添加 pre-commit 和 pre-push 两个钩子事件任务。</p>\n<p>默认的 Git 钩子目录是 .git/hooks。这个目录就是 Git 会在项目的事件发生时去检查可能需要执行的脚本的地方。</p>\n<p><a name=OaKcj></a></p>\n<h1>思路</h1>\n<p>还是因为对 Java 的世界不熟悉，因此走了土办法途径。很容易想到，直接写两个脚本，分别对应 pre-commit 和 pre-push，放在 .git/hooks 目录下。但这样做的缺点是，当你换一台机器时，这个信息就丢失了，因为这个改动没有纳入到源代码管理中。</p>\n<p>所以想到的改进方案时将脚本写在源代码里，然后向 build.gradle 文件中添加一个安装钩子的任务，这样一来，所有拉去改项目的机器，都可以一键安装钩子。</p>\n<p><a name=qkqw2></a></p>\n<h1>实现</h1>\n<p><a name=Rcuy9></a></p>\n<h2>创建脚本</h2>\n<p>针对背景简介里的需求，一共需要创建两种钩子，分别是 pre-commit 和 pre-push。为了支持 macOS 和 windows 开发机，对每种钩子分别创建两个文件。以 pre-push 为例，分别创建 pre-push-macos 和 pre-push-windows 两个文件，如下：</p>\n<p><a name=LYMB9></a></p>\n<h3>pre-push-macos：</h3>\n<p>shell\n#!/bin/bash</p>\n<p>echo 运行测试...</p>\n<p>./gradlew test --info</p>\n<p>status=$?</p>\n<h1>如果测试失败会返回码置为 1</h1>\n<p>[ $status -ne 0 ] &#x26;&#x26; exit 1\nexit 0</p>\n<p><a name=BxoXM></a></p>\n<h3>pre-push-windows：</h3>\n<p>shell\n#!C:/Program Files/Git/usr/bin/sh.exe</p>\n<p>echo 运行测试...</p>\n<p>./gradlew test --info</p>\n<p>status=$?</p>\n<h1>如果测试失败会返回码置为 1</h1>\n<p>[ $status -ne 0 ] &#x26;&#x26; exit 1\nexit 0</p>\n<p>两个文件几乎一致，只是第一行 She bang line 有区别，因为这两种系统对应的可以执行的 sh 文件所在目录有区别。</p>\n<p><a name=j2ub1></a></p>\n<h2>向 build.gradle 文件添加安装钩子的任务</h2>\n<p>groovy\nimport org.apache.tools.ant.taskdefs.condition.Os</p>\n<p>task installGitHooks(type: Copy) {\ndef suffix = macos\nif (Os.isFamily(Os.FAMILY_WINDOWS)) {\nsuffix = windows\n}\nfrom new File(rootProject.rootDir, scripts/pre-commit-$suffix)\ninto { new File(rootProject.rootDir, .git/hooks) }\nrename(pre-commit-$suffix, pre-commit)</p>\n<pre><code>from new File(rootProject.rootDir, scripts/pre-push-$suffix)\ninto { new File(rootProject.rootDir, .git/hooks) }\nrename(pre-push-$suffix, pre-push)\n\nfileMode 0775\n</code></pre>\n<p>}</p>\n<p>tasks.getByPath(:build).dependsOn installGitHooks</p>\n<p>这个任务会判断系统的类型，并拷贝相应的脚本文件到 .git/hooks 目录下。这样当执行\nshell\n./gradlew installGitHooks</p>\n<p>命令时就会安装 Git 钩子。注意这里还指定 build 任务依赖 installGitHooks 任务，于是即使执行 ./gradlew build 也会触发自动安装 Git 钩子。</p>\n<p><a name=Te6zg></a></p>\n<h2>CI/CD</h2>\n<p>当然，在提交前运行 Git 钩子确保测试通过是很好的实践，但是不排除仍然可以绕过，以至于没有测试就推送了代码到仓库。为了避免将不工作的代码部署到线上（这里开发环境也属于线上，<a href=\"https://github.com/Jeff-Tian/egg-error-display#%E7%BA%BF%E4%B8%8A--%E7%94%9F%E4%BA%A7\">线上不单指生产环境</a>），那么有必要在 CI/CD 环节也加上运行测试步骤。如果使用 GitHub Actions，你可以写一个如下的 .github/workflows/gradle.yml 文件，注意，下面的示例还在 Github Action 里集成了 Sonar 扫描步骤：</p>\n<p>yaml\nname: Java CI with Gradle</p>\n<p>on:\npush:\nbranches: [ master ]\npull_request:\nbranches: [ master ]</p>\n<p>jobs:</p>\n<p>sonar-build:\nname: Build\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v2\nwith:\nfetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n- name: Set up JDK 11\nuses: actions/setup-java@v1\nwith:\njava-version: 11\n- name: Cache SonarCloud packages\nuses: actions/cache@v1\nwith:\npath: ~/.sonar/cache\nkey: ${{ runner.os }}-sonar\nrestore-keys: ${{ runner.os }}-sonar\n- name: Cache Gradle packages\nuses: actions/cache@v1\nwith:\npath: ~/.gradle/caches\nkey: ${{ runner.os }}-gradle-${{ hashFiles(**/*.gradle) }}\nrestore-keys: ${{ runner.os }}-gradle\n- name: Build and analyze\nenv:\nGITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any\nSONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\nrun: ./gradlew build sonarqube --info</p>\n<p>build:</p>\n<pre><code>runs-on: ubuntu-latest\n\nsteps:\n- uses: actions/checkout@v2\n- name: Set up JDK 11\n  uses: actions/setup-java@v2\n  with:\n    java-version: 11\n    distribution: adopt\n- name: Grant execute permission for gradlew\n  run: chmod +x gradlew\n- name: Build with Gradle\n  run: ./gradlew build\n- name: Test with Gradle\n  run: ./gradlew test\n</code></pre>\n<p>这样你就可以在提交历史里查看每次提交的测试结果和代码扫描结果了：<br /><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1623153288082-cb73eb59-104c-4fd1-8136-932886a2faf5.png#clientId=u91a6ec18-68c9-4&#x26;from=paste&#x26;height=708&#x26;id=ubfc92f75&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=708&#x26;originWidth=1602&#x26;originalType=binary%E2%88%B6=1&#x26;size=169430&#x26;status=done&#x26;style=none&#x26;taskId=u57b95a4c-fd61-46aa-9534-e962ca56ef7&#x26;width=1602\" alt=\"image.png\"></p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"Made with Stackbit.","url":"https://www.stackbit.com","style":"link","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}