{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/posts/how-to-get-logs-from-all-pod-of-a-service-in-a-cluster-30mf/",
    "result": {"data":{"sitePage":null},"pageContext":{"base":"","frontmatter":{"canonical_url":"https://dev.to/jefftian/how-to-get-logs-from-all-pod-of-a-service-in-a-cluster-30mf","comments_count":0,"date":"2021-02-10T02:38:18Z","excerpt":"Background   You deployed your app or service to a kubernetes cluster and with multiple inst...","positive_reactions_count":6,"stackbit_url_path":"/posts/how-to-get-logs-from-all-pod-of-a-service-in-a-cluster-30mf","tags":["kubernetes","pod","service","log"],"template":"post","title":"How to get logs from all pods of a service in a cluster?"},"html":"<h2>\n  <a name=\"background\" href=\"#background\" class=\"anchor\">\n  </a>\n  Background\n</h2>\n\n<p>You deployed your app or service to a kubernetes cluster and with multiple instances, and you want to quickly search some logs by keyword. But the service is running on multiple instances in the cluster, so we need a way to gather the relevant logs from all instances instead of pod by pod.</p>\n\n<h2>\n  <a name=\"fake-solutions\" href=\"#fake-solutions\" class=\"anchor\">\n  </a>\n  Fake \"Solutions\"\n</h2>\n\n<p>By googling you might get some answers like<br>\n<br>\n </p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>kubectl logs service/your-service-name | grep \"xxx\"\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n<p>But this command is not you want, because it just search the log from one pod among the multiple instances. So if you get empty result it doesn't mean there were no relevant logs.</p>\n\n<p>Or someone encourage you execute the following:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>kubectl logs -l app=your-app-name | grep \"xxx\"\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>This might or might not work, it depends on how the app name was defined in the <code>deployment</code> file, if the app names are different across the instances, because for example, an unique suffix will be appended to the common readable name for each pod. In this case you will never get any logs by the previous command.</p>\n\n<h2>\n  <a name=\"better-way\" href=\"#better-way\" class=\"anchor\">\n  </a>\n  Better way\n</h2>\n\n<p>If your deployment file gives unique names to each instance, then you need to first get which labels are fixed across different instances. For example, you can randomly choose a pod, and execute:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>kubectl get pod/your-pod -o template --template='{{.metadata.labels}}'\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>This command will give you result similar to<br>\n<br>\n </p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>map[branch:develop namespace:jeff-tian pod-template-hash:54ff684c58 role:cool-app run:cool-app update-timestamp:1608695126059]\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n<p>From the result we can see that the role is fixed, so we can get the logs in the following way:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>kubectl logs --selector role=cool-app | grep \"xxx\"\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"even-better-way\" href=\"#even-better-way\" class=\"anchor\">\n  </a>\n  Even better way\n</h2>\n\n<p>Send logs to Elasticsearch, and query the logs through Kibana. But this way requires the deployment and integration with ELK, and if you send the logs in real time (for example, using pinojs/pino-elasticsearch), then there is no log latency, only need to change a few application code. If you don't want to change the code, then you can use, filebeats for example, to gather the logs, but in this way you need to solve the log latency challenge. </p>\n\n<p>Comparing to get the logs by the command line, ELK way is obvious more powerful yet need more work to do, which worth a dedicate post to share it in the future.</p>\n\n","menus":{},"pages":[{"base":"","frontmatter":{"canonical_url":"https://dev.to/jefftian/use-typescript-to-make-ddd-come-true-4ff0","comments_count":0,"date":"2021-07-22T11:54:37Z","excerpt":"DDD   Domain Driven Design is popular and even became a de facto standard for enterprise...","positive_reactions_count":12,"stackbit_url_path":"/posts/use-typescript-to-make-ddd-come-true-4ff0","tags":["typescript","tplant","ddd","uml"],"template":"post","title":"Use TypeScript to make DDD come true"},"html":"<h2>\n  <a name=\"ddd\" href=\"#ddd\">\n  </a>\n  DDD\n</h2>\n\n<p>Domain Driven Design is popular and even became a de facto standard for enterprise technology team, however, it's only showcases, not the real implementation. How many times that you see the fancy design diagrams and at them same the poor code? </p>\n\n<p>Many people prefers design first, what implies that code is the implementation, and only the slide shows are design. But actually, code is design.</p>\n\n<h2>\n  <a name=\"code-design-model-documents\" href=\"#code-design-model-documents\">\n  </a>\n  Code = Design = Model = Documents\n</h2>\n\n<p>If not the case, then everytime you change the code you need to update the UML class diagrams and database E-R design documents. And eventually these kind of documents becomes unreliable gradually because you can't make sure that they are updated in time.</p>\n\n<p>In fact, code is more suitable for expressing the designs, and source code is a document indeed, can be used to describe the current product's design decisions perfectly.</p>\n\n<p>If developer created a domain model by code which is consistent with what in a domain expert's brain, then the source code is the most efficient, realtime model no doubtedly.</p>\n\n<p>The limit of the equation of <code>Code = Deisgn = Model = Documents</code> is whether the domain expert can read the code. So the easy to learn, expressive and intuitive programming language will have strong benefits in the process of creating domain models.</p>\n\n<h2>\n  <a name=\"domain-modelling\" href=\"#domain-modelling\">\n  </a>\n  Domain Modelling\n</h2>\n\n<p>Domain modelling is the most important part in DDD for developers as it requires developers have good abstraction, and it differs from traditional database modelling, and need developers to map the domain knowledge into the code models through the most efficient programming technic.</p>\n\n<p>In the long run, the object oriented language is the first choice of domain modelling, some OO skills can be used to do the domain model abstraction. In the contrary, the functional programming langauges are typically thought to be suitable only for data processing, scientific computing, etc.</p>\n\n<h2>\n  <a name=\"typescript\" href=\"#typescript\">\n  </a>\n  TypeScript\n</h2>\n\n<p>But this article shows that TypeScript, which has many functional programming features (<br>\nTypeScript's type system fully meets the functional programming requirements), can be used to do the domain modelling, and thanks to its type system and related tool chains, TypeScript should be considered as the best language to make DDD landing.</p>\n<h2>\n  <a name=\"typescripts-type-system\" href=\"#typescripts-type-system\">\n  </a>\n  TypeScript's type system\n</h2>\n\n<p>Comparing to OO, you only need to know a few grammer and it's enough to start domain modelling, so in terms of simplicity, algebraic data type is more suitable for domain modelling so as to make the domain models be documents.</p>\n<h2>\n  <a name=\"type\" href=\"#type\">\n  </a>\n  Type\n</h2>\n\n<p>All kinds of programming languages provide primitive types by design, such as <code>string</code>, <code>bool</code>, <code>number</code>, etc.</p>\n\n<p>In TypeScript, you can use the keyword <code>type</code> to compose larger types:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">Name</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">firstName</span><span class=\"p\">:</span> <span class=\"kr\">string</span>\n  <span class=\"na\">middleName</span><span class=\"p\">:</span> <span class=\"kr\">string</span>\n  <span class=\"na\">lastName</span><span class=\"p\">:</span> <span class=\"kr\">string</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>The usage of the above is obviouse, and besides this kind of usage, the keyword <code>type</code> has other usages, which is not a trivial feature. It can help you record the domain knowledge into domain models, for example:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">const</span> <span class=\"nx\">timeToFly</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>you can not guess the domain knowledge at first glance at the above code. How to make sure what the 10 means? Look up in a document? No, you need to tell yourself that code is document, so you improve your code as follows:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">Second</span> <span class=\"o\">=</span> <span class=\"kr\">number</span>\n<span class=\"kd\">const</span> <span class=\"nx\">timeToFly</span><span class=\"p\">:</span> <span class=\"nx\">Second</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"type-or\" href=\"#type-or\">\n  </a>\n  Type Or\n</h2>\n\n<p>In TypeScript, they are called as Union Types, which can be built by the symbol <code>|</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">Pet</span> <span class=\"o\">=</span> <span class=\"nx\">Fish</span> <span class=\"o\">|</span> <span class=\"nx\">Bird</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>So <code>Pet</code> is in type <code>Fish</code> or <code>Bird</code>. In general, functional programming languages have strong pattern match capability to process this kind of type. But the sad thing is TypeScript has limited pattern match capability so you can often see some string literals present in the types to distinguish different types.</p>\n\n<h2>\n  <a name=\"type-and\" href=\"#type-and\">\n  </a>\n  Type And\n</h2>\n\n<p>In TypeScript, they are called as Intersection Types, which can be built by the symbol <code>&amp;</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">ABC</span> <span class=\"o\">=</span> <span class=\"nx\">A</span> <span class=\"o\">&amp;</span> <span class=\"nx\">B</span> <span class=\"o\">&amp;</span> <span class=\"nx\">C</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>The above code tries to say that type ABC contains all A, B and C's properties.</p>\n\n<h2>\n  <a name=\"define-function-types\" href=\"#define-function-types\">\n  </a>\n  Define Function Types\n</h2>\n\n<p>In TypeScript, there were no differences between function and other types, so you can define functions by using the keyword <code>type</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">Add</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"kr\">number</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>The above code shows that <code>Add</code> is a function who accepts 2 numbers as arguments and returns a number.</p>\n\n<h2>\n  <a name=\"using-code-to-share-domain-knowledge\" href=\"#using-code-to-share-domain-knowledge\">\n  </a>\n  Using code to share domain knowledge\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">CreditCard</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">cardNo</span><span class=\"p\">:</span> <span class=\"kr\">string</span>\n  <span class=\"na\">firstName</span><span class=\"p\">:</span> <span class=\"kr\">string</span>\n  <span class=\"na\">middleName</span><span class=\"p\">:</span> <span class=\"kr\">string</span>\n  <span class=\"na\">lastName</span><span class=\"p\">:</span> <span class=\"kr\">string</span>\n  <span class=\"na\">contactEmail</span><span class=\"p\">:</span> <span class=\"nx\">Email</span>\n  <span class=\"na\">contactPhone</span><span class=\"p\">:</span> <span class=\"nx\">Phone</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Notice that we can easily write the above code by just having the knowledge showed previously, to describe the <code>CreditCard</code> payment method. Also please notice we don't use <code>class</code> here.</p>\n\n<p>But is it a reliable domain model? If not, where is the problem?</p>\n\n<p>The most serious problem of the above code is that it didn't record the domain knowledge which should be owned by it inside of it. Let me ask some questions:</p>\n\n<p>Question: can <code>middle name</code> be empty?<br>\nAnswer 1: Not sure, need to check document.<br>\nAnswer 2: Maybe? <code>middle name</code> can be null.</p>\n<h2>\n  <a name=\"modelling-for-the-nullable-type\" href=\"#modelling-for-the-nullable-type\">\n  </a>\n  Modelling for the nullable type\n</h2>\n\n<p>In functional programming languages, the nullable types can be defined as Optional. Although null is valid in TypeScript (Note: we can enable <code>strictNullChecks</code> to enforece the null check), but in functional programming, you can only use Optional type to express nullable type.</p>\n\n<p>If the domain expert tells you that <code>middle name</code> can exists, or be empty. Plese notice the word \"or\", indicate that we can use Union Type to model for the nullable type:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">Optional</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">T</span> <span class=\"o\">|</span> <span class=\"kc\">null</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>A simple Optional is just a Type Or. The improved code looks as follows:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">CreditCard</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">cardNo</span><span class=\"p\">:</span> <span class=\"kr\">string</span>\n  <span class=\"na\">firstName</span><span class=\"p\">:</span> <span class=\"kr\">string</span>\n  <span class=\"na\">middleName</span><span class=\"p\">:</span> <span class=\"nx\">Option</span><span class=\"o\">&lt;</span><span class=\"kr\">string</span><span class=\"o\">&gt;</span>\n  <span class=\"na\">lastName</span><span class=\"p\">:</span> <span class=\"kr\">string</span>\n  <span class=\"na\">contactEmail</span><span class=\"p\">:</span> <span class=\"nx\">Email</span>\n  <span class=\"na\">contactPhone</span><span class=\"p\">:</span> <span class=\"nx\">Phone</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"avoid-primitive-obsession\" href=\"#avoid-primitive-obsession\">\n  </a>\n  Avoid Primitive Obsession\n</h2>\n\n<p>Question: Can we express <code>cardNo</code> with <code>string</code>? If so can it be any string? Is <code>firstName</code> an arbitrary length string? Obviously you can't answer these questions as this model doesn't contain relative domain knowledge.</p>\n\n<p>You may use <code>string</code> type for <code>cardNo</code> during programming, but in domain model, <code>string</code> can't express the domain knowledge of <code>cardNo</code>.</p>\n\n<p><code>cardNo</code> is a 19-length string starts with <code>200</code>, <code>name</code> is a string whose length is less than or equal to 50. As such, the domain information can be implemented by <code>type alias</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">CardNo</span> <span class=\"o\">=</span> <span class=\"kr\">string</span>\n<span class=\"kd\">type</span> <span class=\"nx\">Name50</span> <span class=\"o\">=</span> <span class=\"kr\">string</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>With the above types, you now have chance to include the <code>cardNo</code> business rules inside domain models by defining function.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">GetCardNo</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">cardNo</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">CardNo</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>If a user typed in a string with 20 length, then what will the function <code>GetCardNo</code> return? null? or exception thrown? Actually functionaly programming has more elegant way such as Either Monad or Railway oriented programming to handle errors. At least we can present the function's signature by Optional:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">GetCardNo</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">cardNo</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Optional</span><span class=\"o\">&lt;</span><span class=\"nx\">CardNo</span><span class=\"o\">&gt;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>The function expresses the validation process clearly, if you user typed in a string, then returns a CardNo type or empty.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">CreditCard</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">cardNo</span><span class=\"p\">:</span> <span class=\"nx\">Optional</span><span class=\"o\">&lt;</span><span class=\"nx\">CardNo</span><span class=\"o\">&gt;</span>\n  <span class=\"na\">firstName</span><span class=\"p\">:</span> <span class=\"nx\">Name50</span>\n  <span class=\"na\">middleName</span><span class=\"p\">:</span> <span class=\"nx\">Optional</span><span class=\"o\">&lt;</span><span class=\"kr\">string</span><span class=\"o\">&gt;</span>\n  <span class=\"na\">lastName</span><span class=\"p\">:</span> <span class=\"nx\">Name50</span>\n  <span class=\"na\">contactEmail</span><span class=\"p\">:</span> <span class=\"nx\">Email</span>\n  <span class=\"na\">contactPhone</span><span class=\"p\">:</span> <span class=\"nx\">Phone</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>So now the code is full of domain knowledge, and these types can be used as unit tests as well. For example, you'll never assign an email to contactPhone, as they are not string, so in turn they represent different domain knowledge.</p>\n\n<h2>\n  <a name=\"the-atomicity-and-composibility-of-the-domain-models\" href=\"#the-atomicity-and-composibility-of-the-domain-models\">\n  </a>\n  The Atomicity and Composibility of the domain models\n</h2>\n\n<p>There were 3 names in the above domain model, can they be changed separately? for example, change <code>middle name</code> only? If not how can we encapsulate the knowledge of atomicity change into the domain model?</p>\n\n<p>In fact we can easily extract <code>Name</code> and <code>Contact</code> types and compose them:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">Name</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">firstName</span><span class=\"p\">:</span> <span class=\"nx\">Name50</span>\n  <span class=\"na\">middleName</span><span class=\"p\">:</span> <span class=\"nx\">Option</span><span class=\"o\">&lt;</span><span class=\"kr\">string</span><span class=\"o\">&gt;</span>\n  <span class=\"na\">lastName</span><span class=\"p\">:</span> <span class=\"nx\">Name50</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">type</span> <span class=\"nx\">Contact</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">contactEmail</span><span class=\"p\">:</span> <span class=\"nx\">Email</span>\n  <span class=\"na\">contactPhone</span><span class=\"p\">:</span> <span class=\"nx\">Phone</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">type</span> <span class=\"nx\">CreditCard3</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">cardNo</span><span class=\"p\">:</span> <span class=\"nx\">Optional</span><span class=\"o\">&lt;</span><span class=\"nx\">CardNo</span><span class=\"o\">&gt;</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"nx\">Name</span>\n  <span class=\"na\">contact</span><span class=\"p\">:</span> <span class=\"nx\">Contact</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"make-the-error-state-cant-be-present\" href=\"#make-the-error-state-cant-be-present\">\n  </a>\n  Make the error state can't be present\n</h2>\n\n<p>There is an important principle in domain modelling, which can be understood as: The domain models you built should have as many static validations and constraints as possible to make error occurs in compilation time instead of run time, so as to avoid the chance for mistakes. In fact all the domain modellings are following this principle, for example, the Email type and Phone type in the above code. Why not use string? Because string is lakcing of domain knowledges, which gives developers chances to make mistakes.</p>\n\n<p>Let's see another example. The above domain model has a contact type, which contains an Email and Phone properties. After payment done, system can utilize these 2 properties to send notification to user, so there is a rule generated: User must fill in Email or Phone to receive payment messages.</p>\n\n<p>First of all, the above domain models are not matching this business rule, because both Email and Phone are non-nullable type, which means these 2 properties are both required.</p>\n\n<p>Can we change both of them to be Optional?<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">Contact</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">contactEmail</span><span class=\"p\">:</span> <span class=\"nx\">Option</span><span class=\"o\">&lt;</span><span class=\"nx\">Email</span><span class=\"o\">&gt;</span>\n  <span class=\"na\">contactPhone</span><span class=\"p\">:</span> <span class=\"nx\">Option</span><span class=\"o\">&lt;</span><span class=\"nx\">Phone</span><span class=\"o\">&gt;</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Obviousely we can't do this, as it violets the principle of Make illegal state unrepresentable, so gives chances for coding mistakes. Your domain model represents an illegal state, that both Email and Phone can be empty. You may argue that my xxService will do the validation, to make sure they'll never be both empty. Sorry, we hope our domain model can encapsulate this domain knowledge. For xxService, it's unrelated to domain model. So can we express this rule in the modle model or not? The answer is yes! Because there is a \"or\" in the rule, so it implies that we can use the type Or (union type) to express this relationship:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">OnlyContactEmail</span> <span class=\"o\">=</span> <span class=\"nx\">Email</span> \n<span class=\"kd\">type</span> <span class=\"nx\">OnlyContactPhone</span> <span class=\"o\">=</span> <span class=\"nx\">Phone</span>\n<span class=\"kd\">type</span> <span class=\"nx\">BothContactEmailAndPhone</span> <span class=\"o\">=</span> <span class=\"nx\">Email</span> <span class=\"o\">&amp;</span> <span class=\"nx\">Phone</span>\n<span class=\"kd\">type</span> <span class=\"nx\">Contact</span> <span class=\"o\">=</span> \n  <span class=\"o\">|</span> <span class=\"nx\">OnlyContactEmail</span>\n  <span class=\"o\">|</span> <span class=\"nx\">OnlyContactPhone</span>\n  <span class=\"o\">|</span> <span class=\"nx\">BothContactEmailAndPhone</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"conclusion\" href=\"#conclusion\">\n  </a>\n  Conclusion\n</h2>\n\n<p>By using TypeScript to guide the domain modelling, we can avoid classes and sub classes, let alone the keywords <code>abstract</code> and <code>bean</code>, etc.</p>\n\n<p>To measure how good or how bad a domain model is, we need to judge</p>\n\n<ul>\n<li>is the domain model contains as many domain knowledges as possible, can it map the domain models inside domain experts' brains?</li>\n<li>Can domain model itself be the documents, so everyone can share and communicate with it?</li>\n</ul>\n\n<p>At the mean time, a framework should have as less jargons as possible. For example if you created a domain model class named <code>AbstractContactBase</code>, you increased the complexity of the system without any help on domain models sharing.</p>\n\n<h2>\n  <a name=\"bonus\" href=\"#bonus\">\n  </a>\n  Bonus\n</h2>\n\n<p>If you use TypeScript, not only you can build a rich model models, but also you can utilize some tools to generate UMLs from the code. So you can birdview the project's domain models very quickly!</p>\n\n<h2>\n  <a name=\"tplant\" href=\"#tplant\">\n  </a>\n  tplant\n</h2>\n\n<p>tplant is that kind of tool which I participated in it.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--IAzP1fuZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9okp5nazpqfhv8tbnnr2.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--IAzP1fuZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9okp5nazpqfhv8tbnnr2.jpg\" alt=\"tplant in github\" loading=\"lazy\"></a></p>\n\n<h2>\n  <a name=\"screen-recording-of-usage\" href=\"#screen-recording-of-usage\">\n  </a>\n  Screen recording of usage\n</h2>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--jsmLgI6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/849de7pmnompjdxc2lt6.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--jsmLgI6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/849de7pmnompjdxc2lt6.gif\" alt=\"Screen recording of using tplant\" loading=\"lazy\"></a></p>\n\n<h2>\n  <a name=\"text-version-of-usage\" href=\"#text-version-of-usage\">\n  </a>\n  Text version of usage\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>npm <span class=\"nb\">install</span> <span class=\"nt\">--global</span> tplant\n<span class=\"nb\">cd </span>your-typescript-project-folder\ntplant <span class=\"nt\">--input</span> src/<span class=\"k\">**</span>/<span class=\"k\">*</span>.ts <span class=\"nt\">--output</span> output.svg\nopen output.svg\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n","menus":{},"pages":[],"relativeDir":"","relativePath":"","site":{},"url":"/posts/use-typescript-to-make-ddd-come-true-4ff0"},{"base":"","frontmatter":{"canonical_url":"https://dev.to/jefftian/functional-style-programming-is-awesome-isomorphic-example-4b9p","comments_count":2,"date":"2021-03-08T05:23:27Z","excerpt":"This post will present a look and feel about functional style programming, gives you a glance about...","positive_reactions_count":17,"stackbit_url_path":"/posts/functional-style-programming-is-awesome-isomorphic-example-4b9p","tags":["functional","programming","javascript"],"template":"post","title":"Functional style programming is awesome (isomorphic example)"},"html":"<p>This post will present a look and feel about functional style programming, gives you a glance about what it would look like if we wrote programs in a functional programming way.</p>\n\n<p>It's not a real strict functional programming guide, it just shows how interesting yet powerful if we handle problems in a functional programming mind.</p>\n\n<h2>\n  <a name=\"problem\" href=\"#problem\">\n  </a>\n  Problem\n</h2>\n\n<p>It's quite common challenge to ask you <a href=\"https://leetcode.com/problems/isomorphic-strings/description/\">implement an algorithm to detect if 2 strings are isomorphic</a> during a programming job interview, there might be many answers on it. Let's do it again.</p>\n\n<h2>\n  <a name=\"tools\" href=\"#tools\">\n  </a>\n  Tools\n</h2>\n\n<ul>\n<li>A browser. So we can write pure JavaScript to implement it by pressing F12 with a running brower at hand.</li>\n</ul>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--E-CQer-N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tb9j3a9ot1sxqnrkgug.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--E-CQer-N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tb9j3a9ot1sxqnrkgug.png\" alt=\"image\" loading=\"lazy\"></a></p>\n\n<p>By analyzing the requirement, we can see actually the term <code>isomorphic</code> reflects the requirement quite well, which means having the same form, in other words, the forms (or structures) in a way are the same(equal). So we can just write some code to express the meanings:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">isomorphic</span> <span class=\"o\">=</span> <span class=\"nx\">equalBy</span><span class=\"p\">(</span><span class=\"nx\">structure</span><span class=\"p\">)</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>So far we have the signature of the function <code>equalBy</code>, let's implement it:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">equalBy</span> <span class=\"o\">=</span> <span class=\"nx\">fn</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">fn</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"nx\">fn</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">)</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>It's natural and self expressed.</p>\n\n<p>Now we take a closer look into <code>isomorphic</code>, we found it cares only the structure of the string, and doesn't give a shit to the detail characters in it. So how to we express the form (or structure) of the string?</p>\n\n<p>By examining the examples given in the requirement we come up with an idea to express the structure of a string by the character indices in the string, which can be expressed by numbers so it abstracts from the detail characters. So we write the following code:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">structure</span> <span class=\"o\">=</span> <span class=\"nx\">s</span> <span class=\"o\">=&gt;</span> <span class=\"p\">[...</span><span class=\"nx\">s</span><span class=\"p\">].</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">c</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">s</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">)).</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">-</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>This line of code is a little bit long, let's test it and document it:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">assert</span><span class=\"p\">(</span><span class=\"nx\">structure</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">aabbcc</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">002244</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">A structure of a string can be expressed through the indices of the characters in it</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>By far we have both <code>equalBy</code> and <code>structure</code>, so <code>isomorphic</code> is ready to run! We can write some tests to show it:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">assert</span><span class=\"p\">(</span><span class=\"nx\">isomorphic</span><span class=\"p\">(</span><span class=\"dl\">''</span><span class=\"p\">,</span> <span class=\"dl\">''</span><span class=\"p\">),</span> <span class=\"dl\">'</span><span class=\"s1\">empty strings are isomorphic</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">assert</span><span class=\"p\">(</span><span class=\"nx\">isomorphic</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">aabbcc</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">aabbcc</span><span class=\"dl\">'</span><span class=\"p\">),</span> <span class=\"dl\">'</span><span class=\"s1\">strings are always isomorphic with themselves</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">assert</span><span class=\"p\">(</span><span class=\"nx\">isomorphic</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">aabbcc</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">zzxxyy</span><span class=\"dl\">'</span><span class=\"p\">),</span> <span class=\"dl\">'</span><span class=\"s1\">if the characters have the same indices sequence, then the strings composed by them are isomorphic</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isomorphic</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">aabacc</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">xxyyzz</span><span class=\"dl\">'</span><span class=\"p\">),</span> <span class=\"dl\">'</span><span class=\"s1\">even if the character indices are the same, however the sequences are not all the same, then the 2 strings composed by them are NOT isomorphic</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isomorphic</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">aaabbcc</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">xxyyyzz</span><span class=\"dl\">'</span><span class=\"p\">),</span> <span class=\"dl\">'</span><span class=\"s1\">if any character indices are different, then the strings composed by them are NOT isomorphic</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isomorphic</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">abcdefghijk</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">abcdefghijba</span><span class=\"dl\">'</span><span class=\"p\">),</span> <span class=\"dl\">'</span><span class=\"s1\">if the lengths are different, then the strings are NOT isomorphic</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We ran the tests, all pass!</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--NwiBelYH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmq4ulxbek2thg4vir97.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--NwiBelYH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmq4ulxbek2thg4vir97.png\" alt=\"All tests pass\" loading=\"lazy\"></a></p>\n\n<h2>\n  <a name=\"summary\" href=\"#summary\">\n  </a>\n  Summary\n</h2>\n\n<p>So the implementation code for <code>isomorphic</code> is only 3 lines in total:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">equalBy</span> <span class=\"o\">=</span> <span class=\"nx\">fn</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">fn</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"nx\">fn</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">)</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">structure</span> <span class=\"o\">=</span> <span class=\"nx\">s</span> <span class=\"o\">=&gt;</span> <span class=\"p\">[...</span><span class=\"nx\">s</span><span class=\"p\">].</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">c</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">s</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">)).</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">-</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">isomorphic</span> <span class=\"o\">=</span> <span class=\"nx\">equalBy</span><span class=\"p\">(</span><span class=\"nx\">structure</span><span class=\"p\">)</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>You can see it's a <code>pointless</code> way of writing code, besides cool, it solves problem elegantly even to a simple extend!</p>\n\n<p>You can try on your browser or check it in <a href=\"https://leetcode.com/submissions/detail/530009145/\">leetcode</a> too: <del><a href=\"https://leetcode.com/submissions/detail/465004270/\">https://leetcode.com/submissions/detail/465004270/</a></del> <a href=\"https://leetcode.com/submissions/detail/530009145/\">https://leetcode.com/submissions/detail/530009145/</a></p>\n\n","menus":{},"pages":[],"relativeDir":"","relativePath":"","site":{},"url":"/posts/functional-style-programming-is-awesome-isomorphic-example-4b9p"},{"base":"","frontmatter":{"canonical_url":"https://dev.to/jefftian/how-to-get-logs-from-all-pod-of-a-service-in-a-cluster-30mf","comments_count":0,"date":"2021-02-10T02:38:18Z","excerpt":"Background   You deployed your app or service to a kubernetes cluster and with multiple inst...","positive_reactions_count":6,"stackbit_url_path":"/posts/how-to-get-logs-from-all-pod-of-a-service-in-a-cluster-30mf","tags":["kubernetes","pod","service","log"],"template":"post","title":"How to get logs from all pods of a service in a cluster?"},"html":"<h2>\n  <a name=\"background\" href=\"#background\" class=\"anchor\">\n  </a>\n  Background\n</h2>\n\n<p>You deployed your app or service to a kubernetes cluster and with multiple instances, and you want to quickly search some logs by keyword. But the service is running on multiple instances in the cluster, so we need a way to gather the relevant logs from all instances instead of pod by pod.</p>\n\n<h2>\n  <a name=\"fake-solutions\" href=\"#fake-solutions\" class=\"anchor\">\n  </a>\n  Fake \"Solutions\"\n</h2>\n\n<p>By googling you might get some answers like<br>\n<br>\n </p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>kubectl logs service/your-service-name | grep \"xxx\"\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n<p>But this command is not you want, because it just search the log from one pod among the multiple instances. So if you get empty result it doesn't mean there were no relevant logs.</p>\n\n<p>Or someone encourage you execute the following:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>kubectl logs -l app=your-app-name | grep \"xxx\"\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>This might or might not work, it depends on how the app name was defined in the <code>deployment</code> file, if the app names are different across the instances, because for example, an unique suffix will be appended to the common readable name for each pod. In this case you will never get any logs by the previous command.</p>\n\n<h2>\n  <a name=\"better-way\" href=\"#better-way\" class=\"anchor\">\n  </a>\n  Better way\n</h2>\n\n<p>If your deployment file gives unique names to each instance, then you need to first get which labels are fixed across different instances. For example, you can randomly choose a pod, and execute:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>kubectl get pod/your-pod -o template --template='{{.metadata.labels}}'\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>This command will give you result similar to<br>\n<br>\n </p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>map[branch:develop namespace:jeff-tian pod-template-hash:54ff684c58 role:cool-app run:cool-app update-timestamp:1608695126059]\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n<p>From the result we can see that the role is fixed, so we can get the logs in the following way:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>kubectl logs --selector role=cool-app | grep \"xxx\"\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"even-better-way\" href=\"#even-better-way\" class=\"anchor\">\n  </a>\n  Even better way\n</h2>\n\n<p>Send logs to Elasticsearch, and query the logs through Kibana. But this way requires the deployment and integration with ELK, and if you send the logs in real time (for example, using pinojs/pino-elasticsearch), then there is no log latency, only need to change a few application code. If you don't want to change the code, then you can use, filebeats for example, to gather the logs, but in this way you need to solve the log latency challenge. </p>\n\n<p>Comparing to get the logs by the command line, ELK way is obvious more powerful yet need more work to do, which worth a dedicate post to share it in the future.</p>\n\n","menus":{},"pages":[],"relativeDir":"","relativePath":"","site":{},"url":"/posts/how-to-get-logs-from-all-pod-of-a-service-in-a-cluster-30mf"},{"base":"","frontmatter":{"canonical_url":"https://dev.to/jefftian/inversifyjs-2de0","comments_count":2,"date":"2020-12-31T12:12:00Z","excerpt":"你的项目中有用到 JavaScript 吗？如果有，那么依赖注入是怎么实现的？强烈推荐使用 InversifyJS！  2020年最后一天，工作效率可以说是非常高了。 早上买完域名（https://do...","positive_reactions_count":2,"stackbit_url_path":"/posts/inversifyjs-2de0","tags":["inversifyjs","ioc","container","di"],"template":"post","title":"InversifyJS 中文文档"},"html":"<p>你的项目中有用到 JavaScript 吗？如果有，那么依赖注入是怎么实现的？强烈推荐使用 <a href=\"https://doc.inversify.cloud/zh_cn\">InversifyJS</a>！</p>\n\n<p>2020年最后一天，工作效率可以说是非常高了。<br>\n早上买完<a href=\"https://doc.inversify.cloud/zh_cn\">域名</a>（<a href=\"https://doc.inversify.cloud/zh_cn\">https://doc.inversify.cloud/zh_cn</a> ），开始翻译 InversifyJS 文档，到下班时间终于翻译完成。加班部署上线，现在新鲜出炉的<a href=\"https://doc.inversify.cloud/zh_cn\">中文文档</a>来了！</p>\n\n<p>InversifyJS 小巧优雅又五脏俱全，可以说是一个相当棒的轮子了。如果用得爽，想自己造一个又不知道如何下手，那么：</p>\n\n<p>给你一个 Bonus：这篇文章手把手教你从零开始撸一个 Toy Inversify：<a href=\"https://jeff-tian.jiwai.win/posts/inversion-of-control-implementation-based-on-typescript-3fl6/\">https://jeff-tian.jiwai.win/posts/inversion-of-control-implementation-based-on-typescript-3fl6/</a> ，快来看一看吧！</p>\n\n","menus":{},"pages":[],"relativeDir":"","relativePath":"","site":{},"url":"/posts/inversifyjs-2de0"},{"base":"","frontmatter":{"canonical_url":"https://dev.to/jefftian/connect-to-external-mysql-server-via-phpmyadmin-188l","comments_count":0,"date":"2020-12-21T07:43:20Z","excerpt":"Background   After I deployed my phpMyAdmin to my kubernetes cluster and ran it, I was aston...","positive_reactions_count":0,"stackbit_url_path":"/posts/connect-to-external-mysql-server-via-phpmyadmin-188l","tags":["phpmyadmin","pma","host"],"template":"post","title":"Connect to external mysql server via phpMyAdmin"},"html":"<h2>\n  <a name=\"background\" href=\"#background\" class=\"anchor\">\n  </a>\n  Background\n</h2>\n\n<p>After I deployed my phpMyAdmin to my kubernetes cluster and ran it, I was astonished by the UI, which only allows you type username and password, there is no way to input my mysql server's host!</p>\n\n<h2>\n  <a name=\"analysis\" href=\"#analysis\" class=\"anchor\">\n  </a>\n  Analysis\n</h2>\n\n<p>Seems phpMyAdmin by default only allows you connect to mysql server deployed in the same machine with the phpMyAdmin itself, in terms of this I would say I love adminer more!</p>\n\n<h2>\n  <a name=\"solution\" href=\"#solution\" class=\"anchor\">\n  </a>\n  Solution\n</h2>\n\n<p>You need to set <code>PMA_HOST</code> to your mysql server host before running the phpMyAdmin instance.</p>\n\n<p>So if you are deploying your phpMyAdmin to your kubernetes cluster, you should edit the <code>deployment.yaml</code> as follows:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight yaml\"><code><span class=\"na\">apiVersion</span><span class=\"pi\">:</span> <span class=\"s\">apps/v1</span>\n<span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">Deployment</span>\n<span class=\"na\">metadata</span><span class=\"pi\">:</span>\n  <span class=\"na\">labels</span><span class=\"pi\">:</span>\n    <span class=\"na\">app</span><span class=\"pi\">:</span> <span class=\"s\">phpmyadmin</span>\n    <span class=\"na\">tier</span><span class=\"pi\">:</span> <span class=\"s\">backend</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">phpmyadmin</span>\n<span class=\"na\">spec</span><span class=\"pi\">:</span>\n  <span class=\"na\">minReadySeconds</span><span class=\"pi\">:</span> <span class=\"m\">5</span>\n  <span class=\"na\">selector</span><span class=\"pi\">:</span>\n    <span class=\"na\">matchLabels</span><span class=\"pi\">:</span>\n      <span class=\"na\">app</span><span class=\"pi\">:</span> <span class=\"s\">phpmyadmin</span>\n      <span class=\"na\">tier</span><span class=\"pi\">:</span> <span class=\"s\">backend</span>\n  <span class=\"na\">template</span><span class=\"pi\">:</span>\n    <span class=\"na\">metadata</span><span class=\"pi\">:</span>\n      <span class=\"na\">labels</span><span class=\"pi\">:</span>\n        <span class=\"na\">app</span><span class=\"pi\">:</span> <span class=\"s\">phpmyadmin</span>\n        <span class=\"na\">tier</span><span class=\"pi\">:</span> <span class=\"s\">backend</span>\n    <span class=\"na\">spec</span><span class=\"pi\">:</span>\n      <span class=\"na\">imagePullSecrets</span><span class=\"pi\">:</span>\n        <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">harbor-odp</span>\n      <span class=\"na\">containers</span><span class=\"pi\">:</span>\n        <span class=\"pi\">-</span> <span class=\"na\">image</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">phpmyadmin\"</span>\n          <span class=\"na\">env</span><span class=\"pi\">:</span>\n            <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">PMA_HOST</span>\n              <span class=\"na\">value</span><span class=\"pi\">:</span> <span class=\"s\">your-my-sql-db.yourhost.com.cn</span>\n          <span class=\"na\">imagePullPolicy</span><span class=\"pi\">:</span> <span class=\"s\">Always</span>\n          <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">phpmyadmin</span>\n          <span class=\"na\">ports</span><span class=\"pi\">:</span>\n            <span class=\"pi\">-</span> <span class=\"na\">containerPort</span><span class=\"pi\">:</span> <span class=\"m\">80</span>\n              <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">http</span>\n              <span class=\"na\">protocol</span><span class=\"pi\">:</span> <span class=\"s\">TCP</span>\n          <span class=\"na\">resources</span><span class=\"pi\">:</span>\n            <span class=\"na\">limits</span><span class=\"pi\">:</span>\n              <span class=\"na\">cpu</span><span class=\"pi\">:</span> <span class=\"s\">500m</span>\n              <span class=\"na\">memory</span><span class=\"pi\">:</span> <span class=\"s\">128Mi</span>\n            <span class=\"na\">requests</span><span class=\"pi\">:</span>\n              <span class=\"na\">cpu</span><span class=\"pi\">:</span> <span class=\"s\">250m</span>\n              <span class=\"na\">memory</span><span class=\"pi\">:</span> <span class=\"s\">64Mi</span>\n\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n","menus":{},"pages":[],"relativeDir":"","relativePath":"","site":{},"url":"/posts/connect-to-external-mysql-server-via-phpmyadmin-188l"},{"base":"","frontmatter":{"canonical_url":"https://dev.to/jefftian/solved-adb-install-successfully-but-can-t-open-the-app-on-huawei-phone-3kc6","comments_count":0,"date":"2020-12-07T10:15:44Z","excerpt":"Issue   You installed the apk successfully to your huawei phone via adb install:    adb inst...","positive_reactions_count":1,"stackbit_url_path":"/posts/solved-adb-install-successfully-but-can-t-open-the-app-on-huawei-phone-3kc6","tags":["adb","apk","huawei","android"],"template":"post","title":"[Solved] adb install successfully but can't open the app on Huawei phone"},"html":"<h2>\n  <a name=\"issue\" href=\"#issue\" class=\"anchor\">\n  </a>\n  Issue\n</h2>\n\n<p>You installed the apk successfully to your huawei phone via <code>adb install</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>adb install xxx.apk\nPerforming Streamed Install\nSuccess\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>But after the installation you can't open it as the open button is disabled, nor can you find or search it in your phone.</p>\n\n<h2>\n  <a name=\"analyse\" href=\"#analyse\" class=\"anchor\">\n  </a>\n  Analyse\n</h2>\n\n<p>There is a private space feature in huawei phone, and you turned it on.</p>\n\n<h2>\n  <a name=\"solution\" href=\"#solution\" class=\"anchor\">\n  </a>\n  Solution\n</h2>\n\n<p>Go to settings/privacy, you'll see the private space. Switch into that space and you can find the app.</p>\n\n<p>Or you can delete the private space totally to avoid this issue in the future.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--jJUtsonf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/szj617bxgx01uu86n2rj.jpeg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--jJUtsonf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/szj617bxgx01uu86n2rj.jpeg\" alt=\"Private Space\" loading=\"lazy\"></a></p>\n\n","menus":{},"pages":[],"relativeDir":"","relativePath":"","site":{},"url":"/posts/solved-adb-install-successfully-but-can-t-open-the-app-on-huawei-phone-3kc6"},{"base":"","frontmatter":{"canonical_url":"https://dev.to/jefftian/inversion-of-control-implementation-based-on-typescript-3fl6","comments_count":0,"date":"2020-11-30T11:02:34Z","excerpt":"IoC   According to wikipedia, the Inversion of Control, also as known as IoC, is a design pr...","positive_reactions_count":18,"stackbit_url_path":"/posts/inversion-of-control-implementation-based-on-typescript-3fl6","tags":["typescript","ioc","di"],"template":"post","title":"The Implementation of Inversion of Control based on TypeScript"},"html":"<h2>\n  <a name=\"ioc\" href=\"#ioc\" class=\"anchor\">\n  </a>\n  IoC\n</h2>\n\n<p>According to wikipedia, the Inversion of Control, also as known as IoC, is a design principal in Object Oriented Programming, which is used to decouple the code.</p>\n\n<p>In the traditional Object Oriented Programming, when a class depends on another class, then usually the other class's instance gets created inside that class. By doing so it leads to classes couple with each other, and the more complex the dependencies are, the more tight of the couplings, and consequently harder for modifications and unit testings for the tightly coupled code. The IoC are dedicatedly used for creating and searching the dependent objects by providing a container, and hand over the controlling of the dependent objects from inside the class to the container, by doing so the classes are being decoupled, and ensure that all classes are easy to be modified.</p>\n\n<h3>\n  <a name=\"coupling\" href=\"#coupling\" class=\"anchor\">\n  </a>\n  Coupling\n</h3>\n\n<p>What the hell is coupling? We can show it by a simple example. Say we have two classes, <code>A</code> and <code>B</code>, their dependency relationship is <code>A</code> depends on <code>B</code>: <code>A ⊥ B</code>. This is a common scenario in daily development, which can be implemented in a traditional way as the following:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// b.ts</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">B</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// a.ts</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">A</span> <span class=\"p\">{</span>\n  <span class=\"nl\">b</span><span class=\"p\">:</span> <span class=\"nx\">B</span><span class=\"p\">;</span>\n  <span class=\"kd\">constructor</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">B</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// main.ts</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">A</span><span class=\"p\">();</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>The above code looks good for now, but if we got a new requirement which requires the innermost <code>B</code> pass a parameter <code>p</code> in during the initialization:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// b.ts</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">B</span> <span class=\"p\">{</span>\n  <span class=\"nl\">p</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n  <span class=\"kd\">constructor</span> <span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">p</span> <span class=\"o\">=</span> <span class=\"nx\">p</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>After the modification, we got a new problem: since <code>B</code> is instantiated inside class <code>A</code>'s constructor, so we have to pass the <code>p</code> inside <code>A</code>'s constructor. Where is the <code>p</code> come from inside <code>A</code>? Obviously we can not hard code it, otherwise there is no need to add it as a parameter at the first place. So we have to add a parameter <code>p</code> for class <code>A</code>'s constructor, too, as following:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// a.ts</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">A</span> <span class=\"p\">{</span>\n  <span class=\"nl\">b</span><span class=\"p\">:</span> <span class=\"nx\">B</span><span class=\"p\">;</span>\n  <span class=\"kd\">constructor</span> <span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">B</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// main.ts</span>\n<span class=\"kd\">const</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">A</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">);</span> <span class=\"c1\">// =&gt; A {b: B {p: 10}}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>What's more tedious, after we've changed <code>A</code>, we found that <code>B</code>'s new parameter <code>p</code> can't be a <code>number</code> actually, it needs to be a <code>string</code>. So we have to change the type decoration to parameter <code>p</code> inside <code>A</code> again. Let's imagine what if there were more upper classes that depend on <code>A</code>? With the same approach we need to change all the upper classes in the same way! This is the very problem caused by coupling, we have to change all the files in the dependent links only for a simple parameter change in the innermost class. When the application's dependencies become more complex to an extend, it's easy to encounter a phenomenon that affects the whole body, which causes huge troubles for application's maintenance.</p>\n\n<h3>\n  <a name=\"decoupling\" href=\"#decoupling\" class=\"anchor\">\n  </a>\n  Decoupling\n</h3>\n\n<p>In fact, we can find, in the above example, that only <code>B</code> needs the parameter <code>p</code>, and <code>A</code> is using <code>p</code> merely for instantiate the dependent object and cares nothing about <code>p</code>. So we can consider moving the instantiation for dependent objects out of the class itself, for example, we can rewrite the above example as:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// b.ts</span>\n<span class=\"kd\">class</span> <span class=\"nx\">B</span> <span class=\"p\">{</span>\n  <span class=\"nl\">p</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n  <span class=\"kd\">constructor</span> <span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">p</span> <span class=\"o\">=</span> <span class=\"nx\">p</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// a.ts</span>\n<span class=\"kd\">class</span> <span class=\"nx\">A</span> <span class=\"p\">{</span>\n  <span class=\"k\">private</span> <span class=\"nx\">b</span><span class=\"p\">:</span> <span class=\"nx\">B</span><span class=\"p\">;</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">:</span> <span class=\"nx\">B</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// main.ts</span>\n<span class=\"kd\">const</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">B</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">A</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">);</span> <span class=\"c1\">// A =&gt; {b: B {p: 10}}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>In the above example, <code>A</code> is not accepting parameter <code>p</code>, instead, it accepts the dependent object, and doesn't care about where does the object get instantiated. This approach solved our previously problem in a effective way, now we only need to change <code>B</code> when we need to change the parameter <code>p</code>, without the need to modify <code>A</code>, so we decoupled the classes.</p>\n\n<h2>\n  <a name=\"containers\" href=\"#containers\" class=\"anchor\">\n  </a>\n  Containers\n</h2>\n\n<p>Even though we've implemented the decoupling, we need to instantiate all the classes by ourselves, and pass them by means of parameters in constructor. If exists a global container, and it <strong>pre-registered</strong> all the class definitions and initial parameters that we need, and every object has an unique key, then we can only tell the container its key when we need an object to <strong>get</strong> the instantiated object from the container directly. By doing so the developer won't need to care about how the objects get instantiated, neither pass them as constructor's parameters in the dependency links.</p>\n\n<p>In other words, our container must have two functions, <strong>registering the instances</strong> and <strong>get them</strong>. It's naturally to come up with <code>Map</code>, which can be used to implement a simple container:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// container.ts</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">Container</span> <span class=\"p\">{</span>\n  <span class=\"nx\">bindMap</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Map</span><span class=\"p\">();</span>\n\n  <span class=\"c1\">// Registering the instances</span>\n  <span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"nx\">identifier</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span> <span class=\"nx\">clazz</span><span class=\"p\">:</span> <span class=\"kr\">any</span><span class=\"p\">,</span> <span class=\"nx\">constructorArgs</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"kr\">any</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">bindMap</span><span class=\"p\">.</span><span class=\"kd\">set</span><span class=\"p\">(</span><span class=\"nx\">identifier</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">clazz</span><span class=\"p\">,</span> <span class=\"nx\">constructorArgs</span><span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// get the instances</span>\n  <span class=\"kd\">get</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nx\">identifier</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nx\">T</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">target</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">bindMap</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">identifier</span><span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">clazz</span><span class=\"p\">,</span> <span class=\"nx\">constructorArgs</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">target</span><span class=\"p\">;</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">inst</span> <span class=\"o\">=</span> <span class=\"nb\">Reflect</span><span class=\"p\">.</span><span class=\"nx\">construct</span><span class=\"p\">(</span><span class=\"nx\">clazz</span><span class=\"p\">,</span> <span class=\"nx\">constructorArgs</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Here we used <code>Reflect.construct</code>, whose behavior is kind of similar to operator <code>new</code>, which helps us instantiate the object. By means of container, we can eventually abandon passing the parameters and implement the decoupling, for example:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// b.ts</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">B</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">p</span> <span class=\"o\">=</span> <span class=\"nx\">p</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// a.ts</span>\n<span class=\"kd\">class</span> <span class=\"nx\">A</span> <span class=\"p\">{</span>\n  <span class=\"nl\">b</span><span class=\"p\">:</span> <span class=\"nx\">B</span><span class=\"p\">;</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"nx\">container</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">b</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// main.ts</span>\n<span class=\"kd\">const</span> <span class=\"nx\">container</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Container</span><span class=\"p\">();</span>\n<span class=\"nx\">container</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">a</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">A</span><span class=\"p\">);</span>\n<span class=\"nx\">container</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">b</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">B</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]);</span>\n\n<span class=\"c1\">// get a from container</span>\n<span class=\"kd\">const</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"nx\">container</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">a</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">);</span> <span class=\"c1\">// A =&gt; {b: B { p: 10}}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Actually till now we have basically implemented IoC, and decoupled classes based on container. But from the lines of code perspective, code looks no clearer than before, and in the contrary, the container initialization and classes registration make us feel tedious. If that part of code can be encapsulated into framework, and all the classes registration can be automatically wired up, in the same time all classes can get the dependent instances of the classes during the construction time without manually specify them inside constructor, then the developer's hands can be freed totally, and then only focus on the inner logic of the class. This is what DI(Dependency Injection) comes in handy.</p>\n\n<h2>\n  <a name=\"di\" href=\"#di\" class=\"anchor\">\n  </a>\n  DI\n</h2>\n\n<p>Many of us can't tell the difference between DI and IoC, so was I. IoC is only a principle, DI is a concrete implementation for IoC. Simply put, we can inject the dependencies to the caller, without the need for the caller to fetch explicitly. To implement DI, two issues need to be solved:</p>\n\n<ul>\n<li>The classes that need to be registered in the IoC container, they need to be able to register themselves automatically during program starts</li>\n<li>When instantiate the classes inside the IoC container, the dependent objects can be fetched directly without manually specifying them inside constructor</li>\n</ul>\n\n<p>Regarding the two problems there are different solutions, for example, the famous Java Spring needs developers define an XML file describing the dependency relationships, and then the framework do the instances' registration and dependency injections based on the XML file. But the XML based dependency management approach is too trivial, so Midway utilizes the decoration features provided by TypeScript, by decorating the meta data to identify the registration requirements and dependencies need to be injected, to implement the dependency injection.</p>\n\n<h3>\n  <a name=\"reflect-metadata\" href=\"#reflect-metadata\" class=\"anchor\">\n  </a>\n  Reflect Metadata\n</h3>\n\n<p>To use decoration to solve the above two problems, we need to know some basics about Reflect Metadata. Reflect Metadata is a proposal to ES7, mainly used to add and read the meta data during declaration phase, which was supported from TypeScript 1.5+.</p>\n\n<p>Meta data can be treated as descriptive information regarding to the classes or certain properties of classes, they don't affect class's behavior by nature, but you can get the predefined metadata to a class, and apply certain operations to the class based on the metadata.</p>\n\n<p>The usage of Reflect Metadata is rather simple, first of all you need to install the <code>reflect-metadata</code> library:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>npm i reflect-metadata <span class=\"nt\">--save</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>And then in your <code>tsconfig.json</code>, the <code>emitDecoratorMetadata</code> needs to be configured to <code>true</code>.</p>\n\n<p>And then we can define and get the meta data using <code>Reflect.defineMetadata</code> and <code>Reflect.getMetadata</code>, for example:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">import</span> <span class=\"dl\">'</span><span class=\"s1\">reflect-metadata</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">CLASS_KEY</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">ioc:key</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">ClassDecorator</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">:</span> <span class=\"kr\">any</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nb\">Reflect</span><span class=\"p\">.</span><span class=\"nx\">defineMetadata</span><span class=\"p\">(</span><span class=\"nx\">CLASS_KEY</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">metaData</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">metaData</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span> <span class=\"nx\">target</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">target</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">@</span><span class=\"nd\">ClassDecorator</span><span class=\"p\">()</span>\n<span class=\"kd\">class</span> <span class=\"nx\">D</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(){}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">Reflect</span><span class=\"p\">.</span><span class=\"nx\">getMetadata</span><span class=\"p\">(</span><span class=\"nx\">ClASS_KEY</span><span class=\"p\">,</span> <span class=\"nx\">D</span><span class=\"p\">));</span> <span class=\"c1\">// =&gt; {metaData: 'metaData'}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>With <code>Reflect</code>, we can tokenize any class, and apply special operations to the tokenized class. </p>\n\n<h3>\n  <a name=\"provider\" href=\"#provider\" class=\"anchor\">\n  </a>\n  Provider\n</h3>\n\n<p>Back to our initial problem, we need all classes get defined and parameters registration automatically during application starts, but not all classes need to be registered into the container, and we don't know what classes need to be registered, nor the initial parameters of them are like.</p>\n\n<p>We can introduce metadata to solve this issue, by appending some new special tokens to the class's metadata in the definition, we can identify them by scanning. With this bear in mind we implement a decorator to tokenize the classes need to be registered firstly, and name the decorator <code>Provider</code>, meaning it will be consumed by other classes as a provider.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// provider.ts</span>\n\n<span class=\"k\">import</span> <span class=\"dl\">'</span><span class=\"s1\">reflect-metadata</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">CLASS_KEY</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">ioc:tagged_class</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">Provider</span><span class=\"p\">(</span><span class=\"nx\">identifier</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span> <span class=\"nx\">args</span><span class=\"p\">?:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"kr\">any</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">:</span> <span class=\"kr\">any</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nb\">Reflect</span><span class=\"p\">.</span><span class=\"nx\">defineMetadata</span><span class=\"p\">(</span><span class=\"nx\">CLASS_KEY</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"nx\">identifier</span><span class=\"p\">,</span>\n      <span class=\"na\">args</span><span class=\"p\">:</span> <span class=\"nx\">args</span> <span class=\"o\">||</span> <span class=\"p\">[]</span>\n    <span class=\"p\">},</span> <span class=\"nx\">target</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nx\">target</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We can see there are <code>id</code> and <code>args</code> in the tokens, where <code>id</code> is the <code>key</code> used to register IoC container, and <code>args</code> are the needed parameters of instantiation. <code>Provider</code> can be used directly in a decoration fashion, as follow:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// b.ts</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">Provider</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">provider</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Provider</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">b</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">])</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">B</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">p</span> <span class=\"o\">=</span> <span class=\"nx\">p</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>With tokenization done, another issue surfaces: How do we get these definitions during application starts?</p>\n\n<p>An easy way is scan all the files when starts, get all the classes exported by those files and bind them according to the metadata. For the simplicity we assume there were no nested directories, then the implementation is as follows:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// load.ts</span>\n\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">fs</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">fs</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">CLASS_KEY</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./provider</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">load</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// The container is the global IoC container</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">list</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readdirSync</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">./</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">file</span> <span class=\"k\">of</span> <span class=\"nx\">list</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"sr\">/</span><span class=\"se\">\\.</span><span class=\"sr\">ts$/</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"nx\">file</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s2\">`./</span><span class=\"p\">${</span><span class=\"nx\">file</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">);</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">m</span> <span class=\"k\">in</span> <span class=\"nx\">exports</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"kr\">module</span> <span class=\"o\">=</span> <span class=\"nx\">exports</span><span class=\"p\">[</span><span class=\"nx\">m</span><span class=\"p\">];</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"kr\">module</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">function</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"kd\">const</span> <span class=\"nx\">metadata</span> <span class=\"o\">=</span> <span class=\"nb\">Reflect</span><span class=\"p\">.</span><span class=\"nx\">getMetadata</span><span class=\"p\">(</span><span class=\"nx\">CLASS_KEY</span><span class=\"p\">,</span> <span class=\"kr\">module</span><span class=\"p\">);</span>\n          <span class=\"c1\">// register</span>\n          <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">metadata</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">container</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"nx\">metadata</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"kr\">module</span><span class=\"p\">,</span> <span class=\"nx\">metadata</span><span class=\"p\">.</span><span class=\"nx\">args</span><span class=\"p\">);</span>\n          <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>So now, we can finish all the work of binding the decorated class by just running the <code>load</code> inside <code>main</code>. What worth noting is that the logic of <code>load</code> and <code>Container</code> are totally generic, they can be encapsulated in to a package and then a simplified IoC framework is in its baby shape.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">Container</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./container</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">load</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./load</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">container</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Container</span><span class=\"p\">();</span>\n<span class=\"nx\">load</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">);</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">a</span><span class=\"dl\">'</span><span class=\"p\">));</span> <span class=\"c1\">// A =&gt; {b: B {p: 10}}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"inject\" href=\"#inject\" class=\"anchor\">\n  </a>\n  Inject\n</h3>\n\n<p>With registration work done, we now check the 2nd issue mentioned above: How do we get all the dependent instances directly without explicitly pass them in the constructor. Actually the initiative is simple, since we have already put all required classes into the IoC container, so when we need some class we can iterate the properties of the class during fetching the class instance, by get the corresponding object and assign the value, then the dependency injection work is done.</p>\n\n<p>But another issue comes out, how do we tell which properties need to be injected? Similarly we can use metadata to solve it. By defining a decorator to tokenize which properties need to be injected and name this decorator as <code>Inject</code> to indicate this property needs to be injected, then we are good.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// inject.ts</span>\n\n<span class=\"k\">import</span> <span class=\"dl\">'</span><span class=\"s1\">reflect-metadata</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">PROPS_KEY</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">ioc:inject_props</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">Inject</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">:</span> <span class=\"kr\">any</span><span class=\"p\">,</span> <span class=\"nx\">targetKey</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">annotationTarget</span> <span class=\"o\">=</span> <span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"kd\">constructor</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">let</span> <span class=\"nx\">props</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">Reflect</span><span class=\"p\">.</span><span class=\"nx\">hasOwnMetadata</span><span class=\"p\">(</span><span class=\"nx\">PROPS_KEY</span><span class=\"p\">,</span> <span class=\"nx\">annotationTarget</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n      <span class=\"nx\">props</span> <span class=\"o\">=</span> <span class=\"nb\">Reflect</span><span class=\"p\">.</span><span class=\"nx\">getMetadata</span><span class=\"p\">(</span><span class=\"nx\">PROPS_KEY</span><span class=\"p\">,</span> <span class=\"nx\">annotationTarget</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">props</span><span class=\"p\">[</span><span class=\"nx\">targetKey</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n      <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"nx\">targetKey</span>\n    <span class=\"p\">};</span>\n\n    <span class=\"nb\">Reflect</span><span class=\"p\">.</span><span class=\"nx\">defineMetadata</span><span class=\"p\">(</span><span class=\"nx\">PROPS_KEY</span><span class=\"p\">,</span> <span class=\"nx\">props</span><span class=\"p\">,</span> <span class=\"nx\">annotationTarget</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Need to attention that although we are decorating the properties, the actual metadata should be defined on class to maintain the property list need to be injected of the class. So we have to use <code>target.constructor</code> as the <code>target</code> to be operated. And here uses property name (<code>targetKey</code>) as the <code>key</code> to the instance in IoC container to be simple.</p>\n\n<p>Then we need to change the <code>get</code> method of IoC container, and inject all the properties recursively:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// container.ts</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">PROPS_KEY</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./inject</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">Container</span> <span class=\"p\">{</span>\n  <span class=\"nx\">bindMap</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Map</span><span class=\"p\">();</span>\n\n  <span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"nx\">identifier</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span> <span class=\"nx\">clazz</span><span class=\"p\">:</span> <span class=\"kr\">any</span><span class=\"p\">,</span> <span class=\"nx\">constructorArgs</span><span class=\"p\">?:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"kr\">any</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">bindMap</span><span class=\"p\">.</span><span class=\"kd\">set</span><span class=\"p\">(</span><span class=\"nx\">identifier</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"nx\">clazz</span><span class=\"p\">,</span>\n      <span class=\"na\">constructorArgs</span><span class=\"p\">:</span> <span class=\"nx\">constructorArgs</span> <span class=\"o\">||</span> <span class=\"p\">[]</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">get</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nx\">identifier</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nx\">T</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">target</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">bindMap</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">identifier</span><span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">clazz</span><span class=\"p\">,</span> <span class=\"nx\">constructorArgs</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">target</span><span class=\"p\">;</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">props</span> <span class=\"o\">=</span> <span class=\"nb\">Reflect</span><span class=\"p\">.</span><span class=\"nx\">getMetadata</span><span class=\"p\">(</span><span class=\"nx\">PROPS_KEY</span><span class=\"p\">,</span> <span class=\"nx\">clazz</span><span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">inst</span> <span class=\"o\">=</span> <span class=\"nb\">Reflect</span><span class=\"p\">.</span><span class=\"nx\">construct</span><span class=\"p\">(</span><span class=\"nx\">clazz</span><span class=\"p\">,</span> <span class=\"nx\">constructorArgs</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">prop</span> <span class=\"k\">in</span> <span class=\"nx\">props</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">identifier</span> <span class=\"o\">=</span> <span class=\"nx\">props</span><span class=\"p\">[</span><span class=\"nx\">prop</span><span class=\"p\">].</span><span class=\"nx\">value</span><span class=\"p\">;</span>\n      <span class=\"c1\">// get injected object recursively</span>\n      <span class=\"nx\">inst</span><span class=\"p\">[</span><span class=\"nx\">prop</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">identier</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">inst</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>To use it you can just utilize <code>Inject</code> to decorate the needed properties.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// a.ts</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">Provider</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">provider</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Provider</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">a</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">A</span> <span class=\"p\">{</span>\n  <span class=\"p\">@</span><span class=\"nd\">Inject</span><span class=\"p\">()</span>\n  <span class=\"nx\">b</span><span class=\"p\">:</span> <span class=\"nx\">B</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"final-code\" href=\"#final-code\" class=\"anchor\">\n  </a>\n  Final code\n</h3>\n\n<p>After the above adjustment, our final business code looks like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// b.ts</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Provider</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">b</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">])</span>\n<span class=\"kd\">class</span> <span class=\"nx\">B</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">p</span> <span class=\"o\">=</span> <span class=\"nx\">p</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// a.ts</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Provider</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">a</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"kd\">class</span> <span class=\"nx\">A</span> <span class=\"p\">{</span>\n  <span class=\"p\">@</span><span class=\"nd\">Inject</span><span class=\"p\">()</span>\n  <span class=\"k\">private</span> <span class=\"nx\">b</span><span class=\"p\">:</span> <span class=\"nx\">B</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// main.ts</span>\n<span class=\"kd\">const</span> <span class=\"nx\">container</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Container</span><span class=\"p\">();</span>\n<span class=\"nx\">load</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">);</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">a</span><span class=\"dl\">'</span><span class=\"p\">));</span>   <span class=\"c1\">// A =&gt; {b: B {p: 10}}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We can see there is no more manually instantiation, and the framework layer can automatically handle whatever how many classes to be registered, and inject required properties when instantiation. All instances can be provided are maintained by the class itself, and if it needed to be changed it doesn't need to change other files.</p>\n\n<h2>\n  <a name=\"summary\" href=\"#summary\" class=\"anchor\">\n  </a>\n  Summary\n</h2>\n\n<p>This post starts from classes decoupling to describe why IoC is needed, and implemented a simplified IoC framework based TypeScript. In fact, besides decoupling, we can benefit much from IoC, for example, fast unit test based on container, analyzing the dependency relations between classes.</p>\n\n<p>Although the concept of IoC was initiated from server side, but nowadays there are also all kinds of applications in the front end, for example AngularJS has implemented their own IoC framework to improve development efficiency and the levels of modularization. </p>\n\n","menus":{},"pages":[],"relativeDir":"","relativePath":"","site":{},"url":"/posts/inversion-of-control-implementation-based-on-typescript-3fl6"},{"base":"","frontmatter":{"canonical_url":"https://dev.to/jefftian/how-to-convert-beamer-tex-pdf-to-pptx-perfectly-4o08","comments_count":0,"date":"2020-11-30T05:14:57Z","excerpt":"Background   You are making some serious slides show and use LaTex beamer template to genera...","positive_reactions_count":0,"stackbit_url_path":"/posts/how-to-convert-beamer-tex-pdf-to-pptx-perfectly-4o08","tags":["beamer","tex","pptx","pdf"],"template":"post","title":"How to convert beamer tex pdf to pptx, perfectly?"},"html":"<h2>\n  <a name=\"background\" href=\"#background\" class=\"anchor\">\n  </a>\n  Background\n</h2>\n\n<p>You are making some serious slides show and use LaTex beamer template to generate a perfect PDF, but you are asked to provide a PPTX file to have the ability to use the time rehearsal.</p>\n\n<h2>\n  <a name=\"ways-tried\" href=\"#ways-tried\" class=\"anchor\">\n  </a>\n  Ways tried\n</h2>\n\n<p>There are so many tools that claims they can convert your PDF to pptx, but the results are cumbersome. Either texts get overlapped or fonts skewed ugly. And some tools say they can keep original look and feel 100%, but you just get all the slides in image which can't be accepted at all. </p>\n\n<h2>\n  <a name=\"a-manual-but-perfect-way\" href=\"#a-manual-but-perfect-way\" class=\"anchor\">\n  </a>\n  A manual but perfect way\n</h2>\n\n<p>Use LibreOffice to open the PDF file, and create a new PPTX file manually. </p>\n\n<p>Then change the page width and height properties of the PPTX file to match the original PDF's page width and height.</p>\n\n<h3>\n  <a name=\"then-copy-slide-one-by-one\" href=\"#then-copy-slide-one-by-one\" class=\"anchor\">\n  </a>\n  Then copy slide one by one.\n</h3>\n\n<p>Now your slides look and feel the same as the PDF, and you can keep on editing them.</p>\n\n","menus":{},"pages":[],"relativeDir":"","relativePath":"","site":{},"url":"/posts/how-to-convert-beamer-tex-pdf-to-pptx-perfectly-4o08"},{"base":"","frontmatter":{"canonical_url":"https://dev.to/jefftian/-524i","comments_count":0,"date":"2020-11-11T08:24:32Z","excerpt":"问题   网上商城如果要开通支付功能，一般需要对接第三方支付系统，比如支付宝、微信支付等等，但是会被第三方收费，如果是个人开发者，订单量很小，一般不划算。  但是不对接第三方API，那...","positive_reactions_count":1,"stackbit_url_path":"/posts/-524i","tags":[],"template":"post","title":"个人收款自动化"},"html":"<h2>\n  <a name=\"%E9%97%AE%E9%A2%98\" href=\"#%E9%97%AE%E9%A2%98\" class=\"anchor\">\n  </a>\n  问题\n</h2>\n\n<p>网上商城如果要开通支付功能，一般需要对接第三方支付系统，比如支付宝、微信支付等等，但是会被第三方收费，如果是个人开发者，订单量很小，一般不划算。</p>\n\n<p>但是不对接第三方API，那么只能采用个人收款方式，比如个人收款二维码。但是这样的话，就不会得到第三方的付款回调通知，只能自行解决。</p>\n\n<h2>\n  <a name=\"%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\" href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\" class=\"anchor\">\n  </a>\n  解决方案\n</h2>\n\n<p>第一步，自己写个订单系统，订单的状态转换（从已创建到已付款）人工实现。比如让用户付款后，发送截图给你，你核对后人工将订单状态改为已付款。</p>\n\n<p>第二步，将这一步自动化。这里挑战很大，怎么知道收到的款项对应哪个订单呢？<a href=\"https://github.com/yioMe/nodejs_wx_aipay_api\">https://github.com/yioMe/nodejs_wx_aipay_api</a> 解决了这个问题。</p>\n\n<ul>\n<li>截获收款二维码的生成，给每个订单一定的范围内的随机减免</li>\n<li>安装客户端 APP，监听支付宝/微信的收款（到账语音通知），转发通知到订单系统，根据金额关联到订单，实现自动状态流转。</li>\n</ul>\n\n<h2>\n  <a name=\"%E5%85%8D%E8%B4%B9%E6%96%B9%E6%A1%88\" href=\"#%E5%85%8D%E8%B4%B9%E6%96%B9%E6%A1%88\" class=\"anchor\">\n  </a>\n  免费方案\n</h2>\n\n<p><a href=\"https://github.com/yioMe/nodejs_wx_aipay_api\">https://github.com/yioMe/nodejs_wx_aipay_api</a> 开源的只是服务器端的订单系统而已，但是个人收款自动化的难点在于客户端监听方面，而这个监听 APP 并没有开源，而是收费下载的，因此如果要免费方案，还得自己实现这个监听 APP。</p>\n\n","menus":{},"pages":[],"relativeDir":"","relativePath":"","site":{},"url":"/posts/-524i"},{"base":"","frontmatter":{"canonical_url":"https://dev.to/jefftian/how-to-resolve-kubectrl-apply-deployment-conflict-error-3cf","comments_count":0,"date":"2020-10-29T09:48:06Z","excerpt":"Symton   When you try to apply a deployment yaml file to kubernetes cluster, you get the err...","positive_reactions_count":6,"stackbit_url_path":"/posts/how-to-resolve-kubectrl-apply-deployment-conflict-error-3cf","tags":["k8s","kubernetes","devops","deployment"],"template":"post","title":"How to resolve `kubectrl apply`deployment conflict error"},"html":"<h2>\n  <a name=\"symton\" href=\"#symton\" class=\"anchor\">\n  </a>\n  Symton\n</h2>\n\n<p>When you try to apply a deployment yaml file to kubernetes cluster, you get the error:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>kubectl apply -f tmp.yaml\n\nThe Deployment \"xxx\" is invalid:\n* spec.template.spec.containers[0].env[53].valueFrom: Invalid value: \"\": may not be specified when `value` is not empty\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"analysis\" href=\"#analysis\" class=\"anchor\">\n  </a>\n  Analysis\n</h2>\n\n<p>The kubernetes api met some issues when diff your <code>tmp.yaml</code> with the current running deployment.</p>\n\n<p>For example, your current running deployment file has a hardcoded environment, and your new tmp.yaml has an environment whose value is reading from other sources:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code># current running deployment\n- name: EXPRESS_LOG_LEVEL\n  value: debug\n\n# You are trying to update to\n- name: EXPRESS_LOG_LEVEL\n  valueFrom:\n    configMapKeyRef:\n      name: xxx-configmap\n      key: EXPRESS_LOG_LEVEL\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"how-do-i-manually-diff\" href=\"#how-do-i-manually-diff\" class=\"anchor\">\n  </a>\n  How do I manually diff?\n</h2>\n\n<p>You can export the current deployment yaml by:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>kubectl get deploy/your-current-deploy -o yaml | pbcopy\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Then you can diff them via <a href=\"https://www.diffchecker.com/diff\">https://www.diffchecker.com/diff</a> .</p>\n\n<h2>\n  <a name=\"solution\" href=\"#solution\" class=\"anchor\">\n  </a>\n  Solution\n</h2>\n\n<p>Delete the conflicted environments and then apply again:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>KUBE_EDITOR=\"vim\" kubectl edit deploy/your-current-deploy\n\nkubectl apply -f tmp.yaml\n\n# Now you get the success message!\ndeployment.apps/xxx-app configured\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n","menus":{},"pages":[],"relativeDir":"","relativePath":"","site":{},"url":"/posts/how-to-resolve-kubectrl-apply-deployment-conflict-error-3cf"}],"relativeDir":"","relativePath":"","site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"Made with Stackbit.","url":"https://www.stackbit.com","style":"link","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"url":"/posts/how-to-get-logs-from-all-pod-of-a-service-in-a-cluster-30mf"}},
    "staticQueryHashes": []}