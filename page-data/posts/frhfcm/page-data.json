{"componentChunkName":"component---src-templates-post-js","path":"/posts/frhfcm","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/frhfcm","relativePath":"posts/frhfcm","frontmatter":{"title":"给 Strapi 应用添加健康检查端点","stackbit_url_path":"posts/frhfcm","date":"2021-11-15T11:51:53","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<p>今天继续上周的主题，给 k8s 集群里的服务添加健康检查探针。上一篇《<a href=\"https://zhuanlan.zhihu.com/p/432241688\">给 SpringBoot 服务添加健康检查</a>》是针对 Java 服务的。除了 java 服务，公司还有一个 CMS 系统部署在 k8s 集群中，基于 Strapi 开发，是一个 nodejs 项目。粗看了一下 Strapi，感觉它的理念和 Koa 很像，仔细看它果然依赖 koa，并且文档中也提到了 Koa。这让我比较激动，毕竟，我也是 Koa 项目的 Contributor（尽管只有一丢丢贡献）：<br /><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1636975196099-fed4dda9-0600-4166-a523-3c20e13a1ffd.png#clientId=ud22da8f6-df5b-4&#x26;from=paste&#x26;height=494&#x26;id=u09544a45&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=988&#x26;originWidth=1408&#x26;originalType=binary%E2%88%B6=1&#x26;size=77445&#x26;status=done&#x26;style=none&#x26;taskId=u59f489a4-3d7b-4d96-b875-680aa88e837&#x26;width=704\" alt=\"image.png\"></p>\n<p><a name=rPUzk></a></p>\n<h1>先追求有，再追求好</h1>\n<p>如同上一篇给 SpringBoot 服务添加健康检查路由一样，本篇介绍只追求有，即添加最简单的实现。要完美的话，还需要写一些额外的代码，以便在一些外部依赖（比如数据库）发生问题时得到通知，并让健康检查端点返回错误。</p>\n<p><a name=a10Hy></a></p>\n<h1>测试</h1>\n<p>如同上一篇一样，仍然是在写实现代码前，先把测试写好，即把最终效果写下来，这是一种以终为始的思维方式，有助于避免掉进软件开发的焦油坑：《<a href=\"https://zhuanlan.zhihu.com/p/354687201\">我是如何从焦油坑里爬出来的</a>》。</p>\n<p><a name=ZKE9Z></a></p>\n<h2>添加测试工具</h2>\n<p>由于项目里没有引入测试工具，先补上：</p>\n<p>shell\nyarn add --dev jest supertest sqlite3</p>\n<p>jest 是 Facebook（现在叫 Meta？）开发的测试框架。supertest 用来测试 Web 服务，而 sqlite3 可以简化测试时的数据库依赖。</p>\n<p><a name=ViGOS></a></p>\n<h2>测试配置</h2>\n<p>增加 config/env/test/database.json 指定测试时使用 sqlite：</p>\n<p>json\n{\ndefaultConnection: default,\nconnections: {\ndefault: {\nconnector: bookshelf,\nsettings: {\nclient: sqlite,\nfilename: .tmp/test.db\n},\noptions: {\nuseNullAsDefault: true,\npool: {\nmin: 0,\nmax: 1\n}\n}\n}\n}\n}</p>\n<p><a name=JZAdv></a></p>\n<h2>测试命令</h2>\n<p>在 package.json 里的 scripts 字段中加入测试相关命令：</p>\n<p>diff</p>\n<ul>\n<li>\n<pre><code>test: jest --forceExit --detectOpenHandles\n</code></pre>\n</li>\n</ul>\n<p>在 package.json 的最后添加：</p>\n<p>json</p>\n<p>jest: {\ntestPathIgnorePatterns: [\n/node_modules/,\n.tmp,\n.cache\n],\ntestEnvironment: node\n}</p>\n<p><a name=dhNxl></a></p>\n<h2></h2>\n<p><a name=hdHfO></a></p>\n<h2>健康检查测试用例</h2>\n<p>tests/healthz/index.test.js</p>\n<p>javascript\nconst Strapi = require(strapi);\nconst http = require(http);\nconst request = require(supertest)</p>\n<p>let instance;</p>\n<p>async function setupStrapi() {\nif (!instance) {\n/** the following code in copied from ./node_modules/strapi/lib/Strapi.js */\nawait Strapi().load();\ninstance = strapi; // strapi is global now\nawait instance.app\n.use(instance.router.routes()) // populate KOA routes\n.use(instance.router.allowedMethods()); // populate KOA methods</p>\n<pre><code>    instance.server = http.createServer(instance.app.callback());\n}\nreturn instance;\n</code></pre>\n<p>}</p>\n<p>jest.setTimeout(20000)\ndescribe(Health Check, () => {\nbeforeAll(async () => {\nawait setupStrapi()\n})</p>\n<pre><code>it(should live, async () => {\n    await request(\n        strapi.server)\n        .get(/healthz/liveness)\n        .expect(200)\n        .then(data => {\n            expect(data.text).toBe(Im alive!)\n        })\n})\n\nit(should ready, async()=>{\n    await request(\n        strapi.server)\n        .get(/healthz/readiness)\n        .expect(200)\n        .then(data => {\n            expect(data.text).toBe(Im ready!)\n        })\n})\n</code></pre>\n<p>})</p>\n<p><a name=RVMw2></a></p>\n<h1>实现路由</h1>\n<p>首先增加 api/healthz 目录</p>\n<p><a name=mmCfX></a></p>\n<h2>添加路由配置</h2>\n<p>api/healthz/config/routes.json</p>\n<p>json\n{\nroutes: [\n{\nmethod: GET,\npath: /healthz,\nhandler: Healthz.index\n},\n{\nmethod: GET,\npath: /healthz/liveness,\nhandler: Healthz.liveness\n},\n{\nmethod: GET,\npath: /healthz/readiness,\nhandler: Healthz.readiness\n}\n]\n}</p>\n<p>注意，一定不要使用官方的默认示例，不能含有 policies 数组：\njson\n{\nroutes: [\n{\nmethod: GET,\npath: /healthz,\nhandler: Healthz.index,\nconfig: {\npolicies: []\n}\n}\n]\n}</p>\n<p>如果这样，运行测试就会得到 403 的错误，原因是它会触发 user permissions 插件的权限检查。 尽管你可以通过管理后台配置其权限公开访问：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1636976497168-3df32969-6027-4d23-b2a6-9966e399e65d.png#clientId=ud22da8f6-df5b-4&#x26;from=paste&#x26;height=799&#x26;id=u6ddcabe3&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1598&#x26;originWidth=2288&#x26;originalType=binary%E2%88%B6=1&#x26;size=239700&#x26;status=done&#x26;style=none&#x26;taskId=ue59cfd42-970d-43e4-aef1-056473ed537&#x26;width=1144\" alt=\"image.png\"></p>\n<p>但是对于健康检查接口，没有必要专门配置权限，直接绕开权限插件即可：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1636976615802-bcfd2d1f-042a-40aa-adfc-b0f99e25f6e6.png#clientId=ud22da8f6-df5b-4&#x26;from=paste&#x26;height=748&#x26;id=u548bcde4&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1496&#x26;originWidth=1890&#x26;originalType=binary%E2%88%B6=1&#x26;size=215748&#x26;status=done&#x26;style=none&#x26;taskId=u85fe8b24-5ccd-4737-906e-15d96dd7832&#x26;width=945\" alt=\"image.png\"></p>\n<p><a name=p1QDp></a></p>\n<h2>实现路由逻辑</h2>\n<p>api/healthz/controllers/Healthz.js\njavascript\nmodule.exports = {\n// GET /healthz\nasync index(ctx) {\nctx.send(Hello World!)\n},</p>\n<pre><code>async readiness(ctx) {\n    ctx.send(Im ready!)\n},\n\nasync liveness(ctx) {\n    ctx.send(Im alive!)\n},\n</code></pre>\n<p>}</p>\n<p>运行测试，通过。</p>\n<p><a name=Lxrkz></a></p>\n<h1>添加 deployment 配置</h1>\n<p>yaml</p>\n<pre><code>    readinessProbe:\n      httpGet:\n          path: /healthz/readiness\n          port: 1337\n      initialDelaySeconds: 30\n      timeoutSeconds: 10\n    livenessProbe:\n      httpGet:\n          path: /healthz/liveness\n          port: 1337\n      initialDelaySeconds: 130\n      timeoutSeconds: 10\n</code></pre>\n<p>部署后可以验证：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1636976808708-d6200d7e-72ae-48ce-ac15-dc3eced1b7a7.png#clientId=ud22da8f6-df5b-4&#x26;from=paste&#x26;height=222&#x26;id=u8d3a221a&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=444&#x26;originWidth=882&#x26;originalType=binary%E2%88%B6=1&#x26;size=19590&#x26;status=done&#x26;style=none&#x26;taskId=u4716615a-3ef9-4d8e-b3be-bc90887950b&#x26;width=441\" alt=\"image.png\"></p>\n<p>在 k8s 集群里查看是否生效：</p>\n<p>shell\nkubectl describe pod/your-pod</p>\n<p>...\nContainers:\ncms:\nContainer ID:   docker://7245d2d8644d6bcc7c7ff39fdea5e680457c4edf2ff70610a8607c3cef5d3332\nImage:          13659932xxxx.dkr.ecr.cn-northwest-1.amazonaws.com.cn/cms:cccc1aec\nImage ID:       docker-pullable://13659932xxx.dkr.ecr.cn-northwest-1.amazonaws.com.cn/cms@sha256:bc4317cc2347eb2aed74b8e4e9f39b901b613e4bbc7781e09957e2eb4a0bd0db\nPort:           1337/TCP\nHost Port:      0/TCP\nState:          Running\nStarted:      Mon, 15 Nov 2021 10:23:42 +0000\nReady:          True\nRestart Count:  0\nLimits:\ncpu:     1\nmemory:  2000Mi\nRequests:\ncpu:      500m\nmemory:   1000Mi\nLiveness:   http-get http://:1337/healthz/liveness delay=130s timeout=10s period=10s #success=1 #failure=3\nReadiness:  http-get http://:1337/healthz/readiness delay=30s timeout=10s period=10s #success=1 #failure=3\nEnvironment Variables from:\n...</p>\n<p>注意以上输出的 Liveness 和 Readiness 部分，小功告成！</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"本站源码","url":"https://github.com/Jeff-Tian/space","style":"link","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}