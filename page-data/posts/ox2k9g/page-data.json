{"componentChunkName":"component---src-templates-post-js","path":"/posts/ox2k9g","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/ox2k9g","relativePath":"posts/ox2k9g","frontmatter":{"title":"敏捷反对“敏捷” ——《敏捷整洁之道》读后感","stackbit_url_path":"posts/ox2k9g","date":"2022-05-22T04:46:54","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<p>天下程序员苦“敏捷”久矣！</p>\n<p>我是一个野生程序员，大学毕业后找了一份销售支持的工作，4年之后终于鼓起勇气裸辞了，开始寻求转型程序员的机会。经过半年的失业状态后，终于面试成功做了一名软件测试人员，进入了一家软件公司，不久公司开始所谓的敏捷转型。</p>\n<p>当时，尽管敏捷的概念已经提出了十年了，但那时的我还是第一次听说。我问开发，什么是敏捷开发？他告诉我：就是玩儿命开发。果然，无论是开发还是测试，加班都开始多了起来。后来，我也转做开发了，也换过很多公司，经历过中小创业公司，也加入过头部外企，无论它们的风格和文化多么不同，产品的区别有多大，但没有一家公司不是采用敏捷开发模式的。除了一家外企比较轻松（正常）外，其他几家公司哪怕是外企，程序员们都是处在水深火热之中的，加班、996、通宵都有过。</p>\n<p>这让我陷入迷茫：我一直认为程序员是世界上最了不起的群体，他们富有创造性、拥有热情、并改变着世界。所以我才费尽九牛二虎之力，刻意转型成为其中一员。然而，就这？在知乎上经常看到有人问，程序员的出路在哪儿？对我来说，程序员这个职业本来就是我的出路呀，为什么还要寻找所谓“出路”？但是如果程序员就是该加班，就是不被尊重的话，那的确就得另谋“出路”了。</p>\n<p>造成程序员惨状的原因是什么？这时我将矛头对准了“敏捷”，我认为这都是“敏捷”流行后导致的。因此我发牢骚地写了一篇博文《<a href=\"https://zhuanlan.zhihu.com/p/370768780\">程序员，困在敏捷里</a>》。我抱怨程序员们不写测试、项目中充斥着重复代码、完全没有文档（项目的 README 文件都没有）等等这些反模式，而这些反模式正在是“敏捷”流程的控制与规训之下，是在不可变更的 Deadline 日益逼近的紧迫感下，以及产品经理、技术经理以及敏捷大师们的鞭子之下，程序员们为了帮助业务实现目标而不惜牺牲自己的声誉、甚至健康所做出的妥协。但这种妥协的直接后果就是——陷入软件焦油坑的速度更快了，从而造成更多加班的恶性循环。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1653268519661-875f8314-6412-4aa7-a13c-dd6260941307.png#crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=url&#x26;id=hGEg3&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=262&#x26;originWidth=720&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;status=done&#x26;style=none&#x26;title=\" alt=\"\"></p>\n<p>这篇并没有什么营养的牢骚文章，却似乎引起了比较普遍的共鸣，并得到了一些留言。其中有一位比较资深的知乎网友，应该也是同行，告诉我说 Bob Martin 的新书《敏捷整洁之道》就是在讲我抱怨的问题。他说今后老板和产品经理再扯什么承诺精神、不能拖延之类，就把这本书甩到他们脸上。并说 Bob 书里骂得更狠，其实 Bob 那帮程序员大佬们发明敏捷本来是为了解放程序员的，结果被盗取了这个名词，砍掉核心，扭曲本意，反而变成了更加剥削程序员的工具了。<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1653268154296-5daf8047-b43b-4cd6-9605-6a1413fa450e.png#clientId=u66bd6e25-648d-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=307&#x26;id=ua7237c1f&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=384&#x26;originWidth=851&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=49675&#x26;status=done&#x26;style=none&#x26;taskId=u0788125e-563e-48fa-befc-781eab26afa&#x26;title=&#x26;width=680.8\" alt=\"image.png\"></p>\n<p>于是，我立即开始阅读 Bob Martin 的《敏捷整洁之道》，第一遍读的过程中几乎掉下泪来。最近收到人民邮电出版社的邀请，希望我能写一篇《敏捷整洁之道》的读后感，于是我又再次逐字逐句地精读了一遍英文版。<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/jpeg/221736/1653270368505-eaed1c63-c934-408c-aae2-e3f73b19998e.jpeg#crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=url&#x26;id=PsBoW&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=2079&#x26;originWidth=960&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;status=done&#x26;style=none&#x26;title=\" alt=\"\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1653268212468-c49dd887-a8cc-4f40-b171-659bf9f8ad0e.png#clientId=u66bd6e25-648d-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;id=u49882dee&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1388&#x26;originWidth=1104&#x26;originalType=url%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=1356004&#x26;status=done&#x26;style=none&#x26;taskId=u73b5294e-b874-44cb-80bc-c5d4c1eb8d8&#x26;title=\" alt=\"image.png\"></p>\n<p>我的感觉是，Bob 大叔的确是愤怒的，他说尽管很多地方做了相应的委婉化处理，但有时候，只有最初的脏话最能准确表达他所想要表达的。所以，这颇有点敏捷反对“敏捷”的意味——第一个敏捷是 Bob 等人发明出来的真敏捷，第二个带引号的“敏捷”，是如今盛行的伪敏捷——这从书本的副标题“正本清源”可以得到印证。我的第一遍阅读更多的是一种寻求知音的慰藉，觉得 Bob 大叔不愧是大师，能说出我心里想说但表达不好的话。而第二遍阅读时，我的心态已经平和了许多，读得更仔细更慢，于是便**透过书中的文字，看到了真正的敏捷，以及能够真正实践敏捷的“梦之队”！**甚至可以说，还看到了所谓的出路，并且这种出路不是换个职业，换职业是我所不能接受的。我就想做一辈子程序员，即使是在中国。</p>\n<p>书中有很多乍一听是惊世骇俗的观点，但细细品味后会发现就应该是那样呀。敏捷是多么简单呀，只需要遵守为数不多的几条纪律就可以了。那为什么如此多的团队却做不好呢？我经历了好几个团队，都是随着迭代数的增加，流程越来越繁杂，DoD列得越来越长甚至要到十几条，但是无论效率还是质量都没有得到提高。Bob 大叔在书中指出，DoD 应且仅应有一条：通过验收测试。多么简洁明了，在他写出来后，读者肯定会说，这不是很显然的吗？然而在实际中，不少团队会列出长长的 Checklist：诸如代码已提交，Code Review 已通过，代码格式符合标准，DevOps 相应的操作已执行、操作手册已更新等等不一而足，然而就是不提验收测试。这是所有敏捷转型失败的通病，也是被砍掉的敏捷核心。</p>\n<p>敏捷的本意被扭曲，最明显的就是大家普遍认为敏捷就是快糙猛。Bob 大叔在书中反复强调，敏捷从来无关于快，敏捷被发明出来是用来戳破幻想的。幻想是项目管理的大敌，由于心存幻想，所以在项目刚开始的时候，大家会有一个蜜月期，一直是好消息。而直到临近上线，坏消息才传来，但这时神仙也回天乏术了。而敏捷可以抢在幻想杀死项目之前击毁幻想。Bob 大叔还论证了只有质量做到最好，才能最快。这不也是显然易见的吗？如果质量越差反而可以更快的话，那追求高质量还有什么意义？</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1653268297551-4603860f-b581-47bb-b90c-55545bcfde81.png#clientId=u66bd6e25-648d-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;id=udc4b8a7c&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=225&#x26;originWidth=720&#x26;originalType=url%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=87612&#x26;status=done&#x26;style=none&#x26;taskId=u5adb7742-d7a3-4c91-b9ff-292283c3a03&#x26;title=\" alt=\"image.png\"></p>\n<p>事实上，只能在日期和范围中做取舍，质量不是一个可以取舍的。日期越确定，能做完的范围就越不确定；而范围不容商量，那么能做完的日期就越不确定。这就是<strong>软件开发中的测不准原理</strong>。但在实践中，由于上线日期不能改，项目范围业务也不妥协，而质量就成为了那个妥协点。后果是项目很快进行不下去，这时又有从头重写的嗖主意冒出来，如果真的从头重写，一个焦油坑就变成了两个焦油坑。其实啊，越老的项目，应该是越容易维护的才对。敏捷从来无关于快，但是《人月神话》里也指出了，没有银弹。敏捷不是银弹，也不存在其他银弹能做到比敏捷更快。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1653268452151-c48d16c7-4fa6-44ed-89d5-82f357d1d893.png#clientId=u66bd6e25-648d-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;id=ude3a4fcc&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=182&#x26;originWidth=720&#x26;originalType=url%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=118951&#x26;status=done&#x26;style=none&#x26;taskId=u54d55c5d-b50b-4c99-a824-f5552f55444&#x26;title=\" alt=\"image.png\"></p>\n<p>业务部们、经理们、以及敏捷大师们，用来压榨程序员们最好的工具就是所谓的承诺精神，这一点我通读《敏捷整洁之道》，没有看到一处提到所谓的承诺精神，只有 Bob 大叔在各个地方反复重申：这不是承诺，那也不是承诺！比如<strong>估点不是承诺</strong>，并且程序员们有权在出现变化的情况下修改自己的估点。另外<strong>速率也不是承诺</strong>，并且就算速率下降了，也不意味着团队失败了，而是好的技术实践被破坏的信号。此时无论是经理还是敏捷大师，都不应该给团队施加压力，要求加油加班，在下一个迭代赶上。如果施加压力后看到下一迭代的速率提升，很可能是故事点出现了通货膨胀。真知灼见！要判断是否出现了故事点通货膨胀，可以找一个黄金故事卡，比如登录。如果登录的故事点是3，而某个迭代中一个方案修改的故事卡的故事点是10，那你可以很容易地感知到这个迭代中的故事点出现了通货膨胀。</p>\n<p>故事点估算从来不是承诺，但却是敏捷的重要部分。像敏捷中的其他部分一样，提供数据。敏捷的主要目标之一是戳破幻想，戳破幻想的大头针就是数据。《敏捷整洁之道》一书中有很多关键字，其中一个就是小。敏捷由几个小纪律组成，用来帮助小的软件团队管理一系列的小项目。尽管它强调小，但是影响巨大，毕竟大项目也是由众多小项目组成的。敏捷通过将一个项目拆解成一个接一个的小迭代，而每个迭代都会产生数据，通过数据而非幻想来管理项目的计划。一个软件项目更像是一场马拉松，而不是百米冲刺。迭代的意义仅仅是提供数据，而加班加点无异于数据造假，不可持续。每个迭代产生的数据都是用来持续评估项目的计划安排的，虽然迭代也产生可以工作的代码，但就算没有产出可工作的代码，也不算失败，因为其产生的数据仍有价值。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1653268235356-5d62d77f-e6fa-40bf-aad8-c5e8751c7362.png#clientId=u66bd6e25-648d-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;id=ue8e3dfc3&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=426&#x26;originWidth=720&#x26;originalType=url%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=204303&#x26;status=done&#x26;style=none&#x26;taskId=ue060ec09-c452-48b6-9ba7-022196c1fca&#x26;title=\" alt=\"image.png\"></p>\n<p>敏捷失败了吗？是的，但又不是。应该说，伪敏捷失败了，而且从来没有成功过。但不得不承认，最初由程序员们创建的真敏捷社区，很快涌进了越来越多的项目经理，从而开始变味了。很快，“敏捷”不再是程序员们的出路了，反而成为了程序员们的枷锁。很重要的原因是，盛行的“伪敏捷”几乎从来不提技术实践，只有工具和流程。但是在《敏捷整洁之道》中可以看到的是，技术实践是敏捷成功的最重要的因素。比如测试驱动开发、重构、结对编程、浮现式设计等等。如何快速区分真敏捷和伪敏捷呢？从我读《敏捷整洁之道》的体会结合自己多年的观察，私以为凡是没有实践测试驱动开发的团队，宣称自己是敏捷团队那都是耍流氓。相反，采用了测试驱动开发的个人和团队，却是可以适应非敏捷的管理文化的。关于测试驱动开发，Bob 大叔做了一个精彩的类比：会计行业中的复式记账法。自己记点流水账是可以的，但是在企业级必须采用复式记账法。同样，自己写点玩具程序是可以比较随意的，但是进行严肃的企业级软件开发，怎么能不使用测试驱动开发呢？Bob 大叔甚至做了一个预测，随着软件无处不在无孔不入，软件对人们的经济活动甚至生命安全产生越来越重要的影响的今天，<strong>立法要求企业级软件开发必须采用测试驱动开发的日子不远了</strong>！因此我也希望技术实践还停留在石器时代或者青铜时代的伪敏捷，也尽快消亡吧。但也不能太乐观，不要期待公司的敏捷转型成功，而要做好在伪敏捷的幌子下，从个人层面实践敏捷的精髓。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1653270130960-1244d11f-80e9-452b-aca7-3af5fdc16e80.png#clientId=ub13cdd29-a294-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=ui&#x26;id=uf47011e3&#x26;margin=%5Bobject%20Object%5D&#x26;name=%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220523093712.png&#x26;originHeight=378&#x26;originWidth=1043&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=77677&#x26;status=done&#x26;style=none&#x26;taskId=uf7b23252-a55b-4f28-b07f-f33589d1b22&#x26;title=\" alt=\"微信图片_20220523093712.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1653268485356-b80dee25-30b1-4920-a95b-5c53d053b0f5.png#clientId=u66bd6e25-648d-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;id=u4149afec&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=889&#x26;originWidth=720&#x26;originalType=url%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=305584&#x26;status=done&#x26;style=none&#x26;taskId=ud89e2cfe-5d63-40c5-a7c2-3a57fef9bee&#x26;title=\" alt=\"image.png\"></p>\n<p>既然“敏捷”不再是程序员的出路，那么程序员该走向何处？书中最后也指出了方向，那就是“软件匠艺”。程序员大佬们创建的敏捷已被污染，于是他们又创建了“软件匠艺”社区。《敏捷整洁之道》看似在为程序员们开脱，实际上并不是。书中开篇就说了，我们程序员统治着世界，并且我们做得相当糟糕。因此，敏捷不是对程序员没有要求，相反，有很高的要求，前面也提到了，<strong>技术实践是敏捷最重要的部分</strong>。只是这种要求不是承诺在固定日期前交付固定范围的用户故事这种幻想（还记得软件开发中的测不准原理吗？），而是程序员们应该不断提高自己的职业素养和专业水平。就算公司不给这种条件，也应该自己花钱和花时间向更高的水准精进。为了提高软件开发的水准以及回到敏捷的初心，Bob 大叔和其他程序员们在 2008 年 11 月份开创了新的运动：<strong>软件匠艺</strong>。因此，除了《敏捷整洁之道》，还有 Bob 大叔的《代码整洁之道》和《软件匠艺整洁之道》，寻找“出路”的程序员们都应该读一读。</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"Full Stack Developer, good at OAuth 2.0","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"本站源码","url":"https://github.com/Jeff-Tian/space","style":"link","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}