{"componentChunkName":"component---src-templates-post-js","path":"/posts/nql1gfknw00t58uc","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/nql1gfknw00t58uc","relativePath":"posts/nql1gfknw00t58uc","frontmatter":{"title":"Free Arch: GraphQL Federation 初体验（成功，且丝滑！）","stackbit_url_path":"posts/nql1gfknw00t58uc","date":"2022-11-13T15:22:25","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<p><a name=S3u7t></a></p>\n<h1>前情提要</h1>\n<p><a name=DKIGv></a></p>\n<h2>uni-orders</h2>\n<p>在《  <a href=\"https://zhuanlan.zhihu.com/p/580043578\">Free Arch: 个人开发者也能做到支付闭环 - Jeff Tian的文章 - 知乎</a> 》一文中，我用一个 Web 在线演示项目，展示了个人支付也能做到闭环。这个 Web 演示项目 v，是前端界面，它依赖的后端服务，我命名为 uni-orders，它的来历，以及目前的部署，《<a href=\"https://zhuanlan.zhihu.com/p/580160351\">Free Arch: 狡兔三窟，多处部署 - Jeff Tian的文章 - 知乎</a>》已经做了详细描述。</p>\n<p><a name=aI7r8></a></p>\n<h2>万能 BFF</h2>\n<p>现在，我想在自己的个人小程序里也集成这个支付功能。如果要直接对接 uni-orders，不太可行。因为 uni-orders 部署在国外的免费 Kubernetes 集群中，同时对外提供 Restful 和 gRPC 接口，默认的公网地址，是没有做域名备案的，而没有备案的域名，没法加入小程序的可信域名中。目前，我的个人小程序，后端由万能 BFF 提供。成能 BFF 也是我杜撰的名字，关于它的来历，详见：《<a href=\"https://zhuanlan.zhihu.com/p/416697232\">在小程序里接入 GraphQL - Jeff Tian的文章 - 知乎</a>》和《<a href=\"https://zhuanlan.zhihu.com/p/412196725\">一顿操作猛如虎，部署一个万能 BFF - Jeff Tian的文章 - 知乎</a> 》。</p>\n<p><a name=igOus></a></p>\n<h2>GraphQL Federation</h2>\n<p>一个前端对接多个后端不太好，既然有了 BFF，那理应由 BFF 来转发请求。不过，既然，万能 BFF 是以 GraphQL 为前端提供服务的，而且小程序的网络请求已经使用了 Apollo GraphQL Client，那么，看起来，只需要在万能 BFF 里加几个 Resolvers 去调用 uni-orders 即可。但是这种开发听上去不仅代码量大，且枯燥无趣。何必手写代码做 restful 到 graphql 的转换呢？</p>\n<p>我在之前整理过一个 《<a href=\"https://reveal-js-lac.vercel.app/#/5/2\">GraphQL API 使用指引与设计原则</a>》，其中提到了“联邦”，但只是一笔带过，没有给出实际例子。<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1668344544748-c3a707e2-c43a-4f4e-81ab-26411ffa6219.png#averageHue=%2369dc7b&#x26;clientId=u68a907de-7840-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=666&#x26;id=u26925d39&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1332&#x26;originWidth=2102&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=231452&#x26;status=done&#x26;style=none&#x26;taskId=u0c25b94b-4832-41c9-a59e-1f5f8c6d8df&#x26;title=&#x26;width=1051\" alt=\"image.png\"></p>\n<p>今天，正好可以使用万能 BFF 做为实际例子，将 uni-orders 的订单服务，联邦进来，既减少了代码量，又给自己之前写的文章，补上实际运行中的示例。\n<a name=ehVMP></a></p>\n<h1>成果演示</h1>\n<p>已有的万能 BFF，其访问地址是： <a href=\"https://sls.pa-ca.me/nest/graphql\">https://sls.pa-ca.me/nest/graphql</a>。 最终将 uni-orders 联邦进来后，使用了 /gateway 这个路由，其执行效果如下截图：<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1668349904996-b0f1acef-ebb8-4d16-aad0-9dac63a6dd57.png#averageHue=%2356a96a&#x26;clientId=u68a907de-7840-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=587&#x26;id=u101396c6&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1174&#x26;originWidth=2686&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=273080&#x26;status=done&#x26;style=none&#x26;taskId=u66fe8722-69c4-45fe-9232-77cdd4b53ec&#x26;title=&#x26;width=1343\" alt=\"image.png\">\n<a name=Qvrso></a></p>\n<h1>在万能 BFF 中联邦 uni-orders 的步骤</h1>\n<p><a name=a3DnH></a></p>\n<h2>在 uni-orders 中增加 GraphQL 接口</h2>\n<p>本来，uni-orders 是以 restful 和 gRPC 同时对外提供服务，其采用的是 nestjs 框架。其 swagger 如下图所示：<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1668350148656-2f85a736-da59-48bf-8287-d815d96e123c.png#averageHue=%2386b17f&#x26;clientId=u68a907de-7840-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=709&#x26;id=u43455f52&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1418&#x26;originWidth=1432&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=203713&#x26;status=done&#x26;style=none&#x26;taskId=u333f665a-5899-4a39-8b38-655053cea1d&#x26;title=&#x26;width=716\" alt=\"image.png\"></p>\n<p>现在想将它联邦进入万能 BFF，首先得给它再增加一个以 GraphQL 对外提供接口的能力。由于采用了 nestjs 框架，因此很容易实现。\n<a name=DYR5M></a></p>\n<h3>code first</h3>\n<p>NestJs 提供了两种开发 GraphQL 服务的方式，code first 和 schema first。这里选型了 code first 方式，因为一再提到希望减少编码量，code first 实在是太香了。首先，restful 在接入 swagger 时，已经定义了一套 Schema，通过 code first，只需要使用 GraphQL 注解，即可完美重用已经定义好的 Schema。</p>\n<p>提交 <a href=\"https://github.com/Jeff-Tian/uni-orders/commit/f461503cfa4ee35c86deca562339b98fb363aca7\">https://github.com/Jeff-Tian/uni-orders/commit/f461503cfa4ee35c86deca562339b98fb363aca7</a> 展示了这种改动是多么轻松：<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1668350582704-80cfc02a-4dbb-4dee-b16f-d434ddcb4772.png#averageHue=%23282f38&#x26;clientId=u68a907de-7840-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=661&#x26;id=u7128a8de&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1322&#x26;originWidth=2056&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=474731&#x26;status=done&#x26;style=none&#x26;taskId=ueb76a2aa-a7a3-49e0-a4d2-23d1d152e55&#x26;title=&#x26;width=1028\" alt=\"image.png\"></p>\n<p><a name=l9tku></a></p>\n<h3>在原有 OrderModules 中添加 OrdersResolver</h3>\n<p>原有 OrdersService 完全不用动，完美从 OrdersController 复用到新的 OrdersResolver 中：\ntypescript\nimport { Args, Int, Query, Resolver } from @nestjs/graphql;\nimport { Order } from ../db/entities/orders.entity;\nimport { OrdersService } from ./orders.service;</p>\n<p>@Resolver((of) => Order)\nexport class OrdersResolver {\nconstructor(private readonly ordersService: OrdersService) {}</p>\n<p>@Query((returns) => Order)\nasync order(@Args(id, { nullable: false, type: () => Int }) id: number) {\nreturn this.ordersService.getById(id);\n}\n}</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1668350771816-b4aa31b8-d21a-4960-ab96-13dffe8d5e42.png#averageHue=%23292e37&#x26;clientId=u68a907de-7840-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=599&#x26;id=ue9981c2b&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1198&#x26;originWidth=1948&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=340319&#x26;status=done&#x26;style=none&#x26;taskId=u31d1e98c-dd92-4811-8123-ef79183c7a8&#x26;title=&#x26;width=974\" alt=\"image.png\">\n<a name=GFgHe></a></p>\n<h3>选型 MercuriusDriver</h3>\n<p>最终要在 AppModule 中导入 GraphQLModule，让应用对外提供 GraphQL 服务。由于 uni-orders 没有使用 express 服务器，而是使用了 Fastify，从而在 GraphQL 的 Driver 选型上，没有采用 Apollo Driver，而是使用了 MercuriusDriver。通过引用它，uni-orders 项目就可以成功地对外暴露 GraphQL 接口了。</p>\n<p>但是，考虑到要将 uni-orders 的 GraphQL 服务联邦至万能 BFF，因此它需要以一个子图的形式运行，这时需要使用 MercuriusDriver 对应的 MercuriusFederationDriver：<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1668351174357-0f19bef8-9f94-4875-a616-f4eaf95454a5.png#averageHue=%23292f37&#x26;clientId=u68a907de-7840-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=675&#x26;id=u4bb5b1de&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1350&#x26;originWidth=2326&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=437796&#x26;status=done&#x26;style=none&#x26;taskId=u7f36701f-93ae-4f61-aea2-086664e2499&#x26;title=&#x26;width=1163\" alt=\"image.png\">\n<a name=Z7dKt></a></p>\n<h3>创建订单的 Mutation</h3>\n<p>以上的 OrdersResolver，只放了一个订单查询的 Query。正如通常的 HTTP 接口，GET 请求也可以对服务器的数据做修改，但是 restful 规范建议 GET 请求只做数据的读取，对于数据修改操作，放在非 GET 请求中。GraphQL 的 Query 也可以对服务器的数据做修改，但是不建议这样做，而是将数据修改放在 Mutation 中。于是可以将创建订单的操作做为 mutation 放在 OrdersResolver 中（详见另一个 commit）。<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1668351511779-bc7f1844-a6e6-405f-a887-0a9871c0e4c1.png#averageHue=%232a2f37&#x26;clientId=u68a907de-7840-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=718&#x26;id=u841f7d4a&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1436&#x26;originWidth=1918&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=413306&#x26;status=done&#x26;style=none&#x26;taskId=uf69d4971-5d1b-4c58-9a53-825d1b0f185&#x26;title=&#x26;width=959\" alt=\"image.png\"></p>\n<p><a name=PfVKK></a></p>\n<h3>最终效果</h3>\n<p>uni-orders 有 GraphQL 服务了：<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1668351632341-62c5b85a-728e-416a-ad86-dbd3bde17278.png#averageHue=%232a3140&#x26;clientId=u68a907de-7840-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=723&#x26;id=ufb9fa5e3&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1446&#x26;originWidth=1642&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=217436&#x26;status=done&#x26;style=none&#x26;taskId=u32b63da6-432b-4137-aff1-3c3298ddaae&#x26;title=&#x26;width=821\" alt=\"image.png\"></p>\n<p><a name=JKx56></a></p>\n<h3>自动发布至 Apollo Studio</h3>\n<p>由于万能 BFF 的 GraphQL 已经发布在了 Apollo Studio，因此想将新的 uni-orders 的 GraphQL 服务也发布在这里，方便统一查看和管理。<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1668351863313-584de1f5-3f8a-4582-940d-0d4f9771052a.png#averageHue=%235d6557&#x26;clientId=u68a907de-7840-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=680&#x26;id=u7f4cf040&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1360&#x26;originWidth=1366&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=231127&#x26;status=done&#x26;style=none&#x26;taskId=u68a2e6e4-2e53-487e-84d9-fc402fa4999&#x26;title=&#x26;width=683\" alt=\"image.png\"></p>\n<p>于是在已有的 uni-orders GitHub Actions 中增加了一个 workflow，每当代码提交后自动同步最新的 GraphQL 元信息到 Apollo Studio。<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1668351952845-4a0e98e8-4b3f-4b8e-976d-1bebc75046a9.png#averageHue=%23262a31&#x26;clientId=u68a907de-7840-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=510&#x26;id=u54e31415&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1020&#x26;originWidth=1552&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=141963&#x26;status=done&#x26;style=none&#x26;taskId=ud73b7db3-4990-4ead-b643-c3aac232a57&#x26;title=&#x26;width=776\" alt=\"image.png\"></p>\n<p>这使用了 rover 工具，它依赖一个 apollo key，可以配置在 Secrets 里：<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1668352136398-a902240d-2d1b-4a9d-93d0-b532f2d35af6.png#averageHue=%23252a30&#x26;clientId=u68a907de-7840-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=696&#x26;id=u72ea9ca7&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1392&#x26;originWidth=1944&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=247779&#x26;status=done&#x26;style=none&#x26;taskId=u2afc8d70-e6ab-448c-bbb8-eb3b1c37c24&#x26;title=&#x26;width=972\" alt=\"image.png\"></p>\n<p><a name=KG5iS></a></p>\n<h2>在万能 BFF 中联邦 uni-orders Sub Graph</h2>\n<p>万能 BFF 即 serverless-space 库，它的主要服务也是使用 NestJs 开发，将以 Serverless 形式部署在 AWS 上。和 uni-orders 除了有 serverless 这个区别外，其 web 服务也不一样，采用的是常见的 express；对应的 GraphQL Driver 是 Apollo，而不是 mercurius。但是 Apollo GraphQL 主图联邦 Mercurius GraphQL 子图，一点问题也没有，非常丝滑，详见 <a href=\"https://github.com/Jeff-Tian/serverless-space/commit/ac3510b0b2a7ffcba78bc5e571b11462d7ec5760\">https://github.com/Jeff-Tian/serverless-space/commit/ac3510b0b2a7ffcba78bc5e571b11462d7ec5760</a> 这个提交：<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1668352697296-9c522fbe-9a18-4f55-b710-bd2767209c51.png#averageHue=%232a2f38&#x26;clientId=u68a907de-7840-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=662&#x26;id=ufd557c9e&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1324&#x26;originWidth=2572&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=378466&#x26;status=done&#x26;style=none&#x26;taskId=u161330fc-83c5-4c71-a901-c876fb89d24&#x26;title=&#x26;width=1286\" alt=\"image.png\"></p>\n<p><a name=ppIXb></a></p>\n<h1>最终效果</h1>\n<p>如前面的成果演示，新联邦进来的 GraphQL 工作在 /gateway 路径，与原有 GraphQL 服务并行不悖。</p>\n<p><a name=rchUG></a></p>\n<h1>下一步待做事项</h1>\n<p>哈德韦小程序可以顺利对接 uni-orders 服务了！并且这篇文章的链接可以补充回 <a href=\"https://reveal-js-lac.vercel.app/#/5/2\">https://reveal-js-lac.vercel.app/#/5/2</a> 了，是一个活生生的例子。</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"Made with Stackbit.","url":"https://www.stackbit.com","style":"link","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}