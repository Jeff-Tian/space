{"componentChunkName":"component---src-templates-post-js","path":"/posts/shmd9d/","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/shmd9d","relativePath":"posts/shmd9d","frontmatter":{"title":"纯 webpack 项目，配置 mock 模式","stackbit_url_path":"posts/shmd9d","date":"2019-11-02T07:45:29","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<p>如《<a href=\"https://www.yuque.com/tianjie-cjnre/sldmka/xo3zza\">前端开发的正确姿势</a>》所述，前后端分离开发，并行任务时，前端需要使用到 mock 模式。<br />如果使用 umi 项目，自带 mock 模式；这篇文章给出一个非 umi 项目的纯 webpack 例子，说明如何进行 mock 模式配置。<br />同《<a href=\"https://www.yuque.com/tianjie-cjnre/sldmka/xo3zza\">前端开发的正确姿势</a>》所述，这里也要用到 devServer 配置，具体来说，在 setup 里配置 mock 返回的数据，再通过一个 proxy 来实现在 mock 模式下向 mock 接口发起请求：</p>\n<p>javascript\ndevServer: {\nsetup: app => {\napp.get(/api/<em>, (req, res) => {\nsetTimeout(() => {\nres.json({ custom: mock response });\n}, 3000);\n});\n},\nproxy: process.env.MOCK ? {\n/api: {\ntarget: <a href=\"http://localhost:3333/api\">http://localhost:3333/api</a>,\nchangeOrigin: true\n}\n}/</em> mock 模式 <em>/ : {\n/api: {\ntarget: <a href=\"https://dev.example.com\">https://dev.example.com</a>,\nchangeOrigin: true,\nwithCredentials: true,\nheaders: {\nCookie:\n}\n}\n} /</em> dev 模式 */\n}</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","author":"@zizhujy","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"Made with Stackbit.","url":"https://www.stackbit.com","style":"link","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[],"slicesMap":{}}