{"componentChunkName":"component---src-templates-post-js","path":"/posts/SQL-中-INSERT-语句的语法/","result":{"data":{"sitePage":{"id":"SitePage /posts/SQL-中-INSERT-语句的语法/"}},"pageContext":{"url":"/posts/SQL-中-INSERT-语句的语法/","relativePath":"posts/SQL-中-INSERT-语句的语法.md","relativeDir":"posts","base":"SQL-中-INSERT-语句的语法.md","name":"SQL-中-INSERT-语句的语法","frontmatter":{"title":"SQL 中 INSERT 语句的语法","stackbit_url_path":"posts/SQL-中-INSERT-语句的语法","date":"2010-03-24 02:45:04","excerpt":"","comments_count":0,"positive_reactions_count":0,"tags":[null],"canonical_url":"https://be-net.azurewebsites.net/post/2010/03/24/SQL-中-INSERT-语句的语法","template":"post"},"html":"<pre><code>    &#x3C;p>INSERT 语句的整体语法结构如下所示：&#x3C;/p>\n</code></pre>\n<pre class=\"brush: sql\">INSERT [TOP (&lt;expression&gt;) [PERCENT]] [INTO] &lt;tabular object&gt; [(&lt;column list&gt;]\n[OUTPUT &lt;output clause&gt;]\n{VALUES (&lt;data values&gt; [,(&lt;data values&gt;] [, ...n]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| &lt;table source&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| EXEC &lt;procedure&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| DEFAULT VALUES\n</pre>\n<p>这个结构看起来有些繁杂，它的更基本的语法结构如下：</p>\n<pre class=\"brush: sql\">INSERT [INTO] &lt;table&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[(&lt;column list&gt;)]\nVALUES (&lt;data values&gt;) [, (&lt;data values&gt;)] [, ...n]</pre>\n<p>INTO 关键字，是可选的。它纯粹只是为了增加可读性而存在的。</p>\n<p>在 SQL Server 2008 中，可以一次插入多行。要实现这点，只需要添加额外的用逗号分隔的插入值，如下所示：</p>\n<pre class=\"brush: sql\">INSERT INTO Sales \n        (StoreCode, OrderNumber, OrderDate, Quantity, Terms, TitleID) \nVALUES \n        ('TST2', 'TESTORDER2', '01/01/1999', 10, 'NET 30', 1234567), \n        ('TST2', 'TESTORDER3', '02/01/1999', 10, 'NET 30', 1234567);\n</pre>\n<p>在SQL Server 2008之前，要想多行插入，客户端应用程序必须为要插入的每条数据行单独发出插入命令。不过也有其他需要开发人员思考和努力后才能想到的方法，比如可以使用下面这个变通的方法来实现一次多行插入：</p>\n<pre class=\"brush: sql\">INSERT INTO Sales \n        (StoreCode, OrderNumber, OrderDate, Quantity, Terms, TitleID) \nSELECT 'TST2', 'TESTORDER4', '01/01/1999', 10, 'NET 30', 1234567 \nUNION \nSELECT 'TST2', 'TESTORDER5', '02/01/1999', 10, 'NET 30', 1234567 \n</pre>\n<p>将别的表中的已有数据插入到指定的表中的示例：</p>\n<pre class=\"brush: sql\">/* This next statement is going to use code to change the \"current\" database \n** to AdventureWorks2008. This makes certain, right in the code that we are \n** going to the correct database. \n*/ \n<p>USE AdventureWorksLT2008;</p>\n<p>/* This next statement declares our working table.\n** This particular table is actually a variable we are declaring on the fly.\n*/</p>\n<p>DECLARE @MyTable Table (\nSalesOrderID        int,\nCustomerID                char(5)\n);</p>\n<p>/* Now that we have our table variable, we're ready to populate it with data\n** from our SELECT statement. Note that we could just as easily insert the\n** data into a permanent table (instead of a table variable).\n*/\nINSERT INTO @MyTable\nSELECT SAlesOrderID, CustomerID\nFROM AdventureWorksLT2008.SalesLT.SalesOrderHeader ;</p>\n<p>-- Finally, let's make sure that the data was inserted like we think\nSELECT *\nFROM @MyTable;\n</pre></p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"Made with Stackbit.","url":"https://www.stackbit.com","style":"link","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}