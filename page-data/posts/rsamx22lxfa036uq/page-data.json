{"componentChunkName":"component---src-templates-post-js","path":"/posts/rsamx22lxfa036uq/","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/rsamx22lxfa036uq","relativePath":"posts/rsamx22lxfa036uq","frontmatter":{"title":"【Caddyfile】使用 caddy 做反向代理，超级好用！","stackbit_url_path":"posts/rsamx22lxfa036uq","date":"2023-04-25T11:37:05","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<p>经常会碰到一些项目，其服务虽然在线上是通过同一个域名公开访问的，但是开发时，却是由多个不同的子项目组成的。在本地可以单独启动单独测试，一般是通过端口区分。在本地联调时，不想单独做很复杂的配置的话，就需要模拟线上环境，在同一个端口下把多个项目跑起来。这就需要用到反向代理。</p>\n<p>假设有两个项目，单独启动时，分别运行在 5001 和 5003 端口，但是现在希望在本地能够通过 <a href=\"https://local.dev.example.com:5000\">https://local.dev.example.com:5000</a> 来访问，其中 /client/* 指向 5003 项目，而其他路由指向 5001 端口。\n<a name=It1G5></a></p>\n<h1>域名</h1>\n<p>在本地，可以配置一个 hosts （/etc/hosts）来模拟线上环境：\ncsharp\n127.0.0.1\tlocalhost\n255.255.255.255\tbroadcasthost\n::1             localhost</p>\n<p>127.0.0.1 local.dev.example.com</p>\n<p><a name=vA2b1></a></p>\n<h1>用 docker compose nginx 做反向代理</h1>\n<p>当然也可以用 nginx，如果不想安装和配置，建议使用 Docker compose 方案：</p>\n<p>yaml\nversion: 3.4</p>\n<p>services:\nlocalproxy:\nbuild:\ncontext: ./LocalProxy\ndockerfile: Dockerfile\nports:\n- 5000:80\nnetworks:\ndefault:\naliases:\n- local.dev.example.com</p>\n<pre><code>client:\nbuild:\n\tcontext: .\n\tdockerfile: client/Dockerfile\nports:\n\t- 5003:80\n</code></pre>\n<p>server:\nbuild:\ncontext: .\ndockerfile: server/Dockerfile\nports:\n- 5001:80</p>\n<p>networks:\ndefault:\nname: example_network</p>\n<p>以上，通过 docker compose up 启动后，将 server 项目的 5001 映射到 80 端口，而 client 项目的 5003 也映射到 80 端口。而反向代理服务将 5000 映射到 80 端口。这样就可以通过 <a href=\"https://local.dev.example.com:5000\">https://local.dev.example.com:5000</a> 的方式访问到 client 和 server 了。</p>\n<p>client 和 server 的 Dockerfile 根据具体的项目来写，而 localproxy 的 Dockerfile 是基于 nginx 的，内容如下：</p>\n<p>dockerfile\nFROM nginx:alpine\nCOPY nginx.conf /etc/nginx/nginx.conf\nRUN apk add --update openssl &#x26;&#x26;\nrm -rf /var/cache/apk/*\nRUN mkdir -p /etc/nginx/ssl/certs\nRUN mkdir -p /etc/ssl/private/\nRUN openssl req -x509 -nodes -days 365 -subj /C=CA/ST=QC/O=Example, Inc./CN=local.dev.example.com -addext subjectAltName=DNS:local.dev.example.com -newkey rsa:2048 -keyout /etc/ssl/private/nginx-selfsigned.key -out /etc/ssl/certs/nginx-selfsigned.crt;\nEXPOSE 80\nEXPOSE 443\nEXPOSE 5000</p>\n<p>虽然完全可行，但是比较麻烦。如果不想用 Docker compose 也不想用 nginx，就可以使用 Caddy 来完成同样的事情：</p>\n<p><a name=xs0Xh></a></p>\n<h1>用 caddy 来做反向代理</h1>\n<p>同样也需要在 hosts 里增加域名。</p>\n<p><a name=iYtvW></a></p>\n<h2>安装 caddy</h2>\n<p>如果没有安装，可以通过 brew install caddy（Mac）或者 choco install caddy（Windows）安装 caddy。</p>\n<p><a name=eBYiQ></a></p>\n<h2>添加 Caddyfile</h2>\n<p>在项目的根目录下新建 Caddyfile 文件，内容如下：\ndockerfile\n<a href=\"https://local.dev.example.com:5000\">https://local.dev.example.com:5000</a> {</p>\n<pre><code>tls internal\n\nreverse_proxy /client/* http://local.dev.example.com:5003\n\nreverse_proxy http://local.dev.example.com:5001\n</code></pre>\n<p>}</p>\n<p><a name=mAc4q></a></p>\n<h2>运行 caddy</h2>\n<p>shell\ncaddy run</p>\n<p>分别启动项目后，同样可以使用 <a href=\"https://local.dev.example.com:5000\">https://local.dev.example.com:5000</a> 来访问 server 和 client 了，效果和 nginx 方案完全一样！</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","author":"@zizhujy","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"Made with Stackbit.","url":"https://www.stackbit.com","style":"link","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}}}},"staticQueryHashes":[],"slicesMap":{}}