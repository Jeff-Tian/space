{"componentChunkName":"component---src-templates-post-js","path":"/posts/sycunq","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/sycunq","relativePath":"posts/sycunq","frontmatter":{"title":"Free Arch：将 Koa 服务部署到 Vercel","stackbit_url_path":"posts/sycunq","date":"2022-07-15T11:40:07","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<p>多年前写的 Koa Js 服务，本来跑在服务器上，要一点花销。后来决定薅各大云厂商的羊毛，就将它容器化了，跑在免费的 Okteto 提供的 K8S 环境里。但是最近 Okteto 提供的 url 访问不了了，虽然发了邮件请 Okteto 帮忙协助，但是本着狡兔三窟的原则，决定再部署一个实例到其他的服务上。</p>\n<p>于是将目光瞄准到 Vercel，Vercel 提供免费的 Serverless Function，虽然类似 AWS Lambda，但又不太一样，所以记录一下。如果只是将 koa 服务部署到 AWS lambda，那么只需要使用一个 serverless-http 的框架转化一下就好。关于薅 AWS Lambda 羊毛的文章已经写过多篇，参见：</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/415577362\">https://zhuanlan.zhihu.com/p/415577362</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/351889768\">https://zhuanlan.zhihu.com/p/351889768</a></p>\n<p><a name=cAIQv></a></p>\n<h1>Koa Js</h1>\n<p>Koa Js 是由 Express Js 的原班人马设计的 Web 框架，更小巧但是不再捆绑任何中间件，这一点也是我在将它部署到 Vercel 时碰到坑的原因。尽管它比 Express 新，但 Express.js 仍然更加流行，也许这也是 Vercel 内置对 Express.js 的支持的原因吧。</p>\n<p>Express Js 目前的星标数在 57.6 K，而 koa 的星标数大约是它的一半多一点：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1657882249908-9d4e4afc-7394-4cf7-9c91-d0b067f0af37.png#clientId=ue70db6da-e102-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=304&#x26;id=u006d654d&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=608&#x26;originWidth=1962&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=150036&#x26;status=done&#x26;style=none&#x26;taskId=u5a43f28d-0663-416c-8d5a-48c1923522e&#x26;title=&#x26;width=981\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1657882236183-0cc43e29-7de2-45e9-81f0-159a95833e21.png#clientId=ue70db6da-e102-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=289&#x26;id=u3e6b913c&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=578&#x26;originWidth=1946&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=109198&#x26;status=done&#x26;style=none&#x26;taskId=u4085207f-dbf5-44b9-b80b-fbc9ff99f1b&#x26;title=&#x26;width=973\" alt=\"image.png\"></p>\n<p>看了一下 koa 的贡献者列表，我居然也名列其中呢：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1657882020421-27b0ac7f-5a80-4294-a08e-57505ad1d63b.png#clientId=ue70db6da-e102-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=698&#x26;id=u85382d9a&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1396&#x26;originWidth=1376&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=195603&#x26;status=done&#x26;style=none&#x26;taskId=u327a07ee-b3fb-4487-81fc-97ccee7789a&#x26;title=&#x26;width=688\" alt=\"image.png\">\n<a name=UAjpv></a></p>\n<h1>Vercel</h1>\n<p>Vercel 是一个用来部署前端应用的云平台，但也可以用来构建轻量级的事件驱动 API，并部署到它们的全球边缘网络。\n<a name=jdBuo></a></p>\n<h1>Vercel 的 Serverless Function 有些特别</h1>\n<p>传统 API 托管在运行着的服务器上。当应用需要扩展时，希望更低成本、更灵活、更安全、资源快速分配并启动等等，使用传统服务器很难做到。但是用 Serverless 就比较容易，因为仅仅是一些后端代码片段在无状态环境中运行着，它们由事件（比如 http 请求）触发并只在一次调用中存活。这可以全部自动化并且在毫秒级扩展。更好的是，不用再维护服务器了。开发者只需要关注业务逻辑——返回值的函数。</p>\n<p>如果我们部署一个服务器程序到 Serverless Function，我们就为每个请求执行了一个完整的服务器实现，这是一个反模式，因为 Serverless 函数仍然是函数，只应服务于一个目的。将服务器程序部署在 Serverless Function 上，相当于强行将庞大的逻辑混杂在一个函数里。虽然这是一个反模式，但是羊毛在那里，不得不薅。对于有钱的企业级服务器程序，还是建议绕道。</p>\n<p>Vercel 的 Serverless Function 和 AWS Lambda 很像，比如都是一个对外暴露 handler 函数的模块，但是特别之处在于其 handler 签名不一样。AWS Lambda 的 handler：</p>\n<p>javascript\nexport default const handler = (event, context) => Hello World</p>\n<p>但是 Vercel 的 handler 接收一个 req 和 res 参数（<a href=\"https://github.com/Jeff-Tian/v/blob/master/api/test.js\">https://github.com/Jeff-Tian/v/blob/master/api/test.js</a>）：\njavascript\nexport default function handler(req, res) {\nconst { name = World } = req.query;\nreturn res.send(Hello ${name}!);\n}</p>\n<p><a href=\"https://v.pa-pa.me/api/test?name=Jeff\">https://v.pa-pa.me/api/test?name=Jeff</a>：<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1657883584815-5c5e5cc9-16ea-4e3b-bf85-ffa72c68a420.png#clientId=ue70db6da-e102-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=134&#x26;id=u15e1767b&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=268&#x26;originWidth=870&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=25091&#x26;status=done&#x26;style=none&#x26;taskId=u44b45059-43dc-4246-a58e-7bacf85447e&#x26;title=&#x26;width=435\" alt=\"image.png\"></p>\n<p>这签名看起来很像是 Express.js 中间件，有意思的是，它真的支持完整的 Express.js 应用，只需要将入口文件放在 /api/index.js 里即可。</p>\n<p><a name=OlbX1></a></p>\n<h1>Vercel Serverless Function 对 Koa 的支持</h1>\n<p>经过实验，Vercel Serverless Function 是不支持 Koa.js 应用的。因为它的签名和 (ctx, next) => ctx.body = Hello 这种 Koa.js 风格就不相容。</p>\n<p><a name=On49w></a></p>\n<h1>koa-to-express</h1>\n<p>想将 Koa 应用搬到 Vercel Serverless Function，但是不希望改已有的 Koa 代码，最自然的方式莫过于增加一个 adapter，将 koa 风格的中间件函数适配成 express.js 的中间件函数。于是找到了 koa-to-express 这个库。</p>\n<p><a name=EMQew></a></p>\n<h2>增加 /api/index.js 文件</h2>\n<p>该 index.js 引用 Koa 应用的入口文件，并将它的中间件做个转换，伪装成一个 Express.js 应用。这样，原来的 Koa 应用在服务器环境中仍然照常运行，同时又可以在 Vercel Serverless Function 环境里运行。如果再使用 serverless-http，再在 AWS Lambda 里部署一个适配，那么就是名副其实的“狡兔三窟”了。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1657884240097-87917261-4f4b-46c8-abc1-5c67490544a6.png#clientId=ue70db6da-e102-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=784&#x26;id=u45aa798f&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1568&#x26;originWidth=932&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=257101&#x26;status=done&#x26;style=none&#x26;taskId=u10cff011-f402-421d-a8ac-a1cda9dd936&#x26;title=&#x26;width=466\" alt=\"image.png\"></p>\n<p><a name=a44cG></a></p>\n<h2>修复 koa-to-express 的一个 BUG</h2>\n<p>其实没有那么顺利，由于原 Koa 应用使用了  koa-router 这个中间件，触发了 koa-to-express 的一个 BUG。于是只能 Fork 了 koa-to-express ，在自己的版本中做了修复。虽然给原作者提交了 PR，但在他合并并发新版之前，我得临时使用自己的版本，于是要对 package.json 做个修改，在安装 koa-to-express 时，从自己的仓库里下载代码：</p>\n<p><a href=\"https://github.com/Jeff-Tian/v/commit/cd11bf4f7100fd61ef9dda98397eb255b764a396#diff-7ae45ad102eab3b6d7e7896acd08c427a9b25b346470d7bc6507b6481575d519\">https://github.com/Jeff-Tian/v/commit/cd11bf4f7100fd61ef9dda98397eb255b764a396#diff-7ae45ad102eab3b6d7e7896acd08c427a9b25b346470d7bc6507b6481575d519</a></p>\n<p>package.json:\ndiff</p>\n<ul>\n<li>koa-to-express: ^3.1.4,</li>\n</ul>\n<ul>\n<li>koa-to-express: git+<a href=\"https://github.com/jeff-tian/koa-to-express.git\">https://github.com/jeff-tian/koa-to-express.git</a>,</li>\n</ul>\n<p>给它们的 PR 链接：<a href=\"https://github.com/xingxingted/koa-to-express/pull/10/files\">https://github.com/xingxingted/koa-to-express/pull/10/files</a></p>\n<p><a name=ZL0DR></a></p>\n<h2>完成 /api/index.js</h2>\n<p>最终的 /api/index.js 文件如下：<br /><a href=\"https://github.com/Jeff-Tian/v/blob/cd11bf4f7100fd61ef9dda98397eb255b764a396/api/index.js\">https://github.com/Jeff-Tian/v/blob/cd11bf4f7100fd61ef9dda98397eb255b764a396/api/index.js</a>\njavascript\nconst k2e = require(koa-to-express);</p>\n<p>process.env.ROUTER_PREFIX = /api;</p>\n<p>const app = require(../app);</p>\n<p>const expressApp = require(express)();</p>\n<p>app.middleware.map(m => {\nexpressApp.use(k2e(m));\n})</p>\n<p>module.exports = expressApp;</p>\n<p><a name=yG9jp></a></p>\n<h2>重定向</h2>\n<p>Vercel Serverless Function 默认将 /api/xxx 路由到 /api/xxx.js，所以 /api/xy/z，就不会被 /api/index 处理，所以需要增加一个 vercel.json 文件，将所有 /api/ 下的请求，重定向到 index.js：</p>\n<p>json\n{\nrewrites: [{ source: /api/(.*), destination: /api }]\n}</p>\n<p><a name=OUec1></a></p>\n<h1>完成</h1>\n<p>效果和在服务器上运行 koa 一模一样：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1657885170477-54f5c498-3e02-49ee-9361-dedb2ecd3a9e.png#clientId=ue70db6da-e102-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=336&#x26;id=ub615d29f&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=672&#x26;originWidth=1330&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=83208&#x26;status=done&#x26;style=none&#x26;taskId=ueabce186-0bd6-4716-b5d9-0d7fc19f163&#x26;title=&#x26;width=665\" alt=\"image.png\"></p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"Full Stack Developer, good at OAuth 2.0","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"本站源码","url":"https://github.com/Jeff-Tian/space","style":"link","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}