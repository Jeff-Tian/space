{"componentChunkName":"component---src-templates-post-js","path":"/posts/pkaygb","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/pkaygb","relativePath":"posts/pkaygb","frontmatter":{"title":"使用万能 BFF，将语雀文章 GraphQL 服务化","stackbit_url_path":"posts/pkaygb","date":"2021-09-29T15:42:30","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<p>几天前，我似乎吹了个牛，详见《<a href=\"https://zhuanlan.zhihu.com/p/412196725\">一顿操作猛如虎，部署一个万能 BFF</a>》。我号称部署了一个万能 BFF，即将 gatsby js 的本地开发用的 GraphQL 服务器，部署在了 AWS lambda上，从而可以借助 gatsby js 丰富的插件，实现所有数据源的对接，而不用再次开发（有点类似低代码的效果）。</p>\n<blockquote>\n<p><strong>小科普： AWS lambda，本质上是一个不需要编排的容器服务。</strong></p>\n</blockquote>\n<blockquote>\n<p>—— 现学现卖，今天去 AWS 听 Stan Lin 老师说的<br /><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1632927183007-34134a49-1d4c-4560-99df-0171922472c8.png#clientId=u437bc7fc-0106-4&#x26;from=paste&#x26;height=464&#x26;id=u1b16ee0f&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=928&#x26;originWidth=1916&#x26;originalType=binary%E2%88%B6=1&#x26;size=321017&#x26;status=done&#x26;style=none&#x26;taskId=u71913a01-406e-407a-9bea-b5c89585743&#x26;width=958\" alt=\"image.png\">\n<img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1632927203638-0a079349-a6ee-46b0-af48-0a00ed9fa33d.png#clientId=u437bc7fc-0106-4&#x26;from=paste&#x26;height=720&#x26;id=ufd9c5e3b&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1440&#x26;originWidth=1080&#x26;originalType=binary%E2%88%B6=1&#x26;size=1895119&#x26;status=done&#x26;style=none&#x26;taskId=ue5154851-7bfa-4252-8542-c3739dd4aae&#x26;width=540\" alt=\"image.png\"></p>\n</blockquote>\n<p>吹完牛，还提前预告后面将用真实案例，讲解利用该万能 BFF 的使用场景。</p>\n<p>今天就来一个真实场景，低代码实现语雀文章的 GraphQL 服务。尽管知道完全可行，但是真正搭建出来还是挺激动的。</p>\n<p><a name=yBzUc></a></p>\n<h1><a href=\"https://jqp5j170i6.execute-api.us-east-1.amazonaws.com/dev/gatsby/graphql?query=%23%20Welcome%20to%20GraphiQL%0A%23%0A%23%20GraphiQL%20is%20an%20in-browser%20tool%20for%20writing%2C%20validating%2C%20and%0A%23%20testing%20GraphQL%20queries.%0A%23%0A%23%20Type%20queries%20into%20this%20side%20of%20the%20screen%2C%20and%20you%20will%20see%20intelligent%0A%23%20typeaheads%20aware%20of%20the%20current%20GraphQL%20type%20schema%20and%20live%20syntax%20and%0A%23%20validation%20errors%20highlighted%20within%20the%20text.%0A%23%0A%23%20GraphQL%20queries%20typically%20start%20with%20a%20%22%7B%22%20character.%20Lines%20that%20start%0A%23%20with%20a%20%23%20are%20ignored.%0A%23%0A%23%20An%20example%20GraphQL%20query%20might%20look%20like%3A%0A%23%0A%23%20%20%20%20%20%7B%0A%23%20%20%20%20%20%20%20field(arg%3A%20%22value%22)%20%7B%0A%23%20%20%20%20%20%20%20%20%20subField%0A%23%20%20%20%20%20%20%20%7D%0A%23%20%20%20%20%20%7D%0A%23%0A%23%20Keyboard%20shortcuts%3A%0A%23%0A%23%20%20Prettify%20Query%3A%20%20Shift-Ctrl-P%20(or%20press%20the%20prettify%20button%20above)%0A%23%0A%23%20%20%20%20%20Merge%20Query%3A%20%20Shift-Ctrl-M%20(or%20press%20the%20merge%20button%20above)%0A%23%0A%23%20%20%20%20%20%20%20Run%20Query%3A%20%20Ctrl-Enter%20(or%20press%20the%20play%20button%20above)%0A%23%0A%23%20%20%20Auto%20Complete%3A%20%20Ctrl-Space%20(or%20just%20start%20typing)%0A%23%0A%0A%0A%0A%7B%20%0A%20%20yuque(id%3A%20%2253296538%22)%20%7B%0A%20%20%20%20id%0A%20%20%20%20title%0A%20%20%20%20description%0A%20%20%20%20body%0A%20%20%7D%0A%20%20%0A%20%20allYuque%20%7B%0A%20%20%20%20nodes%20%7B%0A%20%20%20%20%20%20id%0A%20%20%20%20%20%20title%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D\">在线演示</a></h1>\n<p><a href=\"https://jqp5j170i6.execute-api.us-east-1.amazonaws.com/dev/gatsby/graphql\">https://jqp5j170i6.execute-api.us-east-1.amazonaws.com/dev/gatsby/graphql</a></p>\n<p><a name=W2coR></a></p>\n<h1>截图展示</h1>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1632928664453-58877b8f-38bc-4e3c-8963-5e3b31e252da.png#clientId=u437bc7fc-0106-4&#x26;from=paste&#x26;height=770&#x26;id=u7a6a9409&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1540&#x26;originWidth=2686&#x26;originalType=binary%E2%88%B6=1&#x26;size=499240&#x26;status=done&#x26;style=none&#x26;taskId=ubbf4a866-564f-486b-a0db-f9b2a046ab0&#x26;width=1343\" alt=\"image.png\"></p>\n<p><a name=LrXkb></a></p>\n<h1>语雀</h1>\n<p>语雀是一款相当优秀的在线文档编辑工具，我最喜欢它对文本绘图的支持。我前些年开始使用语雀来记录自己的想法，并且同步到自己的博客： <a href=\"https://jeff-tian.jiwai.win\">https://jeff-tian.jiwai.win</a> 。这个博客站点其实就是利用 gatsby js 生成的静态网站。它使用了 @jeff-tian/gatsby-source-yuque 这个插件读取语雀的文章。现在要做的，就是在万能 BFF 里重用该插件，将语雀文章以 GraphQL 的服务暴露出来。</p>\n<p>在万能 BFF 里引入 @jeff-tian/gatsby-source-yuque</p>\n<p>shell\nyarn add @jeff-tian/gatsby-source-yuque</p>\n<p><a name=niprv></a></p>\n<h1>配置（低代码开发）</h1>\n<p>要做到纯配置，还得对万能 BFF 做一点改进，不过这留作以后优化，现在可以做一丢丢开发，主要是将语雀的用户名和空间名灌进系统里。因此在万能 BFF 项目里，添加一个文件夹，命名为 yuque，定义一下 schema，以及实现 read 和 all 接口，从而实现全量查询和使用 id 查询单个文章。</p>\n<p>typescript\nimport * as Joi from @hapi/joi\nimport {sourceNodes} from @jeff-tian/gatsby-source-yuque/gatsby-node</p>\n<p>const schema = {\nid: Joi.number(),\ntitle: Joi.string(),\ndescription: Joi.string(),\ncustom_description: Joi.string(),\nupdated_at: Joi.string(),\ncreated_at: Joi.string(),\nslug: Joi.string(),\nword_count: Joi.number(),\ncover: Joi.string(),\nbody: Joi.string(),\n}</p>\n<p>let articles = null</p>\n<p>const readArticles = async () => {\nif (articles) {\nreturn articles\n}</p>\n<pre><code>articles = await sourceNodes({\n    reporter: {\n        panic: console.error,\n        info: console.log,\n        error: console.error\n    },\n    actions: {\n        createNode: () => ({})\n    },\n    emitter: {\n        on: console.log\n    },\n    createNodeId: () => ...,\n    createContentDigest: () => ...\n}, {login: tian-jie, repo: blog})\n\nreturn articles\n</code></pre>\n<p>}</p>\n<p>const read = async (context, id) => {\nconst articles = await readArticles()</p>\n<pre><code>return articles.filter(a => String(a.id) === String(id))[0]\n</code></pre>\n<p>}</p>\n<p>const all = async () => {\nreturn await readArticles()\n}</p>\n<p>export {schema, read, all}</p>\n<p><a name=kiCSN></a></p>\n<h1>语雀 Token</h1>\n<p>其实，大功基本告成，但是直接部署运行，会碰到 401 错误。要解决这个问题，需要在语雀控制台申请一个令牌。但是，这个令牌无论如何不能写进代码里，因此，需要再对 serverless.yml 做个改造：</p>\n<p>yaml\nfunctions:\ngatsby:\nenvironment:\nSERVERLESS_EXPRESS_PLATFORM: aws\nYUQUE_TOKEN: ${env:YUQUE_TOKEN}</p>\n<p>plugins:\n- serverless-dotenv-plugin</p>\n<p>可以看出，需要用到 serverless-dotenv-plugin 插件，所以安装一下：</p>\n<p>shell\nyarn add -D serverless-dotenv-plugin</p>\n<p>这样，再次执行 YUQUE_TOKEN=xxx serverless deploy 就能安全地将语雀令牌发布到 AWS lambda 的环境变量里。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1632929657122-76907c0e-234e-40ed-bf37-c85a3fffd1cf.png#clientId=u437bc7fc-0106-4&#x26;from=paste&#x26;height=724&#x26;id=ua3cf780f&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1448&#x26;originWidth=2418&#x26;originalType=binary%E2%88%B6=1&#x26;size=263560&#x26;status=done&#x26;style=none&#x26;taskId=u68bc61b6-e2b3-4575-b277-6e28827dedc&#x26;width=1209\" alt=\"image.png\"></p>\n<p><a name=jFyZD></a></p>\n<h1>总结</h1>\n<p>通过在万能 BFF 里重用 @jeff-tian/gatsby-source-yuque 插件，低代码实现语雀文章的 GraphQL 服务。</p>\n<p><strong>感兴趣的同学请持续关注，后面会继续分享更多的万能 BFF 实际使用案例，以及在更多客户端（比如小程序中）使用该万能 BFF 的例子。</strong></p>\n<p>微信公众号链接不能点的问题，可以点击“阅读原文”，再在原文中点击链接。</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"Made with Stackbit.","url":"https://www.stackbit.com","style":"link","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}