{"componentChunkName":"component---src-templates-post-js","path":"/posts/使用静态类的构造函数，保证某些操作在整个程序运行过程中只运行一次/","result":{"data":{"sitePage":{"id":"SitePage /posts/使用静态类的构造函数，保证某些操作在整个程序运行过程中只运行一次/"}},"pageContext":{"url":"/posts/使用静态类的构造函数，保证某些操作在整个程序运行过程中只运行一次/","relativePath":"posts/使用静态类的构造函数，保证某些操作在整个程序运行过程中只运行一次.md","relativeDir":"posts","base":"使用静态类的构造函数，保证某些操作在整个程序运行过程中只运行一次.md","name":"使用静态类的构造函数，保证某些操作在整个程序运行过程中只运行一次","frontmatter":{"title":"使用静态类的构造函数，保证某些操作在整个程序运行过程中只运行一次","stackbit_url_path":"posts/使用静态类的构造函数，保证某些操作在整个程序运行过程中只运行一次","date":"2013-06-26 21:26:59.4572812","excerpt":"","comments_count":0,"positive_reactions_count":0,"tags":["单例","静态类"],"canonical_url":"https://be-net.azurewebsites.net/post/2013/06/26/使用静态类的构造函数，保证某些操作在整个程序运行过程中只运行一次","template":"post"},"html":"<h2><font color=\"#9b00d3\">问题：</font></h2>  <p>有一些初始化操作，需要在整个程序运行过程中，只运行一次。除了使用单例模式，或者在 Main() 中实现，还有其他方法么？</p>  <p>比如，有一个任务处理程序，每次点击Run按钮，程序就会调用一个静态类StepsProcessor.cs中的ProcessSteps()方法依次对指定的任务列表进行处理。这个静态类会发布三个事件：</p>  <ol>   <li>开始执行任务列表 </li>    <li>全部任务执行成功 </li>    <li>某个任务执行失败 </li> </ol>  <p><a href=\"https://raw.githubusercontent.com/Jeff-Tian/blogengine.net/master/Source/BlogEngine/BlogEngine.NET/App_Data/files/image_619.png\"><img title=\"使用静态类的构造函数，让某些操作在整个程序运行过程中只运行一次\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"使用静态类的构造函数，让某些操作在整个程序运行过程中只运行一次\" src=\"https://raw.githubusercontent.com/Jeff-Tian/blogengine.net/master/Source/BlogEngine/BlogEngine.NET/App_Data/files/image_thumb_308.png\" width=\"614\" height=\"362\" /></a></p>  <p>针对这些事件，有多个事件订阅者，会在这些事件发生时作一些动作，比如发邮件。在静态类 StepsProcessor.cs 中，有静态方法 RegisterEvents() 将所有的事件订阅者与这些事件绑定起来。原来的代码将Run按钮的Click事件中，调用了 StepsProcessor.RegisterEvents() 事件，这样导致一个问题，当第二次点击Run按钮时，就会将已经绑定的事件订阅者再次绑定，于是对于同一事件，同样的订阅者，会被执行两次（比如，会连续发两次邮件，报告“开始执行任务列表”，也会连续发两次邮件，报告“全部任务执行成功”）；当第二轮任务全部跑完，再次点击Run按钮开始第三轮时，同样的订阅者会被执行三次（比如，连续发送三封同样的邮件）。</p>  <p>如果以最少的代码改动，修正这个逻辑陷呢？</p>  <h2><font color=\"#9b00d3\">原因：</font></h2>  <p>RegisterEvents() 方法，只会遍历所有的事件订阅者，调用它们的订阅方法（Subscribe()），将它们与事件发布者绑定起来。而在绑定之前，并不检查是否已经绑定过，就导致了同一个订阅者，会有多个实例与事件发布者相关联。</p>  <h2><font color=\"#9b00d3\">解决方案：</font></h2>  <p>可以将这个初始化操作RegisterEvents()放在静态类StepsProcessor.cs的构造函数中。从而保证这个RegisterEvents()只会被执行一次，而不是每次点击按钮都执行。</p>  <pre class=\"brush: csharp\">    /// <summary>\n    /// A wrapper to run the specified steps.\n    /// </summary>\n    public static class StepsProcessor\n    {\n        static StepsProcessor()\n        {\n            // Should only register the events once during all the lifecycle of this program, \n            // so put it here inside a static constructor:\n            RegisterEvents();\n        }\n\t...\n    }</pre>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"Full Stack Developer, good at OAuth 2.0","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"本站源码","url":"https://github.com/Jeff-Tian/space","style":"link","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}