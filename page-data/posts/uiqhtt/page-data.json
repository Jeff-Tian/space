{"componentChunkName":"component---src-templates-post-js","path":"/posts/uiqhtt","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/uiqhtt","relativePath":"posts/uiqhtt","frontmatter":{"title":"Keycloak vs IdentityServer","stackbit_url_path":"posts/uiqhtt","date":"2022-03-25T05:15:55","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<p>上上上次体验了 IdentityServer 后，不禁陷入了沉思，即它又收费，又没有现成的 UI，那么它的卖点在哪里呢 ……</p>\n<p>以上文章搜集了网上的一些资料，总结了它的一些卖点。今天再来把它和 Keycloak 做一个详细对比，就像之前对比 Keycloak 和 Authing 一样：</p>\n<p>Keycloak 和 IdentityServer 都是开源的提供单点登录与资源访问权限管理服务的身份提供商。对于任何应用来说，用户管理都是最关键的方面。在当今的技术世界里，网络安全是一个热门话题，拥有多重安全凭据集的用户更容易受到网络攻击。所以，使用单一凭据来做权限管理是更好的做法，比如单点登录让用户可以使用同一用户名和密码登录多个应用，用户只需要登录一次即可免登录访问多个应用。由于开源社区正在开发开源的身份提供商服务，从而这种做法越来越流行了。\n<a name=RuZkn></a></p>\n<h1>IdentityServer</h1>\n<p>IdentityServer 是用 .NET Core 写的基于 OpenID Connect 和 OAuth 2.0 的开源（但不免费，需要购买许可证）单点登录软件。做为鉴权服务器，它提供了 JWT 令牌来访问数字资源。支持多种使用方式如 API 鉴权、高度定制化的用户界面以及 API 授权 和基于声明的提供者。它非常灵活、具有高扩展性并且提供自托管能力。同时，支持多种流程和各种联邦身份，比如 Google、Facebook、Twitter 以及更多的社交网络，比如 <a href=\"https://zhuanlan.zhihu.com/p/482103322\">https://zhuanlan.zhihu.com/p/482103322</a> 展示的企业微信等。</p>\n<p><a name=bzv8m></a></p>\n<h1>Keycloak</h1>\n<p>Keycloak 也是一种被广泛使用的鉴权解决方案。它提供了基于 OpenID Connect、OAuth 2.0 以及 SAML 2.0 的身份和权限管理。该免费软件还提供了用户界面来管理用户、角色、配置以及会话。同时，还支持与第三方应用集成，比如 LDAP 和 Active Directory。用户可以利用它的增强伸缩性和可用性做集中化用户管理。而且，它还提供了与很多特性做集成的客户端库，比如社交登录、用户联邦、中心化管理、密码策略、集群以及适配器等。</p>\n<p><a name=czLSR></a></p>\n<h1>对比</h1>\n<p>以下从这几个方面来将 Keycloak 与 IdentityServer 做个比较：</p>\n<p><a name=Ynmcq></a></p>\n<h2>社区地位</h2>\n<p>它们在单点登录软件社区中都拥有良好的声誉。但是在 GitHub 上 Keycloak 的 Star 数量远超 IdentityServer，这可能是由于免费与收费策略导致的 Star 数量悬殊。尽管它们都拥有完整的文档，但是我的感觉是 Keycloak 的文档不如 IdentityServer 的文档易读，这可能也是我得到了好些关于 Keycloak 的付费咨询的原因。<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1648184550156-fd3689a6-9553-4d51-9c32-17004f6d093f.png#clientId=u754128e2-fb01-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=407&#x26;id=ua9d9edb6&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=814&#x26;originWidth=2668&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=309300&#x26;status=done&#x26;style=none&#x26;taskId=u1bbaad96-c7fc-4077-962c-1e5c8f093b8&#x26;title=&#x26;width=1334\" alt=\"image.png\"></p>\n<p><a name=eJaml></a></p>\n<h2>功能特性</h2>\n<p>尽管 Keycloak 和 IdentityServer 都基于 OpenID Connect 和 OAuth 2.0，但是 Keycloak 还使用了另一种标准协议 SAML 2.0. Keycloak 也自带支持自定义的用户界面。它们都自带 Docker 镜像。虽然 Keycloak 的特性更丰富，但是 IdentityServer 相比 Keycloak 超级轻量。</p>\n<p><a name=SOSlS></a></p>\n<h2>技术栈</h2>\n<p>Keycloak 主要使用 Java 编写，夹杂一点 JavaScript、HTML、CSS 等。它有前端部分，使用 AngularJs。IdentityServer 的主要语言是 C#。\n<a name=lqohA></a></p>\n<h2>安全性</h2>\n<p>Keycloak 和 IdentityServer 都有安全机制，但是 IdentityServer 号称更高安全，是面向“OAuth 3.0”的。这也是 IdentityServer 的卖点之一。</p>\n<p><a name=PSsO1></a></p>\n<h1>总结</h1>\n<p>如果要从这两者做个选择，还是得考虑具体的用例。个人感觉 Keycloak 更重，但开发量更少；而 IdentityServer 更轻量，但是由于支持高度定制化，所以有些基本的如用户池管理等等都需要自行开发。当然，也可以使用第三方的，但这又要花费精力考察，或者需要花钱购买。</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"本站源码","url":"https://github.com/Jeff-Tian/space","style":"link","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}