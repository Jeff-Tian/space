{"componentChunkName":"component---src-templates-post-js","path":"/posts/dh981x","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/dh981x","relativePath":"posts/dh981x","frontmatter":{"title":"闭包的妙用——智能数据对象","stackbit_url_path":"posts/dh981x","date":"2022-10-16T09:00:36","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<p><a name=zuLXH></a></p>\n<h1>数学中的闭包</h1>\n<p>数学上说的闭包，说的是对集合（比如实数集合）中的成员进行某一操作（比如加法）时，如果得到的结果总是同一个集合中的某一成员，那么这个集合对这个操作来说就是一个闭包。<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/webp/221736/1665908837495-1d813ae6-24dc-4d26-b207-55090ecde59b.webp#clientId=u70beeefb-e116-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;id=u2aa17406&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=129&#x26;originWidth=293&#x26;originalType=url%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;status=done&#x26;style=none&#x26;taskId=uc689d112-fccf-4af3-bab8-ae33ab139c3&#x26;title=\" alt=\"\">\n<a name=D7say></a></p>\n<h1>编程里的闭包</h1>\n<p>闭包就是一个特殊的高阶函数，它返回的函数里，存在对外层函数的变量的引用，导致这些变量，永远不会被垃圾回收。至于为什么叫闭包，不用 太过纠结，也不要和数学里的“闭包”产生联系，因为如果从数学“闭包”意义来看编程世界里的闭包，那么编程世界里的“闭包”应该叫“开包”才对，因为上述的导致不会被垃圾回收的变量，其实是在包的范围里打了一个洞！参见上图，编程世界里的“闭包”其实对应了右半部分（数学中的开包）。</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxNTk3ODgxNA==%E2%88%A3=2247483701&#x26;idx=1&#x26;sn=c3e2e1189e42f9d53e34506393124ad9&#x26;chksm=9bfa9964ac8d1072468a1b71e8c5e0970a3a2f539aaee225dfbdc217674fa38aa79fb6cfd86b&#x26;scene=21#wechat_redirect\">https://mp.weixin.qq.com/s?__biz=MzAxNTk3ODgxNA==∣=2247483701&#x26;idx=1&#x26;sn=c3e2e1189e42f9d53e34506393124ad9&#x26;chksm=9bfa9964ac8d1072468a1b71e8c5e0970a3a2f539aaee225dfbdc217674fa38aa79fb6cfd86b&#x26;scene=21#wechat_redirect</a></p>\n<p><a name=zfhUJ></a></p>\n<h1>用途</h1>\n<p><a href=\"https://zhuanlan.zhihu.com/p/350078310\">https://zhuanlan.zhihu.com/p/350078310</a><br />由于它是高阶函数，执行一次后返回的，仍然是一个函数。这样就延迟了最终函数的执行。这种延迟最终函数执行的特性，可以衍生出多种用途，举几个例子：</p>\n<ul>\n<li>处理高并发的 Promise 模式</li>\n<li>防止多次执行的 Memoize 模式<br /><a href=\"https://zhuanlan.zhihu.com/p/353365352\">https://zhuanlan.zhihu.com/p/353365352</a><br /><a href=\"https://zhuanlan.zhihu.com/p/439222057\">https://zhuanlan.zhihu.com/p/439222057</a><br /><a href=\"https://zhuanlan.zhihu.com/p/553902109\">https://zhuanlan.zhihu.com/p/553902109</a></li>\n<li>**智能数据对象<br />**这个正是今天要讨论的</li>\n</ul>\n<p><a name=f9e13></a></p>\n<h1>智能数据对象</h1>\n<p>Promise 和 Memoize 其实已经很常见了，但是“智能数据对象”，则相对少见。我感觉就是见过，但具体想不起来真正使用到的地方了。今天是在看《计算机程序的构造与解释》一书时，了解到了<strong>智能数据对象</strong>这一个概念，本质上也是一个高阶函数，并且就是一个闭包。</p>\n<p><a href=\"https://sicp.jiwai.win/zh_cn/2.-%E6%9E%84%E9%80%A0%E6%95%B0%E6%8D%AE%E6%8A%BD%E8%B1%A1/2.75.html\">https://sicp.jiwai.win/zh_cn/2.-%E6%9E%84%E9%80%A0%E6%95%B0%E6%8D%AE%E6%8A%BD%E8%B1%A1/2.75.html</a></p>\n<p>在面向对象编程的世界里呆久了，似乎构造函数一定需要构造出一个“坚固”的对象，即有明确属性的对象。比如一个复数类，一定会想着用一个属性去存储其实部，用另一个属性去存储其虚部。就算再添加几个方式，用来分别获取模和幅角，也一定是用 this.x 和 this.y 来进行计算。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/gif/221736/1665910172100-b2203baa-8b63-486c-995b-e0f4e88e190c.gif#clientId=u70beeefb-e116-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;id=ue46b761d&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=217&#x26;originWidth=220&#x26;originalType=url%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;status=done&#x26;style=none&#x26;taskId=u8184bcec-cadb-4a33-ac6b-cfb98d979dc&#x26;title=\" alt=\"\"></p>\n<p>即大致是这样的代码：</p>\n<p><a href=\"https://runkit.com/jeff-tian/class-version-of-complex-numbers\">https://runkit.com/jeff-tian/class-version-of-complex-numbers</a></p>\n<p>javascript\nclass ComplexNumber {\nconstructor(x, y) {\nthis.x = x;\nthis.y = y;</p>\n<pre><code>this.mag = Math.sqrt(this.x * this.x + this.y * this.y);\nthis.ang = Math.atan(y, x);\n</code></pre>\n<p>}</p>\n<p>static fromMagAng(mag, ang) {\nconst x = mag * Math.cos(ang);\nconst y = mag * Math.sin(ang);</p>\n<pre><code>const c = new ComplexNumber(x, y);\nc.mag = mag;\nc.ang = ang;\n\nreturn c;\n</code></pre>\n<p>}</p>\n<p>get realPart() {\nreturn this.x;\n}</p>\n<p>get imagPart() {\nreturn this.y;\n}</p>\n<p>get magnitude() {\nreturn this.mag;\n}</p>\n<p>get angle() {\nreturn this.ang;\n}\n}</p>\n<p>const c = new ComplexNumber(1, 2);\nconsole.log(c.realPart);\nconsole.log(c.imagPart);\nconsole.log(c.magnitude);\nconsole.log(c.angle);</p>\n<p>说它是“坚固”的对象，因为有明确的属性，不存在中间状态（未执行的函数是某间中间状态）。然而，通过闭包，可以不用在对象里存储具体的属性值，从而变成所谓的“智能数据对象”。虽然没有在一个“对象”中存储具体的值，但通过提供相应的方法，实现的效果也是一样的。</p>\n<p><a href=\"https://runkit.com/jeff-tian/closure-version-of-complex-numbers\">https://runkit.com/jeff-tian/closure-version-of-complex-numbers</a></p>\n<p>javascript\nconst makeComplexNumberFromRealImag = (x, y) => {\nconst dispatch = (op) => {\nswitch (op) {\ncase realPart:\nreturn x;\ncase imagPart:\nreturn y;\ncase magnitude:\nreturn Math.sqrt(x * x + y * y);\ncase angle:\nreturn Math.atan(y / x);\ndefault:\nthrow new Error(Unknown op:  + op);\n}\n}</p>\n<p>return dispatch;\n};</p>\n<p>const n = makeComplexNumberFromRealImag(1, 2);\nconsole.log(n(realPart));\nconsole.log(n(imagPart));\nconsole.log(n(magnitude));\nconsole.log(n(angle));</p>\n<p>注意以上的 n，它是一个函数，它根据输入（指令）返回最终的数（或者对于不认识的指令抛出错误），这就是所谓的“智能”。</p>\n<p>当然，在类的写法里，还有一种基于模和辐角来构造出复数的 fromMagAng静态方法，使用闭包的方式也可以实现一个上面的“智能数据对象”：</p>\n<p><a href=\"https://runkit.com/jeff-tian/make-complex-number-from-mag-ang\">https://runkit.com/jeff-tian/make-complex-number-from-mag-ang</a></p>\n<p>javascript\nconst makeComplexNumberFromMagAng = (mag, ang) => {\nconst dispatch = (op) => {\nswitch (op) {\ncase realPart:\nreturn mag * Math.cos(ang);\ncase imagPart:\nreturn mag * Math.sin(ang);\ncase magnitude:\nreturn mag;\ncase angle:\nreturn ang;\ndefault:\nthrow new Error(Unknown op:  + op);\n}\n}</p>\n<p>return dispatch;\n};</p>\n<p>const z = makeComplexNumberFromMagAng(Math.sqrt(5), Math.atan(2));\nconsole.log(z(realPart));\nconsole.log(z(imagPart));\nconsole.log(z(magnitude));\nconsole.log(z(angle));</p>\n<p><a name=YSCqa></a></p>\n<h1>总结</h1>\n<p>为什么面试总被问到闭包？因为它的玩法实在太多了。</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"Made with Stackbit.","url":"https://www.stackbit.com","style":"link","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}