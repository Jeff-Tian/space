{"componentChunkName":"component---src-templates-post-js","path":"/posts/ar5rxw","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/ar5rxw","relativePath":"posts/ar5rxw","frontmatter":{"title":"【已解决】 WSL 从命令行打开 Windows 系统浏览器","stackbit_url_path":"posts/ar5rxw","date":"2022-10-04T09:35:05","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<p><a name=d7D2d></a></p>\n<h1>问题</h1>\n<p>今天在 WSL 下安装了一个命令，该命令中某些子命令需要唤起浏览器进行操作，在这一步报错：\nshell\nexec: xdg-open: executable file not found in $PATH</p>\n<p>具体地说，是我安装了 NAPPTIVE 的命令行工具，playground，在执行 playground login 时报的以上错误。</p>\n<p><a name=F0xcC></a></p>\n<h1>分析</h1>\n<p><a name=ww4dm></a></p>\n<h2>有办法绕过这个问题吗？</h2>\n<p>我想，要么直接在 Windows 下安装 playground得了，不使用 WSL。但是你们猜猜我为什么会在 WSL 中安装这个命令呢？答案正是这个命令行工具不支持 Windows，我才使用 WSL 的。\nshell\nNo prebuilt binary for msys_nt-10.0-22543-amd64\nFailed to install Playground CLI\nFor support, go to <a href=\"https://docs.napptive.com/\">https://docs.napptive.com/</a></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1664875918118-002067b0-bf67-45cd-ba0f-c9ec81706040.png#clientId=u98a18b16-234a-4&#x26;crop=0&#x26;crop=0.7909&#x26;crop=0.3263&#x26;crop=1&#x26;from=paste&#x26;id=u4e93d6ed&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1080&#x26;originWidth=1920&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=110205&#x26;status=done&#x26;style=none&#x26;taskId=ua8e0da46-3b57-4369-85f6-9d39c655ab0&#x26;title=\" alt=\"image.png\">\n<a name=QPJEc></a></p>\n<h2>为什么执行这个命令需要唤起浏览器</h2>\n<p>其实很多命令行工具的登录操作，都会唤起浏览器进行操作，然后返回到命令行。其实，多数这种命令行工具或者其他客户端，在登录时，都会采用 OAuth 2.0 的 Device Flow 流程，可以说是一个事实标准了。关于这个 Device Flow 的详细介绍，以及如何给自己的命令行工具加上 OAuth 2.0 的 Device Flow 流程的具体教程，详见：《<a href=\"https://zhuanlan.zhihu.com/p/488194876\">https://zhuanlan.zhihu.com/p/488194876</a>》。</p>\n<p><a name=x3xgz></a></p>\n<h2>为什么报 xdg-open 文件不存在</h2>\n<p>我在 k8ss 1.8.4 这个版本中直接使用了 open 来打开浏览器：<br /><a href=\"https://github.com/jeff-tian/k8ss/blob/master/src/login/loginByKeycloak.ts\">https://github.com/jeff-tian/k8ss/blob/master/src/login/loginByKeycloak.ts</a><br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1664873819190-7b5c42e5-dcf2-4706-9b72-6d99afc7031f.png#clientId=u98a18b16-234a-4&#x26;crop=0&#x26;crop=0&#x26;crop=0.6979&#x26;crop=0.6267&#x26;from=paste&#x26;id=u8646c32e&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1080&#x26;originWidth=1920&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=200431&#x26;status=done&#x26;style=none&#x26;taskId=u496c08d6-6682-41da-9f5b-211f9b42661&#x26;title=\" alt=\"image.png\"></p>\n<p>如上图所示，使用了 open这个命令，只在 mac osx 中测试过可以自动打开浏览器。为了应对不同的系统可以不支持 open 集合，所以在命令行输出了一个 url 用来让用户手动打开浏览器并浏览至该页面。</p>\n<p>而现在 playground 这个工具报 xdg-open文件不存在，显然是它或者它的依赖项使用了 xdg-open来打开浏览器，应该是只支持 linux 系统。这个命令行工具要是像 k8ss一样，将要打开的 URL 在命令行中输出该多好，这样我就不用修复这个报错了，直接手动打开 Chrome，并输入 url，就绕过了问题。但是，看不到目标 url，于是只能硬着头皮从根本上解决这个问题了。</p>\n<p><a name=YD9iz></a></p>\n<h1>解决步骤</h1>\n<p><a name=i7YHl></a></p>\n<h2>安装 xdg-open</h2>\n<p>这一步很顺利，执行 sudo apt-get install -y xdg-utils就搞定了。</p>\n<p><a name=chFJb></a></p>\n<h2>测试 xdg-open</h2>\n<p>输入 xdg-open <a href=\"https://www.baidu.com%EF%BC%8C%E6%9E%9C%E7%84%B6%E4%BA%8B%E6%83%85%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%A1%BA%E5%88%A9%EF%BC%8C%E5%87%BA%E7%8E%B0%E4%BA%86%E5%A6%82%E4%B8%8B%E6%8A%A5%E9%94%99%EF%BC%9A\">https://www.baidu.com，果然事情没有那么顺利，出现了如下报错：</a>\nshell\nroot@jeff-workstation:/mnt/d/repos/uni-orders# xdg-open <a href=\"https://www.baidu.com\">https://www.baidu.com</a>\n/usr/bin/xdg-open: 778: /usr/bin/xdg-open: www-browser: not found\n/usr/bin/xdg-open: 778: /usr/bin/xdg-open: links2: not found\n/usr/bin/xdg-open: 778: /usr/bin/xdg-open: elinks: not found\n/usr/bin/xdg-open: 778: /usr/bin/xdg-open: links: not found\n/usr/bin/xdg-open: 778: /usr/bin/xdg-open: lynx: not found\n/usr/bin/xdg-open: 778: /usr/bin/xdg-open: w3m: not found\nxdg-open: no method available for opening <a href=\"https://www.baidu.com\">https://www.baidu.com</a></p>\n<p><a name=fi2Hc></a></p>\n<h3>分析</h3>\n<p>再次执行 playground login，仍然出现以上错误，说明， xdg-oepn  是安装上了，但是这个 xdg-open仍然是一个壳，它需要使用一个浏览器来打开链接，但是尝试了好几种，都没有找到相应的执行文件，于是失败。</p>\n<p>网上搜索了一下，是要设置一个具体的可执行文件给到 BROWSER 这个环境变量。我希望 WSL 的 xdg-open能够直接打开 Windows 系统中的 Google Chrome 浏览器。</p>\n<p><a name=ulPXZ></a></p>\n<h2>定位 Google Chrome 可执行文件</h2>\n<p>按 Windows 键，输入 Chrome，右键“打开文件位置”：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1664874533172-18a1f0aa-73a3-444e-96bd-3d7ff7dec117.png#clientId=u98a18b16-234a-4&#x26;crop=0.2447&#x26;crop=0.0792&#x26;crop=0.7606&#x26;crop=0.6294&#x26;from=paste&#x26;id=u650165a8&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1080&#x26;originWidth=1920&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=252114&#x26;status=done&#x26;style=none&#x26;taskId=uf1686eef-0c80-4f41-a5b0-ea5f8f14484&#x26;title=\" alt=\"image.png\"></p>\n<p>得到一个快捷方式所在的文件夹，这不是我最终想要的：<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1664874611555-a77d74af-7224-4b7b-8f07-621687026efa.png#clientId=u98a18b16-234a-4&#x26;crop=0.1028&#x26;crop=0&#x26;crop=0.6873&#x26;crop=0.8174&#x26;from=paste&#x26;id=u7dccc7b6&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1080&#x26;originWidth=1920&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=258821&#x26;status=done&#x26;style=none&#x26;taskId=ud4db8ae1-c045-4a3f-9f84-49868075cc3&#x26;title=\" alt=\"image.png\"></p>\n<p>于是，再次在这个快捷方式上右键并选择“打开文件位置”：<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1664874684125-f380217d-c8ab-44d0-a6fd-dec2f0947fa0.png#clientId=u98a18b16-234a-4&#x26;crop=0.1005&#x26;crop=0.0953&#x26;crop=0.6828&#x26;crop=0.8214&#x26;from=paste&#x26;id=u6ee24495&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1080&#x26;originWidth=1920&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=278432&#x26;status=done&#x26;style=none&#x26;taskId=u0feac638-4757-43f4-a605-ed8fb35b821&#x26;title=\" alt=\"image.png\"></p>\n<p>找到了原来我的 Google Chrome 安装在“C:Program Files (x86)GoogleChromeApplication”这个文件夹下：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1664874742077-2a666104-8ab9-4c8e-a317-2e6bbc0f8dda.png#clientId=u98a18b16-234a-4&#x26;crop=0.1042&#x26;crop=0.1007&#x26;crop=0.6571&#x26;crop=0.8241&#x26;from=paste&#x26;height=530&#x26;id=u64b0782c&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1080&#x26;originWidth=1920&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=248437&#x26;status=done&#x26;style=none&#x26;taskId=u9ce8c0cd-8767-48fa-929a-5c68e773958&#x26;title=&#x26;width=943\" alt=\"image.png\"></p>\n<p><a name=p2NhM></a></p>\n<h2>在 WSL 中建立一个快捷方式</h2>\n<p>其实，找到了 Google Chrome 所在的文件夹，只需要将 BROWSER 环境变量设置为 Google Chrome 的完整路径即可。但是做为一个程序员，职业病让我不直接这样做，而是引入一个中间层，让这个路径和环境变量“解耦”（为什么要带来这个额外的复杂性呢？其实没有必要，但是当时就是这么做了）。即先建立一个快捷方式，让环境变量指向这个快捷方式，而不是最终的可执行文件本身。这样以后就可以扩展了，比如切换浏览器，不需要再次修改环境变量，只需要修改这个快捷方式的指向就好了（但愿我以后真的想修改浏览器时，还记得我做了这个软链接！）。</p>\n<p>在 WSL 中建立这个快捷方式，使用了软链接，这个软链接的名字不妨叫 browser_in_win，建立方式如下，注意将 Windows 的目录更改为了 WSL 对应的目录：</p>\n<p>shell\nsudo ln -sf /mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe /usr/bin/browser_in_win</p>\n<p><a name=iYGZA></a></p>\n<h2>将 BROWSER 环境变量设置为 browser_in_win</h2>\n<p>shell\nexport BROWSER=/usr/bin/browser_in_win</p>\n<p><a name=D6PMK></a></p>\n<h2>再次测试 xdg-open</h2>\n<p>shell\nxdg-open <a href=\"https://www.baidu.com\">https://www.baidu.com</a></p>\n<p>这一次，成功从 WSL 命令行打开了浏览器！</p>\n<p><a name=Qahd0></a></p>\n<h2>测试 playground login</h2>\n<p>从 WSL 中执行 playground login，完美打开了浏览器并登录成功了！<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1664875610455-520fa6d3-eb82-453e-8c8f-51886f70ccc4.png#clientId=u98a18b16-234a-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=960&#x26;id=u12a505eb&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1080&#x26;originWidth=1920&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=121740&#x26;status=done&#x26;style=none&#x26;taskId=u5509ee58-e874-4d30-9555-29d10a9744f&#x26;title=&#x26;width=1707\" alt=\"image.png\"></p>\n<p>为了验证真的登录成功，使用它创建了一个应用：</p>\n<p>shell\nroot@jeff-workstation:/mnt/d/repos/uni-orders# playground apps create uni-orders.yaml\nSTATUS     INFO\nSUCCESS    application [uni-orders] deployed</p>\n<p>CREATED\ncore.oam.dev/v1beta1, Kind=Application uni-orders created</p>\n<p>在看到自己账号下成功创建了应用，终于放心问题是真的解决了！</p>\n<p><a name=KYj56></a></p>\n<h1>总结</h1>\n<p>在确定没有办法绕过问题之后，最终在 WSL 中通过设置 BROWSER 环境变量，指向 Windows 中安装的浏览器可执行文件，解决了从 WSL 命令行中直接打开 Windows 浏览器的问题。关键在于定位到 Windows 下的 Google Chrome 可执行文件，并且转换成 WSL 的文件路径。</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"Made with Stackbit.","url":"https://www.stackbit.com","style":"link","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}