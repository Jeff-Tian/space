{"componentChunkName":"component---src-templates-post-js","path":"/posts/gkq3o1","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/gkq3o1","relativePath":"posts/gkq3o1","frontmatter":{"title":"关注公众号即登录插件适配 Keycloak 18","stackbit_url_path":"posts/gkq3o1","date":"2022-09-10T12:51:20","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<p>在 2021 年 2 月份基于 Keycloak 7 实现了一个关注微信公众号即登录的插件，在当年 9 月份收到咨询说在最新版 Keycloak 中不能使用了。于是做了一个升级，当时是升级到了 Keycloak 15，详见：<br /><a href=\"https://zhuanlan.zhihu.com/p/407932327?\">https://zhuanlan.zhihu.com/p/407932327</a></p>\n<p>后来，又将 Keycloak 升级到了 16，发现插件不用做任何修改，也能适配使用。</p>\n<p>但是时间又过去了一整年，Keycloak 又出了新版本，而且改动特别大，本文记录一下在适配 Keycloak 18 时需要做的一些改动，以供更多网友参考。\n<a name=NfMRg></a></p>\n<h1>为什么再次升级？</h1>\n<p>其实也是在知乎上收到了咨询，才了解到 Keycloak 升级到 18 后，自定义的身份提供程序，需要以新的方式集成进去才行。由于客户的代码并不是开源的，需要保密，所以这里以开源的 Keycloak 微信插件举例说明要做的适配。因为这个关注公众号即登录插件，本质上就是 Keycloak 的一种自定义社交登录身份提供程序，所以具有普遍性，并且和我帮助客户的程序做的改动是一样的。<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1662814351262-77d332b1-8ef0-4615-803d-1cd85248acb5.png#clientId=u20875e64-6a55-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=875&#x26;id=u40908226&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=984&#x26;originWidth=1177&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=115561&#x26;status=done&#x26;style=none&#x26;taskId=ufc4f7dc7-6baf-431e-92ba-00b02b4f55f&#x26;title=&#x26;width=1046.2222222222222\" alt=\"image.png\">\n<a name=LBjFg></a></p>\n<h1>建立测试环境</h1>\n<p><a name=fVX78></a></p>\n<h2>插件源代码</h2>\n<p>源代码见： <a href=\"https://github.com/Jeff-Tian/keycloak-services-social-weixin\">https://github.com/Jeff-Tian/keycloak-services-social-weixin</a></p>\n<p>现在了解到不同的 Keycloak 版本可能表现不一样，为了方便测试，现在在项目代码中加入了 Dockerfile 和 docker-compose.yml 文件。这样可以随时切换不同的 Keycloak 版本。</p>\n<p><a name=DkO1n></a></p>\n<h2>Dockerfile</h2>\n<p>比如要验证 Keycloak 18，可以建立如下的 Dockerfile：</p>\n<p>dockerfile\nFROM quay.io/keycloak/keycloak:18.0.2</p>\n<p>COPY target/keycloak-services-social-weixin-0.1.1.jar /opt/keycloak/providers/</p>\n<p>CMD [start-dev, --hostname-strict=false]</p>\n<p>这里也展示了要适配 Keycloak 18，不用再像之前单独拷贝配置的 html 模板文件了。</p>\n<p><a name=o55Nc></a></p>\n<h2>docker-compose 文件</h2>\n<p>直接使用 docker run ... 的命令可以运行指定的 Keycloak 实例，但是要传递很多参数，还是有些不方便。如果能将需要的参数写在文件里就好了。其实这可以建立一个 docker-compose.yml 文件，从而每次要运行时，只需要执行 docker compose up 就可以了。这样的 docker-compose.yml 文件如下：</p>\n<p>yaml\nversion: 3</p>\n<p>services:\nkeycloak:\nbuild:\ncontext: .\ndockerfile: Dockerfile\nenvironment:\nKEYCLOAK_ADMIN: admin\nKEYCLOAK_ADMIN_PASSWORD: admin\nports:\n- 8080:8080\ncommand:\n- start-dev</p>\n<p>当然，如果你修改了 Dockerfile，需要在 docker compose up 之前，运行一下 docker compose build 。</p>\n<p>如果同时要验证多个版本的 Keycloak，可以建立多个 Dockerfile 和 docker-compose.yml。比如再建立一个 Dockerfile.19，以及 docker-compose.19.yml，并在该 yml 文件中指向 Dockerfile.19 这个文件。那么，当想启动 Keycloak 19 时，只需要 docker compose -f docker-compose.19.yml up 即可。</p>\n<p><a name=gHnm3></a></p>\n<h1>pom 文件改动</h1>\n<p>要适配 Keycloak 18，先需要在 pom 文件中把对 Keycloak 的依赖版本做个修改，如下：</p>\n<p>diff\n<modelVersion>4.0.0</modelVersion>\n<groupId>org.keycloak</groupId>\n<artifactId>keycloak-services-social-weixin</artifactId></p>\n<ul>\n<li><version>0.0.66</version></li>\n</ul>\n<ul>\n<li><version>0.1.0</version></li>\n</ul>\n<p><name>Keycloak Services Social WeiXin</name>\n<description/>\n<properties>\n&#x3C;maven.compiler.target>11&#x3C;/maven.compiler.target>\n&#x3C;maven.compiler.source>11&#x3C;/maven.compiler.source></p>\n<ul>\n<li>\n<pre><code>  &#x3C;keycloak.version>15.0.2&#x3C;/keycloak.version>\n</code></pre>\n</li>\n</ul>\n<ul>\n<li>\n<pre><code>  &#x3C;keycloak.version>18.0.2&#x3C;/keycloak.version>\n</code></pre>\n</li>\n</ul>\n</properties>\n<p><a name=bMdOd></a></p>\n<h1>模板文件的位置改动</h1>\n<p>按照之前的方式，模板文件会拷贝到  /opt/keycloak/themes/base/admin/resources/partials/realm-identity-provider-xxxx.html 这个位置，但是在 Keycloak 18 中，如果拷贝到这里，会导致 Admin Console 中出现资源找不到的错误。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1662813065153-16f887d0-f522-4950-bc19-6f7dd3b78c76.png#clientId=uc5dcb41d-61ca-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=347&#x26;id=ue753316f&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=390&#x26;originWidth=854&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=38988&#x26;status=done&#x26;style=none&#x26;taskId=u541cee1d-75ed-4aa9-8a32-ea89e292e7f&#x26;title=&#x26;width=759.1111111111111\" alt=\"image.png\"></p>\n<p>对应的服务器端日志是找不到 index.ftl 模板文件：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1662803485371-7e5580e6-551d-4f4f-8a5c-ac0cbaa47db2.png#clientId=uc5dcb41d-61ca-4&#x26;crop=0&#x26;crop=0.0395&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=770&#x26;id=u3a2ae879&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=770&#x26;originWidth=1678&#x26;originalType=url%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=2048401&#x26;status=done&#x26;style=none&#x26;taskId=u0debdac7-545f-485b-8bc3-93959445f7f&#x26;title=&#x26;width=1678\" alt=\"image.png\"></p>\n<p>看了一下 Keycloak 18.0.2 的文档，原来主题资源有专门的文件夹了，是在 theme-resources/ 之下，虽然带来了破坏性的改动，但是的确让工程变得更加紧凑了。正如之前建立测试环境时提到的，以后要添加自定义的社交登录插件，只需要拷贝一个 jar 文件就行了，而不用再单独去拷贝模板文件，因为模板文件通过 theme-resources 打包在 jar 文件中了。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1662803318034-d9d2f059-980f-47af-a14f-9f707de7e7dc.png#clientId=uc5dcb41d-61ca-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=540&#x26;id=u0ba7b203&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=607&#x26;originWidth=1654&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=148797&#x26;status=done&#x26;style=none&#x26;taskId=u1004d080-1769-47ed-bf05-d0455610b42&#x26;title=&#x26;width=1470.2222222222222\" alt=\"image.png\"></p>\n<p>具体来说，对于之前的配置界面模板，需要放置在项目的 resources/theme-resources/resources/partials 目录之下，比如，对于微信插件，就是：src/main/resources/theme-resources/resources/partials/realm-identity-provider-weixin-ext.html，迁移示例图如下：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1662812452674-4d4d6505-92ef-40fb-a183-767147af1260.png#clientId=uc5dcb41d-61ca-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;id=u8d4fa7e2&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1512&#x26;originWidth=1358&#x26;originalType=url%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=836599&#x26;status=done&#x26;style=none&#x26;taskId=u29557f1a-5997-43fa-a8dd-9286f533535&#x26;title=\" alt=\"image.png\">\n<a name=FymaU></a></p>\n<h1></h1>\n<p><a name=zQASM></a></p>\n<h1>Dockferfile 简化</h1>\n<p>如同之前提到的，可以删除拷贝模板文件的代码了，只保留 jar 文件的拷贝即可。同时留意所有带 jboss 路径的目录，需要删除 jboss。因为 Keycloak 18 不再基于 jboss。</p>\n<p>diff\nCOPY idps/wechat-mobile/keycloak-services-social-weixin.jar</p>\n<ul>\n<li>/opt/jboss/keycloak/providers/</li>\n</ul>\n<ul>\n<li>/opt/keycloak/providers/</li>\n</ul>\n<ul>\n<li>\n<p>COPY idps/wechat-mobile/templates/realm-identity-provider-weixin-ext.html</p>\n</li>\n<li>\n<p>/opt/jboss/keycloak/themes/base/admin/resources/partials</p>\n</li>\n<li>\n<p>COPY idps/wechat-mobile/templates/realm-identity-provider-weixin.html</p>\n</li>\n<li>\n<p>/opt/jboss/keycloak/themes/base/admin/resources/partials</p>\n</li>\n</ul>\n<p>Dockerfile 中只需要拷贝一个 jar 文件即可。但是在运行 Dockerfile 之前，要记得 mvn clean package以生成最新的 jar 文件以供 docker build 时拷贝。\n<a name=ZOk0k></a></p>\n<h1>验证效果</h1>\n<p>docker compose up 在本地启动  Keycloak  18.0.2，添加自定义身份提供程序，选择“微信”，出现配置界面，即之前的 404 的问题被解决了。<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1662813568695-c3bcdafd-7b62-402e-9756-e6a00437c485.png#clientId=uc5dcb41d-61ca-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=772&#x26;id=ua2febd8b&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=868&#x26;originWidth=1314&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=106566&#x26;status=done&#x26;style=none&#x26;taskId=u03a30435-7ea1-4ca9-a22a-4e44215909f&#x26;title=&#x26;width=1168\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1662813639259-0023ce83-b667-4267-9649-a900f80c2081.png#clientId=uc5dcb41d-61ca-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=849&#x26;id=u3f1c2407&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=955&#x26;originWidth=1753&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=158885&#x26;status=done&#x26;style=none&#x26;taskId=ud062fa9e-5be4-4d73-89aa-822c4f4a83b&#x26;title=&#x26;width=1558.2222222222222\" alt=\"image.png\">\n<a name=uEMjb></a></p>\n<h1>Keycloak 19</h1>\n<p>遗憾的是，上面的方法，对于 Keycloak 19 不适用。Keycloak 19 带来了更大的更新，看起来 Keycloak 抛弃了我曾经吐槽过的 angular js，而是用 React 新写了 Keycloak 2 主题。之前多数的插件模板都是基于 angular js 写的，所以肯定在新的界面上不适用了。但是即使将 Realm 设置中的主题设置回 Keycloak 1，在添加自定义身份认证程序时，仍然会出现 404 页面。<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1662813996691-5771295f-351f-434e-865f-5eedb5083936.png#clientId=uc5dcb41d-61ca-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=719&#x26;id=ue62ddd74&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=809&#x26;originWidth=1150&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=87683&#x26;status=done&#x26;style=none&#x26;taskId=ucdb02a11-e4fc-4302-ae48-232c4bde728&#x26;title=&#x26;width=1022.2222222222222\" alt=\"image.png\"></p>\n<p>通过查看 GitHub 上相关的讨论，发现 Keycloak 开发小组对此问题还没有达成一致，对于如何升级此关注公众号即登录插件以适配 Keycloak 19，未来再研究和分享。</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"Made with Stackbit.","url":"https://www.stackbit.com","style":"link","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}