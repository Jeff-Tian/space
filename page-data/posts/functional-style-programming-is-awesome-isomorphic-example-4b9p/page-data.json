{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/posts/functional-style-programming-is-awesome-isomorphic-example-4b9p",
    "result": {"data":{"sitePage":null},"pageContext":{"url":"posts/functional-style-programming-is-awesome-isomorphic-example-4b9p","relativePath":"posts/functional-style-programming-is-awesome-isomorphic-example-4b9p","frontmatter":{"title":"Functional style programming is awesome (isomorphic example)","stackbit_url_path":"posts/functional-style-programming-is-awesome-isomorphic-example-4b9p","date":"2021-03-08T05:23:27Z","excerpt":"","tags":"","categories":"","template":"post"},"html":"<p>This post will present a look and feel about functional style programming, gives you a glance about what it would look like if we wrote programs in a functional programming way.</p>\n<p>It's not a real strict functional programming guide, it just shows how interesting yet powerful if we handle problems in a functional programming mind.</p>\n<h2>\n  <a name=\"problem\" href=\"#problem\">\n  </a>\n  Problem\n</h2>\n<p>It's quite common challenge to ask you <a href=\"https://leetcode.com/problems/isomorphic-strings/description/\">implement an algorithm to detect if 2 strings are isomorphic</a> during a programming job interview, there might be many answers on it. Let's do it again.</p>\n<h2>\n  <a name=\"tools\" href=\"#tools\">\n  </a>\n  Tools\n</h2>\n<ul>\n<li>A browser. So we can write pure JavaScript to implement it by pressing F12 with a running brower at hand.</li>\n</ul>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--E-CQer-N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tb9j3a9ot1sxqnrkgug.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--E-CQer-N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tb9j3a9ot1sxqnrkgug.png\" alt=\"image\" loading=\"lazy\"></a></p>\n<p>By analyzing the requirement, we can see actually the term <code>isomorphic</code> reflects the requirement quite well, which means having the same form, in other words, the forms (or structures) in a way are the same(equal). So we can just write some code to express the meanings:<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">isomorphic</span> <span class=\"o\">=</span> <span class=\"nx\">equalBy</span><span class=\"p\">(</span><span class=\"nx\">structure</span><span class=\"p\">)</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n<pre><code>&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\">&#x3C;title>Exit fullscreen mode&#x3C;/title>\n&#x3C;path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\">&#x3C;/path>\n</code></pre>\n</svg>\n</div>\n</div>\n</div>\n<p>So far we have the signature of the function <code>equalBy</code>, let's implement it:<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">equalBy</span> <span class=\"o\">=</span> <span class=\"nx\">fn</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">fn</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"nx\">fn</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">)</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n<pre><code>&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\">&#x3C;title>Exit fullscreen mode&#x3C;/title>\n&#x3C;path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\">&#x3C;/path>\n</code></pre>\n</svg>\n</div>\n</div>\n</div>\n<p>It's natural and self expressed.</p>\n<p>Now we take a closer look into <code>isomorphic</code>, we found it cares only the structure of the string, and doesn't give a shit to the detail characters in it. So how to we express the form (or structure) of the string?</p>\n<p>By examining the examples given in the requirement we come up with an idea to express the structure of a string by the character indices in the string, which can be expressed by numbers so it abstracts from the detail characters. So we write the following code:<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">structure</span> <span class=\"o\">=</span> <span class=\"nx\">s</span> <span class=\"o\">=&gt;</span> <span class=\"p\">[...</span><span class=\"nx\">s</span><span class=\"p\">].</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">c</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">s</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">)).</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">-</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n<pre><code>&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\">&#x3C;title>Exit fullscreen mode&#x3C;/title>\n&#x3C;path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\">&#x3C;/path>\n</code></pre>\n</svg>\n</div>\n</div>\n</div>\n<p>This line of code is a little bit long, let's test it and document it:<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">assert</span><span class=\"p\">(</span><span class=\"nx\">structure</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">aabbcc</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">002244</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">A structure of a string can be expressed through the indices of the characters in it</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n<pre><code>&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\">&#x3C;title>Exit fullscreen mode&#x3C;/title>\n&#x3C;path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\">&#x3C;/path>\n</code></pre>\n</svg>\n</div>\n</div>\n</div>\n<p>By far we have both <code>equalBy</code> and <code>structure</code>, so <code>isomorphic</code> is ready to run! We can write some tests to show it:<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">assert</span><span class=\"p\">(</span><span class=\"nx\">isomorphic</span><span class=\"p\">(</span><span class=\"dl\">''</span><span class=\"p\">,</span> <span class=\"dl\">''</span><span class=\"p\">),</span> <span class=\"dl\">'</span><span class=\"s1\">empty strings are isomorphic</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">assert</span><span class=\"p\">(</span><span class=\"nx\">isomorphic</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">aabbcc</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">aabbcc</span><span class=\"dl\">'</span><span class=\"p\">),</span> <span class=\"dl\">'</span><span class=\"s1\">strings are always isomorphic with themselves</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">assert</span><span class=\"p\">(</span><span class=\"nx\">isomorphic</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">aabbcc</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">zzxxyy</span><span class=\"dl\">'</span><span class=\"p\">),</span> <span class=\"dl\">'</span><span class=\"s1\">if the characters have the same indices sequence, then the strings composed by them are isomorphic</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isomorphic</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">aabacc</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">xxyyzz</span><span class=\"dl\">'</span><span class=\"p\">),</span> <span class=\"dl\">'</span><span class=\"s1\">even if the character indices are the same, however the sequences are not all the same, then the 2 strings composed by them are NOT isomorphic</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isomorphic</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">aaabbcc</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">xxyyyzz</span><span class=\"dl\">'</span><span class=\"p\">),</span> <span class=\"dl\">'</span><span class=\"s1\">if any character indices are different, then the strings composed by them are NOT isomorphic</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isomorphic</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">abcdefghijk</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">abcdefghijba</span><span class=\"dl\">'</span><span class=\"p\">),</span> <span class=\"dl\">'</span><span class=\"s1\">if the lengths are different, then the strings are NOT isomorphic</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n<pre><code>&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\">&#x3C;title>Exit fullscreen mode&#x3C;/title>\n&#x3C;path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\">&#x3C;/path>\n</code></pre>\n</svg>\n</div>\n</div>\n</div>\n<p>We ran the tests, all pass!</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--NwiBelYH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmq4ulxbek2thg4vir97.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--NwiBelYH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmq4ulxbek2thg4vir97.png\" alt=\"All tests pass\" loading=\"lazy\"></a></p>\n<h2>\n  <a name=\"summary\" href=\"#summary\">\n  </a>\n  Summary\n</h2>\n<p>So the implementation code for <code>isomorphic</code> is only 3 lines in total:<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">equalBy</span> <span class=\"o\">=</span> <span class=\"nx\">fn</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">fn</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"nx\">fn</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">)</span>\n<p><span class=\"kd\">const</span> <span class=\"nx\">structure</span> <span class=\"o\">=</span> <span class=\"nx\">s</span> <span class=\"o\">=></span> <span class=\"p\">[...</span><span class=\"nx\">s</span><span class=\"p\">].</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">c</span> <span class=\"o\">=></span> <span class=\"nx\">s</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">)).</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">-</span><span class=\"dl\">'</span><span class=\"p\">)</span></p>\n<p><span class=\"kd\">const</span> <span class=\"nx\">isomorphic</span> <span class=\"o\">=</span> <span class=\"nx\">equalBy</span><span class=\"p\">(</span><span class=\"nx\">structure</span><span class=\"p\">)</span>\n</code></pre></p>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n<pre><code>&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\">&#x3C;title>Exit fullscreen mode&#x3C;/title>\n&#x3C;path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\">&#x3C;/path>\n</code></pre>\n</svg>\n</div>\n</div>\n</div>\n<p>You can see it's a <code>pointless</code> way of writing code, besides cool, it solves problem elegantly even to a simple extend!</p>\n<p>You can try on your browser or check it in <a href=\"https://leetcode.com/submissions/detail/530009145/\">leetcode</a> too: <del><a href=\"https://leetcode.com/submissions/detail/465004270/\">https://leetcode.com/submissions/detail/465004270/</a></del> <a href=\"https://leetcode.com/submissions/detail/530009145/\">https://leetcode.com/submissions/detail/530009145/</a></p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"Made with Stackbit.","url":"https://www.stackbit.com","style":"link","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},
    "staticQueryHashes": []}