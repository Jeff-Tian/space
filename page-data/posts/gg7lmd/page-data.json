{"componentChunkName":"component---src-templates-post-js","path":"/posts/gg7lmd","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/gg7lmd","relativePath":"posts/gg7lmd","frontmatter":{"title":"邪恶的字段注入","stackbit_url_path":"posts/gg7lmd","date":"2021-06-16T12:42:55","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<p>继《<a href=\"https://zhuanlan.zhihu.com/p/378996745\">给 Java gradle 工程添加 git hooks</a>》之后，再次延续《<a href=\"https://zhuanlan.zhihu.com/p/376821879\">后端工程圣殿形象的崩塌以及重建</a>》一文，用 JavaScript 工程师的视角，来改造理论上本该高大上但是现实中却大面积倒塌的 java 后端工程。</p>\n<p>今天面试了一个号称有着 8 年 java 开发经验的工程师（据说所谓的 java 工程师，事实上就是 Spring 工程师而已）。我问她这两种写法有什么区别？你更倾向哪一种？\njava\n@Service\nclass ServiceX {...}</p>\n<p>// 写法 1</p>\n<p>class A1 {\n@Autowired\nprivate ServiceX service;</p>\n<pre><code>...\n</code></pre>\n<p>}</p>\n<p>// 写法 2</p>\n<p>class A2 {\nprivate final ServiceX service;</p>\n<pre><code>public A2 (@Autowired ServiceX service) {\n    this.service = service;\n}\n</code></pre>\n<p>}</p>\n<p>她看了大惊失色：啊？还有 A2 这种写法？没见过啊，都是像第一种那样去写啊！</p>\n<p>我不惊讶她的回答，因为我们公司的实际项目中也是这样的，所有人都是像第一种那样去写的，从来没有人觉得任何不适。</p>\n<p>但是我很不适，<strong>首先 IDE 会给第一种写法画上波浪线</strong>，给一个黄色警告。我不明白那些看不起 JavaScript 工程师的 java 工程师们，为什么从来不去注意这种警告？</p>\n<p><strong>其次是我在写测试时，觉得更加不爽</strong>。原来没有人觉得不适，因为项目中根本没有测试。通过写测试，我切身体会到了两种写法的区别和各自的优劣，结论是强烈建议使用第二种写法，应该没有不得不使用第一种写法的场景。</p>\n<p>以下是个人粗浅的理解的总结</p>\n<p>以上的代码就是要写一个类，该类依赖一个 Service，使用 Spring 框架实现这个依赖 Service 的类，当然要使用依赖注入，这个 @Autowired 注解就是用来注入依赖的。但是注入的方式有两种，以上第一种写法是字段注入，而第二种写法是构造器注入。</p>\n<p><a name=cl6k6></a></p>\n<h1>为什么不建议采用字段注入？</h1>\n<p><a name=lLryE></a></p>\n<h2>一、测试不仅难写，而且难以运行</h2>\n<p>测试时需要控制依赖项，所以往往需要将真正的依赖项模拟掉。如果使用字段注入，测试就很难写。因为要模拟这个依赖项，就要写更多的代码。测试也很难运行，因为要花更长时间运行，更耗机器资源，还让反馈变慢。</p>\n<p>比如对于字段注入的代码进行测试，你需要先在测试类上注解上 Spring 相关的环境，而且在运行测试时会真的启动 Spring 容器，所以运行起来很慢：</p>\n<p>java\n@RunWith(SpringRunner.class)\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\nclass A1Test {\n@MockBean\nprivate Service mockService;</p>\n<pre><code>@Autowired\nprivate A1 sut;\n\n@Test\nvoid testIt() {\n    ...\n}\n</code></pre>\n<p>}</p>\n<p>事实上，除非是写集成测试，根本没有必要启动 Spring 环境。所以对于构造器注入，测试代码不仅更加简洁且运行更快：</p>\n<p>java\nclass A2Test {\nprivate final A2 sut;\nprivate final Service mockService;</p>\n<pre><code>{\n    mockService = Mockito.mock(Service.class);\n    \n    // 直接 new，避开了 Spring 容器的开销\n    sut = new A2(mockService);\n}\n\n@Test\nvoid testIt() {\n    when(mockService.method(any(Object.class)).thenReturn(0);\n    ...\n}\n</code></pre>\n<p>}</p>\n<p><a name=IhmCT></a></p>\n<h2>二、字段注入方式违反了不可变性原则</h2>\n<p>对比 A1 的实现，注意在 A2 的实现中（构造器注入），使用了 final 关键字。这带来了很大的好处，因为这个字段内容在应用的整个生命周期中不能再被改变，从而可以避免编程错误（比如忘掉初始化这个字段会导致编译报错）。</p>\n<p><a name=TUbQx></a></p>\n<h2>三、字段注入实现的代码不够安全</h2>\n<p>当构造器执行完毕，对象就准备好被使用了。采用构造器注入方式，对象只有准备好或者没有准备好的状态，不存在中间态。但是采用字段注入，导致对象存在一个中间状态，这个对象会比较脆弱。</p>\n<p><a name=G5k16></a></p>\n<h2>四、字段注入方式对依赖的表述不够清晰</h2>\n<p>采用构造器注入，使得类的必要依赖一目了然。</p>\n<p><a name=riSNs></a></p>\n<h2>五、逼迫开发者思考类的设计</h2>\n<p>如果你的构造器里出现了很多参数，就是非常明显的一个坏的设计，实际上是一种上帝对象这样的反模式。不管类通过构造器还是字段的方式依赖多个其他服务，这都是错的，但是通过构造器注入更能让人在依赖变多时停下来思考代码结构的设计。</p>\n<p><a name=G5MY9></a></p>\n<h1>总结</h1>\n<p>综上所述，如果非要说构造器注入有什么不好的地方，那就是增加了实现上代码量，因为字段注入只需要写一个字段，而构造器注入既要写构造器，还免不了要写字段。但作为 JavaScript 工程师，不得不说这是 java 语言本身的问题，在 JavaScript 或者 TypeScript 的世界里，采用构造器注入，连这个缺点都没有。</p>\n<p><a name=lK4yy></a></p>\n<h2>举个例子</h2>\n<p>如果你使用 NestJs（<a href=\"https://docs.nestjs.com/fundamentals/injection-scopes\">https://docs.nestjs.com/fundamentals/injection-scopes</a>），那么可以这样写：\ntypescript\n@Injectable()\nclass Service {}</p>\n<p>class A2 {\nconstructor(@Inject(Service) private service) {}\n}</p>\n<p>注意到在构造器里可以直接写上 private，这样 A2 类就自动有了 service 这个私有字段。</p>\n<p>如果你不用 InversifyJs（<a href=\"https://doc.inversify.cloud/zh_cn/classes_as_id.html\">https://doc.inversify.cloud/zh_cn/classes_as_id.html</a>），那么也类似：\ntypescript\n@injectable()\nclass Service {...}</p>\n<p>class A2 {\nconstructor(private readonly service: Service) {}\n}</p>\n<p>最后再次强调，如果你发现自己的项目中还在用字段注入，赶紧改成构造器注入的方式吧！</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"Full Stack Developer, good at OAuth 2.0","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"本站源码","url":"https://github.com/Jeff-Tian/space","style":"link","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}