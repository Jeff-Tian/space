{"componentChunkName":"component---src-templates-post-js","path":"/posts/ptp1hr","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/ptp1hr","relativePath":"posts/ptp1hr","frontmatter":{"title":"实战案例：在 Umi Js 项目中通过 umi-plugin-oauth2 插件对接 Keycloak","stackbit_url_path":"posts/ptp1hr","date":"2022-10-12T05:09:48","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<p><a name=t7k62></a></p>\n<h1>Keycloak</h1>\n<p>Keycloak 是一个开源的身份认证与访问授权管理系统。对于开发者来说，通过它，可以关注自己的应用业务逻辑，而不必每个系统都单独开发用户系统。无论是写前端、BFF 还是后端，都可以直接“接入” Keycloak，这时只需要少量配置代码，节省大量的开发测试工作。</p>\n<p><a name=bYM8o></a></p>\n<h2>保护后端服务</h2>\n<p>以 Spring Boot 为例，以前写过： 《<a href=\"https://zhuanlan.zhihu.com/p/480816990\">https://zhuanlan.zhihu.com/p/480816990</a>》。</p>\n<p><a name=b5pRt></a></p>\n<h2>保护 BFF</h2>\n<p>以 eggjs 为例，以前写过：《<a href=\"https://zhuanlan.zhihu.com/p/359057316\">https://zhuanlan.zhihu.com/p/359057316</a>》。</p>\n<p><a name=Vw3P0></a></p>\n<h2>保护纯前端</h2>\n<p>这个目前官网有 Vue.js 的案例： <a href=\"https://www.keycloak.org/securing-apps/vue\">https://www.keycloak.org/securing-apps/vue</a>。我今天正好可以给 Keycloak 补充一个 Umi Js 的案例，并借此机会给 umi-plugin-oauth2 打一个广告，希望能推广给更多人使用它。</p>\n<p><a name=UMX57></a></p>\n<h1>umi-plugin-oauth2</h1>\n<p>它的源代码见： <a href=\"https://github.com/Jeff-Tian/umi-plugin-oauth2\">https://github.com/Jeff-Tian/umi-plugin-oauth2</a>，是从另一个 umi-plugin-oauth2-client 分叉而来，但是已经做了很多改进，目前已经在企业的生产环境中使用了。</p>\n<p><a name=e4CMD></a></p>\n<h2>IdentityServer</h2>\n<p>可以将 IdentityServer 看成是一个 ASP.NET 版的无头 Keycloak。所以要关注应用业务逻辑，将应用与身份管理解耦，其实不只 Keycloak 一个选择。在《<a href=\"https://zhuanlan.zhihu.com/p/533197284\">https://zhuanlan.zhihu.com/p/533197284</a>》一文里，详解了使用 IdentityServer 保护 Java 后端服务和前端应用。这个前端应用，其实就是基于 Umi Js 的，其实最后也是使用了 umi-plugin-oauth2 这个插件。</p>\n<p>正如 umi-plugin-oauth2 的名字所表达的，使用这个插件，可以帮助 Umi Js 应用接入任何 OAuth 2.0 的授权服务，并不局限于 IdentityServer。于是今天再次举一个接入 Keycloak 的实例。</p>\n<p><a name=b5GmP></a></p>\n<h1>连点成线，拼凑软件</h1>\n<p>之前写了一篇《<a href=\"https://zhuanlan.zhihu.com/p/551301145\">https://zhuanlan.zhihu.com/p/551301145</a>》，发现自己对拼凑软件上瘾了，这次也不例外，继续拼凑。首先，这个 UmiJs 前端不是我从 0 开始搭建的，是基于一名知友的仓库分叉而来，一开始是帮助他解决在 UmiJs 里集成 CKEditor 时碰到的错误，解决完后，今天又想起它，再次挖掘一下利用价值：给它添加上用户登录和退出的功能。</p>\n<p><a name=ligY5></a></p>\n<h1>在线访问</h1>\n<p>部署在 Vercel 上： <a href=\"http://umi-ckeditor5.vercel.app/\">http://umi-ckeditor5.vercel.app/</a>.<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1665549506180-0b7d2e6a-a37b-4150-a456-84f2d8694afa.png#clientId=u8d964a9d-f0cd-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;errorMessage=unknown%20error&#x26;from=paste&#x26;height=740&#x26;id=u498860bc&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1480&#x26;originWidth=2116&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=357071&#x26;status=error&#x26;style=none&#x26;taskId=u7bf77a1b-abca-43be-91be-757f1e149d2&#x26;title=&#x26;width=1058\" alt=\"image.png\">\n<a name=vrJtt></a></p>\n<h1>接入步骤详解</h1>\n<p>完整的修改记录源码见这个提交： <a href=\"https://github.com/Jeff-Tian/umi-ckeditor5/commit/f2c7eb0e8212362441180d6dd54ca13bd52461ed\">https://github.com/Jeff-Tian/umi-ckeditor5/commit/f2c7eb0e8212362441180d6dd54ca13bd52461ed</a>。</p>\n<p><a name=C5axs></a></p>\n<h2>Keycloak 配置</h2>\n<p><a name=wDFJS></a></p>\n<h3>首先，需要添加一个公开客户端</h3>\n<p>因为这是使用纯前端对接 Keycloak，所以需要将客户端设置为公开的。毕竟，即使使用加密的客户端，那密钥保存在前端也是没有意义的。如果需要高安全性，那么一定是要用 BFF 来对接 Keycloak，而前端只需要和 BFF 对接，对具体授权服务完全无感知。参考《<a href=\"https://zhuanlan.zhihu.com/p/571585321\">https://zhuanlan.zhihu.com/p/571585321</a>》一文对此的讨论。</p>\n<p>但是，目前业务仍然有使用纯前端直接对接授权服务的做法，本篇也是如此，不考虑 BFF 方案。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1665549562128-168a41f0-5d60-4d4a-96a2-08ed5778931a.png#clientId=u8d964a9d-f0cd-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;errorMessage=unknown%20error&#x26;from=paste&#x26;height=742&#x26;id=u2c444d6f&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1484&#x26;originWidth=2832&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=329693&#x26;status=error&#x26;style=none&#x26;taskId=u773560c9-fb5f-4108-a2df-7bd34d27e4b&#x26;title=&#x26;width=1416\" alt=\"image.png\"></p>\n<p><a name=OPTBt></a></p>\n<h3>然后，要配置好允许的回调 Uri</h3>\n<p>不然的话，点击登录跳转到 Keycloak，Keycloak 会展示一个错误页面，显示回调 Uri 不正确。这时，可以配置两个（或者根据情况配置多个）Uri。 localhost 供本地调试，其他不同的线上环境按需添加：<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1665552985283-50a08803-329e-4b86-ab82-7aa442159f40.png#clientId=u9da87d50-8712-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=240&#x26;id=uf3e93411&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=480&#x26;originWidth=2520&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=94089&#x26;status=done&#x26;style=none&#x26;taskId=u753c8572-3b13-4413-bfff-83c0130d9c8&#x26;title=&#x26;width=1260\" alt=\"image.png\"></p>\n<p><a name=fsnGK></a></p>\n<h3>接着，配置 Web Origin</h3>\n<p>以上配置完成后，应用已经可以使用 Keycloak 登录了，登录成功后，回正常跳回应用。然后应用会使用 ajax 向 Keycloak 的 OIDC 服务请求 Token 和 UserInfo，由于这是纯前端，而非服务器端应用或者本地客户端应用，所以会碰到跨域 CORS 错误：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1665549983037-055c3ce5-e541-4586-af28-c841b7dfa849.png#clientId=u8d964a9d-f0cd-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;errorMessage=unknown%20error&#x26;from=ui&#x26;id=ua32fe3f1&#x26;margin=%5Bobject%20Object%5D&#x26;name=cors-error.png&#x26;originHeight=866&#x26;originWidth=1406&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=226468&#x26;status=error&#x26;style=none&#x26;taskId=u6acb81e8-934a-4183-846c-38edcd3e973&#x26;title=\" alt=\"cors-error.png\"></p>\n<p>所以，对于这种纯前端应用，就需要多一个 Web Origin 的配置，同样的，根据多个环境，可以相应地添加多个 Web Origin：<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1665550020588-728e1858-ef38-4ab0-98ba-7ccf65c98906.png#clientId=u8d964a9d-f0cd-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;errorMessage=unknown%20error&#x26;from=paste&#x26;height=180&#x26;id=u13704218&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=360&#x26;originWidth=2312&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=75515&#x26;status=error&#x26;style=none&#x26;taskId=u92bade12-2a46-4fad-8730-11c16026ba7&#x26;title=&#x26;width=1156\" alt=\"image.png\"></p>\n<p><a name=ZthkZ></a></p>\n<h2>Umi Js 引入 umi-plugin-oauth2 包</h2>\n<p>shell\nyarn add umi-plugin-oauth2</p>\n<p>不过，这个包还依赖其他几个 peer dependency，也需要一并安装一下（这是 umi-plugin-oauth2 的后续优化点，不需要用户手动安装 peer dependency）：</p>\n<p>shell\nyarn add ahooks client-oauth2 pkce</p>\n<p><a name=UAqL6></a></p>\n<h2>添加 oauth2Client 配置</h2>\n<p>在 umirc.[tj]s 文件中添加 oauth2Client 的配置项，这里需要填入一些 Keycloak 服务的可发现 Uri 以及其他信息。其中，那些可发现 OIDC 的 Uri 可以这样找到。先在领域配置中，点击 OpenID Endpoint Configuration：<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1665550340074-fb4218e1-c794-4b71-98f1-a8ce1f5881ef.png#clientId=u8d964a9d-f0cd-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;errorMessage=unknown%20error&#x26;from=paste&#x26;height=720&#x26;id=u2836a647&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1440&#x26;originWidth=2314&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=273297&#x26;status=error&#x26;style=none&#x26;taskId=u49165abc-b26b-420f-ae4a-bd63c45fc65&#x26;title=&#x26;width=1157\" alt=\"image.png\"></p>\n<p>在打开的新页面里，去拷贝相关的 Uri （这是 umi-plugin-oauth2 另一个的后续优化点，争取做到用户只需要填入这个可发现链接即可，插件包自行解析其他的 Uri）：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1665550491015-47b30897-00e5-4b1a-b189-3a5467f79234.png#clientId=u8d964a9d-f0cd-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;errorMessage=unknown%20error&#x26;from=paste&#x26;height=539&#x26;id=u69bd21ee&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1078&#x26;originWidth=2526&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=399499&#x26;status=error&#x26;style=none&#x26;taskId=u4df2dae1-6125-4ed0-9375-b11101a3c4e&#x26;title=&#x26;width=1263\" alt=\"image.png\"></p>\n<p>这样，得到的 umirc.[tj]s文件如下：</p>\n<p>javascript\n...</p>\n<p>oauth2Client: {\nclientId: demoapp,\naccessTokenUri:\n<a href=\"https://keycloak.jiwai.win/auth/realms/UniHeart/protocol/openid-connect/token\">https://keycloak.jiwai.win/auth/realms/UniHeart/protocol/openid-connect/token</a>,\nauthorizationUri:\n<a href=\"https://keycloak.jiwai.win/auth/realms/UniHeart/protocol/openid-connect/auth\">https://keycloak.jiwai.win/auth/realms/UniHeart/protocol/openid-connect/auth</a>,\nredirectUri: <a href=\"https://umi-ckeditor5.vercel.app/oauth2/callback\">https://umi-ckeditor5.vercel.app/oauth2/callback</a>,\nscopes: [openid, email, profile],\nuserInfoUri:\n<a href=\"https://keycloak.jiwai.win/auth/realms/UniHeart/protocol/openid-connect/userinfo\">https://keycloak.jiwai.win/auth/realms/UniHeart/protocol/openid-connect/userinfo</a>,\nuserSignOutUri:\n<a href=\"https://keycloak.jiwai.win/auth/realms/UniHeart/protocol/openid-connect/logout\">https://keycloak.jiwai.win/auth/realms/UniHeart/protocol/openid-connect/logout</a>,\nhomePagePath: /,\n},\n...</p>\n<p>注意以上的 redirectUri 填写了线上地址，在本地启动的话，得用本地的地址，这时，只需要在 umirc.local.[tj]s文件中覆盖 refirectUri 即可：</p>\n<p>javascript\nimport { defineConfig } from umi;</p>\n<p>export default defineConfig({\noauth2Client: {\nredirectUri: <a href=\"http://localhost:8000/oauth2/callback\">http://localhost:8000/oauth2/callback</a>,\n},\n});</p>\n<p><a name=HLBxr></a></p>\n<h2>添加一个 wrappers/auth.jsx 文件</h2>\n<p>比如这样：</p>\n<p>jsx\nimport React from react;\nimport { useEffect } from react;\nimport { useOAuth2User } from umi;</p>\n<p>const isEmptyObject = (obj) =>\nObject.keys(obj).length === 0 &#x26;&#x26; obj.constructor === Object;</p>\n<p>const Auth = (props) => {\nconst { children } = props;</p>\n<p>const { token, user, signIn, refresh } = useOAuth2User();</p>\n<p>useEffect(\n() => {\nconsole.log(token = , token, user);\nif (token === undefined || isEmptyObject(token) || user === undefined) {\nsignIn();\n} else if (token !== undefined) {\nrefresh(token);\n}\n},\n[],\n);</p>\n<p>if ((token !== undefined &#x26;&#x26; !isEmptyObject(token)) || user !== undefined) {\nreturn children;\n}</p>\n<p>return <span>Loading...</span>;\n};</p>\n<p>export default Auth;</p>\n<p><a name=aOeor></a></p>\n<h2>在组件中使用</h2>\n<p>比如像这样\njsx\nimport react;\nimport { useOAuth2User } from umi;</p>\n<p>export const UserInfo = () => {\nconst { token, user, signIn, signOut } = useOAuth2User();\nreturn (\n<div>\n<p>\n{!token ? (\n<button onClick={signIn}>登录</button>\n) : (\n<button onClick={signOut}>退出</button>\n)}\n</p>\n<div>\n<strong>Token Object</strong>: <br />\n&#x3C;textarea\nreadOnly\nstyle={{ width: 100%, height: 15em }}\nvalue={JSON.stringify(token, null, 4) ?? 登录后可见}\n></textarea>\n<strong>User Object</strong>:<br />\n&#x3C;textarea\nreadOnly\nstyle={{ width: 100%, height: 15em }}\nvalue={JSON.stringify(user, null, 4) ?? 登录后可见}\n></textarea>\n</div>\n</div>\n);\n};</p>\n<p>这样就完成了 UmiJs 和 Keycloak 的对接！</p>\n<p><a name=xcNAV></a></p>\n<h1>总结</h1>\n<p>采用 umi-plugin-oauth2 插件包，可以轻松对接 OAuth 2.0 授权服务。目前我给出了 IdentityServer 和 Keycloak 两个具体的例子。</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"Made with Stackbit.","url":"https://www.stackbit.com","style":"link","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}