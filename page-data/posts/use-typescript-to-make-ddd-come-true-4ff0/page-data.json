{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/posts/use-typescript-to-make-ddd-come-true-4ff0",
    "result": {"data":{"sitePage":null},"pageContext":{"url":"posts/use-typescript-to-make-ddd-come-true-4ff0","relativePath":"posts/use-typescript-to-make-ddd-come-true-4ff0","frontmatter":{"title":"Use TypeScript to make DDD come true","stackbit_url_path":"posts/use-typescript-to-make-ddd-come-true-4ff0","date":"2021-07-22T11:54:37Z","excerpt":"","tags":"","categories":"","template":"post"},"html":"<h2>\n  <a name=\"ddd\" href=\"#ddd\">\n  </a>\n  DDD\n</h2>\n<p>Domain Driven Design is popular and even became a de facto standard for enterprise technology team, however, it's only showcases, not the real implementation. How many times that you see the fancy design diagrams and at them same the poor code? </p>\n<p>Many people prefers design first, what implies that code is the implementation, and only the slide shows are design. But actually, code is design.</p>\n<h2>\n  <a name=\"code-design-model-documents\" href=\"#code-design-model-documents\">\n  </a>\n  Code = Design = Model = Documents\n</h2>\n<p>If not the case, then everytime you change the code you need to update the UML class diagrams and database E-R design documents. And eventually these kind of documents becomes unreliable gradually because you can't make sure that they are updated in time.</p>\n<p>In fact, code is more suitable for expressing the designs, and source code is a document indeed, can be used to describe the current product's design decisions perfectly.</p>\n<p>If developer created a domain model by code which is consistent with what in a domain expert's brain, then the source code is the most efficient, realtime model no doubtedly.</p>\n<p>The limit of the equation of <code>Code = Deisgn = Model = Documents</code> is whether the domain expert can read the code. So the easy to learn, expressive and intuitive programming language will have strong benefits in the process of creating domain models.</p>\n<h2>\n  <a name=\"domain-modelling\" href=\"#domain-modelling\">\n  </a>\n  Domain Modelling\n</h2>\n<p>Domain modelling is the most important part in DDD for developers as it requires developers have good abstraction, and it differs from traditional database modelling, and need developers to map the domain knowledge into the code models through the most efficient programming technic.</p>\n<p>In the long run, the object oriented language is the first choice of domain modelling, some OO skills can be used to do the domain model abstraction. In the contrary, the functional programming langauges are typically thought to be suitable only for data processing, scientific computing, etc.</p>\n<h2>\n  <a name=\"typescript\" href=\"#typescript\">\n  </a>\n  TypeScript\n</h2>\n<p>But this article shows that TypeScript, which has many functional programming features (<br>\nTypeScript's type system fully meets the functional programming requirements), can be used to do the domain modelling, and thanks to its type system and related tool chains, TypeScript should be considered as the best language to make DDD landing.</p>\n<h2>\n  <a name=\"typescripts-type-system\" href=\"#typescripts-type-system\">\n  </a>\n  TypeScript's type system\n</h2>\n<p>Comparing to OO, you only need to know a few grammer and it's enough to start domain modelling, so in terms of simplicity, algebraic data type is more suitable for domain modelling so as to make the domain models be documents.</p>\n<h2>\n  <a name=\"type\" href=\"#type\">\n  </a>\n  Type\n</h2>\n<p>All kinds of programming languages provide primitive types by design, such as <code>string</code>, <code>bool</code>, <code>number</code>, etc.</p>\n<p>In TypeScript, you can use the keyword <code>type</code> to compose larger types:<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">Name</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">firstName</span><span class=\"p\">:</span> <span class=\"kr\">string</span>\n  <span class=\"na\">middleName</span><span class=\"p\">:</span> <span class=\"kr\">string</span>\n  <span class=\"na\">lastName</span><span class=\"p\">:</span> <span class=\"kr\">string</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n<pre><code>&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\">&#x3C;title>Exit fullscreen mode&#x3C;/title>\n&#x3C;path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\">&#x3C;/path>\n</code></pre>\n</svg>\n</div>\n</div>\n</div>\n<p>The usage of the above is obviouse, and besides this kind of usage, the keyword <code>type</code> has other usages, which is not a trivial feature. It can help you record the domain knowledge into domain models, for example:<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">const</span> <span class=\"nx\">timeToFly</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n<pre><code>&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\">&#x3C;title>Exit fullscreen mode&#x3C;/title>\n&#x3C;path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\">&#x3C;/path>\n</code></pre>\n</svg>\n</div>\n</div>\n</div>\n<p>you can not guess the domain knowledge at first glance at the above code. How to make sure what the 10 means? Look up in a document? No, you need to tell yourself that code is document, so you improve your code as follows:<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">Second</span> <span class=\"o\">=</span> <span class=\"kr\">number</span>\n<span class=\"kd\">const</span> <span class=\"nx\">timeToFly</span><span class=\"p\">:</span> <span class=\"nx\">Second</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n<pre><code>&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\">&#x3C;title>Exit fullscreen mode&#x3C;/title>\n&#x3C;path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\">&#x3C;/path>\n</code></pre>\n</svg>\n</div>\n</div>\n</div>\n<h2>\n  <a name=\"type-or\" href=\"#type-or\">\n  </a>\n  Type Or\n</h2>\n<p>In TypeScript, they are called as Union Types, which can be built by the symbol <code>|</code>:<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">Pet</span> <span class=\"o\">=</span> <span class=\"nx\">Fish</span> <span class=\"o\">|</span> <span class=\"nx\">Bird</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n<pre><code>&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\">&#x3C;title>Exit fullscreen mode&#x3C;/title>\n&#x3C;path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\">&#x3C;/path>\n</code></pre>\n</svg>\n</div>\n</div>\n</div>\n<p>So <code>Pet</code> is in type <code>Fish</code> or <code>Bird</code>. In general, functional programming languages have strong pattern match capability to process this kind of type. But the sad thing is TypeScript has limited pattern match capability so you can often see some string literals present in the types to distinguish different types.</p>\n<h2>\n  <a name=\"type-and\" href=\"#type-and\">\n  </a>\n  Type And\n</h2>\n<p>In TypeScript, they are called as Intersection Types, which can be built by the symbol <code>&amp;</code>:<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">ABC</span> <span class=\"o\">=</span> <span class=\"nx\">A</span> <span class=\"o\">&amp;</span> <span class=\"nx\">B</span> <span class=\"o\">&amp;</span> <span class=\"nx\">C</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n<pre><code>&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\">&#x3C;title>Exit fullscreen mode&#x3C;/title>\n&#x3C;path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\">&#x3C;/path>\n</code></pre>\n</svg>\n</div>\n</div>\n</div>\n<p>The above code tries to say that type ABC contains all A, B and C's properties.</p>\n<h2>\n  <a name=\"define-function-types\" href=\"#define-function-types\">\n  </a>\n  Define Function Types\n</h2>\n<p>In TypeScript, there were no differences between function and other types, so you can define functions by using the keyword <code>type</code>:<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">Add</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"kr\">number</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n<pre><code>&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\">&#x3C;title>Exit fullscreen mode&#x3C;/title>\n&#x3C;path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\">&#x3C;/path>\n</code></pre>\n</svg>\n</div>\n</div>\n</div>\n<p>The above code shows that <code>Add</code> is a function who accepts 2 numbers as arguments and returns a number.</p>\n<h2>\n  <a name=\"using-code-to-share-domain-knowledge\" href=\"#using-code-to-share-domain-knowledge\">\n  </a>\n  Using code to share domain knowledge\n</h2>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">CreditCard</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">cardNo</span><span class=\"p\">:</span> <span class=\"kr\">string</span>\n  <span class=\"na\">firstName</span><span class=\"p\">:</span> <span class=\"kr\">string</span>\n  <span class=\"na\">middleName</span><span class=\"p\">:</span> <span class=\"kr\">string</span>\n  <span class=\"na\">lastName</span><span class=\"p\">:</span> <span class=\"kr\">string</span>\n  <span class=\"na\">contactEmail</span><span class=\"p\">:</span> <span class=\"nx\">Email</span>\n  <span class=\"na\">contactPhone</span><span class=\"p\">:</span> <span class=\"nx\">Phone</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n<pre><code>&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\">&#x3C;title>Exit fullscreen mode&#x3C;/title>\n&#x3C;path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\">&#x3C;/path>\n</code></pre>\n</svg>\n</div>\n</div>\n</div>\n<p>Notice that we can easily write the above code by just having the knowledge showed previously, to describe the <code>CreditCard</code> payment method. Also please notice we don't use <code>class</code> here.</p>\n<p>But is it a reliable domain model? If not, where is the problem?</p>\n<p>The most serious problem of the above code is that it didn't record the domain knowledge which should be owned by it inside of it. Let me ask some questions:</p>\n<p>Question: can <code>middle name</code> be empty?<br>\nAnswer 1: Not sure, need to check document.<br>\nAnswer 2: Maybe? <code>middle name</code> can be null.</p>\n<h2>\n  <a name=\"modelling-for-the-nullable-type\" href=\"#modelling-for-the-nullable-type\">\n  </a>\n  Modelling for the nullable type\n</h2>\n<p>In functional programming languages, the nullable types can be defined as Optional. Although null is valid in TypeScript (Note: we can enable <code>strictNullChecks</code> to enforece the null check), but in functional programming, you can only use Optional type to express nullable type.</p>\n<p>If the domain expert tells you that <code>middle name</code> can exists, or be empty. Plese notice the word \"or\", indicate that we can use Union Type to model for the nullable type:<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">Optional</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">T</span> <span class=\"o\">|</span> <span class=\"kc\">null</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n<pre><code>&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\">&#x3C;title>Exit fullscreen mode&#x3C;/title>\n&#x3C;path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\">&#x3C;/path>\n</code></pre>\n</svg>\n</div>\n</div>\n</div>\n<p>A simple Optional is just a Type Or. The improved code looks as follows:<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">CreditCard</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">cardNo</span><span class=\"p\">:</span> <span class=\"kr\">string</span>\n  <span class=\"na\">firstName</span><span class=\"p\">:</span> <span class=\"kr\">string</span>\n  <span class=\"na\">middleName</span><span class=\"p\">:</span> <span class=\"nx\">Option</span><span class=\"o\">&lt;</span><span class=\"kr\">string</span><span class=\"o\">&gt;</span>\n  <span class=\"na\">lastName</span><span class=\"p\">:</span> <span class=\"kr\">string</span>\n  <span class=\"na\">contactEmail</span><span class=\"p\">:</span> <span class=\"nx\">Email</span>\n  <span class=\"na\">contactPhone</span><span class=\"p\">:</span> <span class=\"nx\">Phone</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n<pre><code>&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\">&#x3C;title>Exit fullscreen mode&#x3C;/title>\n&#x3C;path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\">&#x3C;/path>\n</code></pre>\n</svg>\n</div>\n</div>\n</div>\n<h2>\n  <a name=\"avoid-primitive-obsession\" href=\"#avoid-primitive-obsession\">\n  </a>\n  Avoid Primitive Obsession\n</h2>\n<p>Question: Can we express <code>cardNo</code> with <code>string</code>? If so can it be any string? Is <code>firstName</code> an arbitrary length string? Obviously you can't answer these questions as this model doesn't contain relative domain knowledge.</p>\n<p>You may use <code>string</code> type for <code>cardNo</code> during programming, but in domain model, <code>string</code> can't express the domain knowledge of <code>cardNo</code>.</p>\n<p><code>cardNo</code> is a 19-length string starts with <code>200</code>, <code>name</code> is a string whose length is less than or equal to 50. As such, the domain information can be implemented by <code>type alias</code>:<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">CardNo</span> <span class=\"o\">=</span> <span class=\"kr\">string</span>\n<span class=\"kd\">type</span> <span class=\"nx\">Name50</span> <span class=\"o\">=</span> <span class=\"kr\">string</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n<pre><code>&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\">&#x3C;title>Exit fullscreen mode&#x3C;/title>\n&#x3C;path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\">&#x3C;/path>\n</code></pre>\n</svg>\n</div>\n</div>\n</div>\n<p>With the above types, you now have chance to include the <code>cardNo</code> business rules inside domain models by defining function.<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">GetCardNo</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">cardNo</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">CardNo</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n<pre><code>&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\">&#x3C;title>Exit fullscreen mode&#x3C;/title>\n&#x3C;path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\">&#x3C;/path>\n</code></pre>\n</svg>\n</div>\n</div>\n</div>\n<p>If a user typed in a string with 20 length, then what will the function <code>GetCardNo</code> return? null? or exception thrown? Actually functionaly programming has more elegant way such as Either Monad or Railway oriented programming to handle errors. At least we can present the function's signature by Optional:<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">GetCardNo</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">cardNo</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Optional</span><span class=\"o\">&lt;</span><span class=\"nx\">CardNo</span><span class=\"o\">&gt;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n<pre><code>&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\">&#x3C;title>Exit fullscreen mode&#x3C;/title>\n&#x3C;path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\">&#x3C;/path>\n</code></pre>\n</svg>\n</div>\n</div>\n</div>\n<p>The function expresses the validation process clearly, if you user typed in a string, then returns a CardNo type or empty.<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">CreditCard</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">cardNo</span><span class=\"p\">:</span> <span class=\"nx\">Optional</span><span class=\"o\">&lt;</span><span class=\"nx\">CardNo</span><span class=\"o\">&gt;</span>\n  <span class=\"na\">firstName</span><span class=\"p\">:</span> <span class=\"nx\">Name50</span>\n  <span class=\"na\">middleName</span><span class=\"p\">:</span> <span class=\"nx\">Optional</span><span class=\"o\">&lt;</span><span class=\"kr\">string</span><span class=\"o\">&gt;</span>\n  <span class=\"na\">lastName</span><span class=\"p\">:</span> <span class=\"nx\">Name50</span>\n  <span class=\"na\">contactEmail</span><span class=\"p\">:</span> <span class=\"nx\">Email</span>\n  <span class=\"na\">contactPhone</span><span class=\"p\">:</span> <span class=\"nx\">Phone</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n<pre><code>&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\">&#x3C;title>Exit fullscreen mode&#x3C;/title>\n&#x3C;path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\">&#x3C;/path>\n</code></pre>\n</svg>\n</div>\n</div>\n</div>\n<p>So now the code is full of domain knowledge, and these types can be used as unit tests as well. For example, you'll never assign an email to contactPhone, as they are not string, so in turn they represent different domain knowledge.</p>\n<h2>\n  <a name=\"the-atomicity-and-composibility-of-the-domain-models\" href=\"#the-atomicity-and-composibility-of-the-domain-models\">\n  </a>\n  The Atomicity and Composibility of the domain models\n</h2>\n<p>There were 3 names in the above domain model, can they be changed separately? for example, change <code>middle name</code> only? If not how can we encapsulate the knowledge of atomicity change into the domain model?</p>\n<p>In fact we can easily extract <code>Name</code> and <code>Contact</code> types and compose them:<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">Name</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">firstName</span><span class=\"p\">:</span> <span class=\"nx\">Name50</span>\n  <span class=\"na\">middleName</span><span class=\"p\">:</span> <span class=\"nx\">Option</span><span class=\"o\">&lt;</span><span class=\"kr\">string</span><span class=\"o\">&gt;</span>\n  <span class=\"na\">lastName</span><span class=\"p\">:</span> <span class=\"nx\">Name50</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">type</span> <span class=\"nx\">Contact</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">contactEmail</span><span class=\"p\">:</span> <span class=\"nx\">Email</span>\n  <span class=\"na\">contactPhone</span><span class=\"p\">:</span> <span class=\"nx\">Phone</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">type</span> <span class=\"nx\">CreditCard3</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">cardNo</span><span class=\"p\">:</span> <span class=\"nx\">Optional</span><span class=\"o\">&lt;</span><span class=\"nx\">CardNo</span><span class=\"o\">&gt;</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"nx\">Name</span>\n  <span class=\"na\">contact</span><span class=\"p\">:</span> <span class=\"nx\">Contact</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n<pre><code>&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\">&#x3C;title>Exit fullscreen mode&#x3C;/title>\n&#x3C;path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\">&#x3C;/path>\n</code></pre>\n</svg>\n</div>\n</div>\n</div>\n<h2>\n  <a name=\"make-the-error-state-cant-be-present\" href=\"#make-the-error-state-cant-be-present\">\n  </a>\n  Make the error state can't be present\n</h2>\n<p>There is an important principle in domain modelling, which can be understood as: The domain models you built should have as many static validations and constraints as possible to make error occurs in compilation time instead of run time, so as to avoid the chance for mistakes. In fact all the domain modellings are following this principle, for example, the Email type and Phone type in the above code. Why not use string? Because string is lakcing of domain knowledges, which gives developers chances to make mistakes.</p>\n<p>Let's see another example. The above domain model has a contact type, which contains an Email and Phone properties. After payment done, system can utilize these 2 properties to send notification to user, so there is a rule generated: User must fill in Email or Phone to receive payment messages.</p>\n<p>First of all, the above domain models are not matching this business rule, because both Email and Phone are non-nullable type, which means these 2 properties are both required.</p>\n<p>Can we change both of them to be Optional?<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">Contact</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">contactEmail</span><span class=\"p\">:</span> <span class=\"nx\">Option</span><span class=\"o\">&lt;</span><span class=\"nx\">Email</span><span class=\"o\">&gt;</span>\n  <span class=\"na\">contactPhone</span><span class=\"p\">:</span> <span class=\"nx\">Option</span><span class=\"o\">&lt;</span><span class=\"nx\">Phone</span><span class=\"o\">&gt;</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n<pre><code>&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\">&#x3C;title>Exit fullscreen mode&#x3C;/title>\n&#x3C;path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\">&#x3C;/path>\n</code></pre>\n</svg>\n</div>\n</div>\n</div>\n<p>Obviousely we can't do this, as it violets the principle of Make illegal state unrepresentable, so gives chances for coding mistakes. Your domain model represents an illegal state, that both Email and Phone can be empty. You may argue that my xxService will do the validation, to make sure they'll never be both empty. Sorry, we hope our domain model can encapsulate this domain knowledge. For xxService, it's unrelated to domain model. So can we express this rule in the modle model or not? The answer is yes! Because there is a \"or\" in the rule, so it implies that we can use the type Or (union type) to express this relationship:<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">OnlyContactEmail</span> <span class=\"o\">=</span> <span class=\"nx\">Email</span> \n<span class=\"kd\">type</span> <span class=\"nx\">OnlyContactPhone</span> <span class=\"o\">=</span> <span class=\"nx\">Phone</span>\n<span class=\"kd\">type</span> <span class=\"nx\">BothContactEmailAndPhone</span> <span class=\"o\">=</span> <span class=\"nx\">Email</span> <span class=\"o\">&amp;</span> <span class=\"nx\">Phone</span>\n<span class=\"kd\">type</span> <span class=\"nx\">Contact</span> <span class=\"o\">=</span> \n  <span class=\"o\">|</span> <span class=\"nx\">OnlyContactEmail</span>\n  <span class=\"o\">|</span> <span class=\"nx\">OnlyContactPhone</span>\n  <span class=\"o\">|</span> <span class=\"nx\">BothContactEmailAndPhone</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n<pre><code>&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\">&#x3C;title>Exit fullscreen mode&#x3C;/title>\n&#x3C;path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\">&#x3C;/path>\n</code></pre>\n</svg>\n</div>\n</div>\n</div>\n<h2>\n  <a name=\"conclusion\" href=\"#conclusion\">\n  </a>\n  Conclusion\n</h2>\n<p>By using TypeScript to guide the domain modelling, we can avoid classes and sub classes, let alone the keywords <code>abstract</code> and <code>bean</code>, etc.</p>\n<p>To measure how good or how bad a domain model is, we need to judge</p>\n<ul>\n<li>is the domain model contains as many domain knowledges as possible, can it map the domain models inside domain experts' brains?</li>\n<li>Can domain model itself be the documents, so everyone can share and communicate with it?</li>\n</ul>\n<p>At the mean time, a framework should have as less jargons as possible. For example if you created a domain model class named <code>AbstractContactBase</code>, you increased the complexity of the system without any help on domain models sharing.</p>\n<h2>\n  <a name=\"bonus\" href=\"#bonus\">\n  </a>\n  Bonus\n</h2>\n<p>If you use TypeScript, not only you can build a rich model models, but also you can utilize some tools to generate UMLs from the code. So you can birdview the project's domain models very quickly!</p>\n<h2>\n  <a name=\"tplant\" href=\"#tplant\">\n  </a>\n  tplant\n</h2>\n<p>tplant is that kind of tool which I participated in it.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--IAzP1fuZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9okp5nazpqfhv8tbnnr2.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--IAzP1fuZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9okp5nazpqfhv8tbnnr2.jpg\" alt=\"tplant in github\" loading=\"lazy\"></a></p>\n<h2>\n  <a name=\"screen-recording-of-usage\" href=\"#screen-recording-of-usage\">\n  </a>\n  Screen recording of usage\n</h2>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--jsmLgI6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/849de7pmnompjdxc2lt6.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--jsmLgI6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/849de7pmnompjdxc2lt6.gif\" alt=\"Screen recording of using tplant\" loading=\"lazy\"></a></p>\n<h2>\n  <a name=\"text-version-of-usage\" href=\"#text-version-of-usage\">\n  </a>\n  Text version of usage\n</h2>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>npm <span class=\"nb\">install</span> <span class=\"nt\">--global</span> tplant\n<span class=\"nb\">cd </span>your-typescript-project-folder\ntplant <span class=\"nt\">--input</span> src/<span class=\"k\">**</span>/<span class=\"k\">*</span>.ts <span class=\"nt\">--output</span> output.svg\nopen output.svg\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n<pre><code>&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\">&#x3C;title>Exit fullscreen mode&#x3C;/title>\n&#x3C;path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\">&#x3C;/path>\n</code></pre>\n</svg>\n</div>\n</div>\n</div>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"Made with Stackbit.","url":"https://www.stackbit.com","style":"link","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},
    "staticQueryHashes": []}