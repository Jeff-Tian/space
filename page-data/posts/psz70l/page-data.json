{"componentChunkName":"component---src-templates-post-js","path":"/posts/psz70l","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/psz70l","relativePath":"posts/psz70l","frontmatter":{"title":"身份验证哪家强？Identity Server 初体验","stackbit_url_path":"posts/psz70l","date":"2022-03-16T09:37:40","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<p>前几天发了一篇文章，对比了 Keycloak 和  Authing，结论是尽管 Keycloak 功能很强大，并且是开源产品，但是其中文文档的缺失，以及 Authing 和中国市场的深度结合，所以使用 Authing 不仅上手快，而且在和微信打通的场景下具有特别大的优势。</p>\n<p>我自己做了一个小小的演示，在微信小程序里集成 Authing 登录，主要工作在于配置，基本上是低代码开发模式。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1647416033310-cf09f1b9-d09f-4935-a978-1075835a98f0.png#clientId=uf332c46d-73bf-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=215&#x26;id=u60aa2bb2&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=430&#x26;originWidth=430&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=142791&#x26;status=done&#x26;style=none&#x26;taskId=u9d76141e-cb74-4b82-9728-33b3949decb&#x26;title=&#x26;width=215\" alt=\"image.png\"></p>\n<p>但是，和 Keycloak 不同的是，Authing 是一个商业化产品，因此在很多方面做得比 Keycloak 要更好（起码 UI 看起来更现代，更舒服）。</p>\n<p>当然借助开源社区， Keycloak 也可以和微信生态打通，如果还有没打通的地方，也许是开源爱好者的机会。我自己也借助开源社区的现有 Keycloak 插件，实现过基于 Keycloak 的关注微信公众号即登录的方案：</p>\n<p>今天再以集成企业微信登录为例，对比一下几款不同的身份认证产品。</p>\n<p><a name=cHOtF></a></p>\n<h1>Authing</h1>\n<p>Authing 就略过了，因为它内置支持，并且官方有详细的接入文档。</p>\n<p><a name=PzPV4></a></p>\n<h1>Keycloak</h1>\n<p>Keycloak 官方完全没有企业微信的文档资料，好在有人贡献了 Keycloak 的企业微信登录开源插件，我也集成在自己的 Keycloak 实例中了，尽管这个插件做得比较粗糙，但是只需要填入几个参数，不用写一行代码。</p>\n<p>效果如下视频所示：</p>\n<p><a name=WJCdn></a></p>\n<h2>集成步骤</h2>\n<p>首先，通过 <a href=\"https://github.com/kkzxak47/keycloak-services-social-wechatwork\">https://github.com/kkzxak47/keycloak-services-social-wechatwork</a> 获取企业微信登录插件。需要拷贝一个 jar 包，以及两个 html 模板文件，比如放在待集成的 Keycloak 项目的 idps 目录下：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1647420261122-08f9d4a3-b8d1-42bf-8d80-0716fc83d54f.png#clientId=uf332c46d-73bf-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=140&#x26;id=u7e638000&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=280&#x26;originWidth=408&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=37048&#x26;status=done&#x26;style=none&#x26;taskId=ua1ad278a-142f-4ac6-bb44-5017a9ecfad&#x26;title=&#x26;width=204\" alt=\"image.png\"></p>\n<p>然后，在 Dockerfile 文件中，增加如下几行：</p>\n<p>shell</p>\n<p>COPY idps/wecom/keycloak-services-social-wechat-work.jar\n/opt/jboss/keycloak/providers/</p>\n<p>COPY idps/wecom/templates/realm-identity-provider-wechat-work.html\n/opt/jboss/keycloak/themes/base/admin/resources/partials\nCOPY idps/wecom/templates/realm-identity-provider-wechat-work-ext.html\n/opt/jboss/keycloak/themes/base/admin/resources/partials</p>\n<h1>add <module name=org.infinispan services=import/> to dependencies</h1>\n<p>RUN sed -ie s#<dependencies>#<dependencies><module name=org.infinispan services=import/># /opt/jboss/keycloak/modules/system/layers/keycloak/org/keycloak/keycloak-services/main/module.xml</p>\n<p>随后使用这个 Dockerfile 部署好后，你的 Keycloak 实例的身份提供者列表里就多了一个企业微信的选项。添加它后，填入相关的 ClientId、AgentId 以及 Secret，就集成完毕了。</p>\n<p>完整的 Dockerfile 请见： <a href=\"https://github.com/Jeff-Tian/keycloak-heroku/blob/master/Dockerfile\">https://github.com/Jeff-Tian/keycloak-heroku/blob/master/Dockerfile</a>  。\n<a name=Sl8Rg></a></p>\n<h1>IdentityServer</h1>\n<p>Authing 和 Keycloak 在之前都有多个系列文章介绍过，帮本篇文章没有做详细介绍。但是 IdentityServer，有必要隆重介绍一下，因为这是我第一次了解到它：</p>\n<p>IdentityServer 是一个授权服务器，它实现了 OpenID Connect （OIDC）以及 OAuth2.0 标准。Keyclock 是用 Java 写的，而 IdentityServer 是使用 C# 写的，并且是一个 ASP.NET Core 中间件，即不像 Keycloak，它本身不能独立存在，必须寄宿在一个 ASP.NET 或者 ASP.NET Core 的宿主应用中。它被设计用来提供一种通用的方式来为流向所有的应用的请求鉴权，不管是网页、原生应用、手机抑或 API 端点。即能为多个应用及应用类型实现单点登录，也能使用登录表单或者其他类似的用户界面来验证真实的用户，当然也能通过令牌颁发、验证、无界面地更新令牌等方式来为服务鉴权。</p>\n<p>IdentityServer  的定位是高安全的 OAuth，尽管 OAuth 和 OIDC 已经成为了保护 API 的标准并得到了广泛的应用，但是有些环境是需要更高的安全性的。IdentityServer 可以支持这些需要 “OAuth 3.0” 的场景。</p>\n<p><a name=Gbfoa></a></p>\n<h2>部署 IdentityServer</h2>\n<p>本文没有冠以 Free Arch 的标题，因为 IdentityServer 并不是免费的，即要真实投产，还得购买许可证。但是要测试完全没有阻碍。我要调研一下使用它来集成企业微信登录，首先得部署一个包含了 IdentityServer 中间件的应用，正如前面介绍的，IdentityServer 是一个中间件，还只能寄宿在 ASP.NET (Core) 的应用中，因此，需要找一个支持 ASP.NET Core 运行时的环境。</p>\n<p>尽管 IdentityServer 本身不免费，但是好在仍然有可以免费托管它的云平台，因为是 ASP.NET Core 应用，自然想到了 Microsoft Azure。令人惊讶的是，Azure 提供了 10 个 App 的永久免费方案，实在太棒了！</p>\n<p>IdentityServer 提供了一个包含 IdentityServer 中间件的示例应用，只要将它部署到 Azure 即可。直接 Fork 它到自己的 GitHub 账号下，比如： <a href=\"https://github.com/jeff-tian/IdentityServer\">https://github.com/jeff-tian/IdentityServer</a>。这样在后续的 Azure 平台操作时，可以方便地通过配置搞定 GitHub Actions CICD 流水线，毕竟 GitHub 现在是微软亲生的了。</p>\n<p>在 Azure 控制台里创建一个 Web 应用，选择从 GitHub 部署，根据指引，授权 GitHub 后，选择刚刚 Fork 过来的仓库，直到走到“查看+创建”这一步，点击创建，就大功告成了！</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1647421786408-b4d0d6ed-515d-4b53-9a3f-1761c1226029.png#clientId=uf332c46d-73bf-4&#x26;crop=0&#x26;crop=0&#x26;crop=0.4249&#x26;crop=1&#x26;from=ui&#x26;height=897&#x26;id=u11e4dcf6&#x26;margin=%5Bobject%20Object%5D&#x26;name=WX20220315-171953%402x.png&#x26;originHeight=2110&#x26;originWidth=3584&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=430139&#x26;status=done&#x26;style=none&#x26;taskId=uc766fdd1-f50d-46ca-aa10-e114128bef7&#x26;title=&#x26;width=1523\" alt=\"WX20220315-171953@2x.png\"></p>\n<p>由于我是用了最新的 IdentityServer 6，于是给这个应用起名为 id6，Azure 给我的应用分配的域名就是： <a href=\"https://id6.azurewebsites.net/\">id6.azurewebsites.net/</a>。</p>\n<p>在部署完成后，就可以访问这个链接了，但是当然不会自动有企业微信的登录方式。</p>\n<p><a name=j0kqa></a></p>\n<h2>创建一个企业微信应用</h2>\n<p>尽管在 Keycloak 集成企业微信登录时，我已经创建了一个企业微信应用，但是在这里不能复用。主要是由于企业微信应用里的扫码登录回调域名，只能设置一个，之前的设置了 Keycloak 实例的 URL，因此在这里，得为 id6.azurewebsite.net 再创建一个应用。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1647422175889-9565abcb-9cb2-4ec1-a168-91927f31770f.png#clientId=uf332c46d-73bf-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=318&#x26;id=u654e7f92&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=635&#x26;originWidth=1404&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=101906&#x26;status=done&#x26;style=none&#x26;taskId=u48444c38-218d-437b-b98c-2e965ab3630&#x26;title=&#x26;width=702\" alt=\"image.png\"></p>\n<p>并且设置好回调域名：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1647422200920-d23fe81f-e22a-4367-9c50-7826fa62e8a9.png#clientId=uf332c46d-73bf-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=295&#x26;id=ub936f3b9&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=590&#x26;originWidth=985&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=57159&#x26;status=done&#x26;style=none&#x26;taskId=u3569f756-98d2-4326-88e6-05596ed969c&#x26;title=&#x26;width=492.5\" alt=\"image.png\">\n<a name=lAQzu></a></p>\n<h2>引入企业微信登录方式的依赖</h2>\n<p>感谢开源的世界，有人已经做好了企业微信和 IdentityServer 的适配，只需要引入到项目中即可。\nxml\n<PackageReference Include=AspNet.Security.OAuth.WorkWeixin Version=6.0.4 /></p>\n<p>可以使用命令行一键完成依赖引入：\nshell\ndotnet add package AspNet.Security.OAuth.WorkWeixin --version 6.0.4</p>\n<p><a name=zez3c></a></p>\n<h2>增加企业微信登录的代码</h2>\n<p>需要找到文件 hosts/main/HostingExtensions.cs，并在添加外部身份提供者的代码处增加企业微信方式：\ncsharp\nprivate static void AddExternalIdentityProviders(this WebApplicationBuilder builder)\n{\n// configures the OpenIdConnect handlers to persist the state parameter into the server-side IDistributedCache.\nbuilder.Services.AddOidcStateDataFormatterCache(aad, demoidsrv);\nbuilder.Services.AddAuthentication()\n...\n.AddWorkWeixin(wecom, 企业微信, options => {\noptions.SignInScheme = IdentityServerConstants.ExternalCookieAuthenticationScheme;\noptions.ClientId = 替换成你自己的;\noptions.ClientSecret = 替换成你自己的;\noptions.AgentId = 替换成你自己的;\n});\n}</p>\n<p>提交到 GitHub 后，在 Azure 创建时自动生成的 GitHub Action 就开始工作了，重新部署后，这个示例应用就有了企业微信登录的方式：</p>\n<p><a href=\"https://id6.azurewebsites.net/Account/Login\">https://id6.azurewebsites.net/Account/Login</a></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1647422718879-d1e123ba-565a-4265-8792-dbc7cedbc63d.png#clientId=uf332c46d-73bf-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=344&#x26;id=u933494b3&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=687&#x26;originWidth=1429&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=98846&#x26;status=done&#x26;style=none&#x26;taskId=udd6ee2de-6793-47a4-afcb-805ff554d3a&#x26;title=&#x26;width=714.5\" alt=\"image.png\"></p>\n<p><a name=jFOtq></a></p>\n<h2>视频演示</h2>\n<p><a href=\"https://www.zhihu.com/zvideo/1487480084424122368\">https://www.zhihu.com/zvideo/1487480084424122368</a></p>\n<p><a name=bRZZB></a></p>\n<h1>总结</h1>\n<p>对小白来说，建议使用 Authing，中文文档以及和微信生态的结合都内置特别全面和详细的文档。善于折腾，则可以考虑 Keycloak，但是 Keycloak 部署起来的，消耗的资源其实比较大，选择 IdentityServer 则可以更轻量地部署。</p>\n<p>尽管 Keycloak 使用 Java 开发，而 IdentityServer 使用 C#，但并不意味着，Keycloak 只能用在 Java 项目，也不意味着 IdentityServer 只能用在 ASP.NET 项目。尽管 IdentityServer 是一个中间件的存在，一定需要部署一个 ASP.NET (Core) 应用，但是一旦部署好，就和 Keycloak 一样，支持更上层的 OAuth 以及 OIDC 等等开放协议，它们并不依赖任何技术栈，所以都可以使用在任何语言开发的应用上。</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"本站源码","url":"https://github.com/Jeff-Tian/space","style":"link","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}