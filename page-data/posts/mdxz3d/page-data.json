{"componentChunkName":"component---src-templates-post-js","path":"/posts/mdxz3d","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/mdxz3d","relativePath":"posts/mdxz3d","frontmatter":{"title":"Free Arch: 在微信小程序里执行远程 C++ 代码","stackbit_url_path":"posts/mdxz3d","date":"2022-02-02T04:49:42","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<p><a name=LFYhz></a></p>\n<h1>前情提要</h1>\n<p>前面已经写了好几篇文章分享，如何实现一个 react view，来局部突破个人版微信小程序不能加载 webview 的限制。即，通过使用 eval5 这个 js 库，来加载远程 react js 代码，并渲染在小程序页面中。</p>\n<p>这样实现的 react view 其实不仅帮助了个人版小程序突破限制，而且对于企业版微信小程序也是有价值的。因为企业版微信小程序虽然可以加载 webview，但是 webivew 只能是一个单独页面，和小程序本体几乎完割裂了。然后 react view，自由度更大，至于是单独页面，还是页面局部渲染，完全取决于开发者。</p>\n<p>其次，通过 react view 还可以部分打破个人订阅号的自定义菜单不能跳转到外链的限制。</p>\n<p>总之，个人版的微信小程序虽然限制了 webview 的加载，但是没有限制外部 js 代码的加载。通过使用 eval5 这个 js 库，理论上可以执行任意的远程 js 代码。虽然前面的分享只实现了 react view，但是实际上可以实现任意的 view。</p>\n<p>react view 实现了加载和渲染远程的 react js 应用，比如前面文章分享的实战案例：在微信小程序里加载 <a href=\"https://tictactoe.js.org\">https://tictactoe.js.org</a> 的部分代码，就可以让 AI 井字棋游戏渲染在微信小程序里。</p>\n<p><a name=T2hxn></a></p>\n<h1>在微信小程序里执行远程 C++ 代码</h1>\n<p>春节期间，前面分享了一些免费制作和分享微信红包封面的小技巧：</p>\n<p>过了年，就是虎年了。新的一年，程序员又要学习新的语言了。</p>\n<p>我准备开始学习 C++，因为正在学习《编程珠玑》，而这本书中给出的案例和习题解答，多数是 C 和 C++ 代码。大学里只学过谭浩强的 C 语言课程，C++ 没有碰过，决定碰一碰。</p>\n<p>可是不想像大学里学 C 语言一样，只在本机跑一跑程序。我喜欢把做过的东西放在网上，自由运行。C++，可以通过 Web Assembly，方便地跑在网页上，比如跑一个 Hello World：\ncpp\n#include <iostream></p>\n<p>int main() {\nstd::cout &#x3C;&#x3C; Hello World!n;\n}</p>\n<p>。</p>\n<p>又比如《编程珠玑》的第一个练习题：“如果不缺内存，如何使用一个具有库的语言来实现一种排序算法以表示和排序集合？”，书中给出的一个 C++ 实现是这样的：</p>\n<p>cpp\n#include <set>\n#include <string>\n#include <iostream></p>\n<p>using namespace std;</p>\n<p>int main(void) {\nset<int> S;</p>\n<pre><code>int i;\nset&#x3C;int>::iterator j;\n\ncout &#x3C;&#x3C; 请输入要排序的数字集合，一行一个。输入完成后，回车后按 Ctrl+D 结束输入：n;\n\nwhile(cin >> i) {\n    S.insert(i);\n}\n\ncout &#x3C;&#x3C; 排序后的数字为：n;\n\nfor(j = S.begin(); j != S.end(); ++j) {\n    cout &#x3C;&#x3C; *j &#x3C;&#x3C; n;\n}\n\nreturn 0;\n</code></pre>\n<p>}</p>\n<p>在线运行的效果见：</p>\n<p>但是做为微信的重度用户，只通过 emcc 编译成网页版，还不过瘾，必须把它再搬到微信小程序里。以下分别是 Hello World 和《编程珠玑》练习1.6.1 跑在微信小程序里的效果演示：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1643774834030-4a90765b-bc6c-4694-a3e6-6f3b7dbfa33b.png#clientId=u0bd97567-2b06-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;id=u3f1f0fe9&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=430&#x26;originWidth=430&#x26;originalType=url%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=98793&#x26;status=done&#x26;style=none&#x26;taskId=u9b9e325f-61d8-4412-b18b-1f66ecf6588&#x26;title=\" alt=\"image.png\"><br />以及：<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1643792128440-4ae55486-26ad-4068-a047-1ce79cd2474d.png#clientId=u3b44282c-23a0-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;id=u3730049d&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=430&#x26;originWidth=430&#x26;originalType=url%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=100433&#x26;status=done&#x26;style=none&#x26;taskId=ud447b296-719c-47bd-bf90-21d85be4a2d&#x26;title=\" alt=\"image.png\"><br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1643776493685-9eee7ea8-417b-4327-a745-90860941b7ab.png#clientId=u0bd97567-2b06-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=568&#x26;id=ufb5be50e&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=710&#x26;originWidth=401&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=16877&#x26;status=done&#x26;style=none&#x26;taskId=u843aa0f0-70fa-4429-88f2-0a1644ef4e0&#x26;title=&#x26;width=320.8\" alt=\"image.png\"></p>\n<p><a name=UC1YW></a></p>\n<h1>原理</h1>\n<p>我真想说，只要使用 WebAssembly 对象加载 emcc 编译好的远程 wasm 文件，然后运行就好。但是，微信小程序删除了对于 WebAssembly 的支持，转而提供一个自行魔改过的 WXWebAssembly 对象。据官方文档，WXWebAssembly 和 WebAssembly 很类似，只有细微的区别。</p>\n<p>比较明显的区别是 WXWebAssembly.initialize 方法的第一个参数只能是包内文件路径，不能加载远程的 wasm 文件。<strong>OK，那么远程加载 wasm 文件并执行的路就堵死了。</strong></p>\n<p>但我也试了一下，把 wasm 文件放在包内，并且通过魔改 emcc 生成的 js 胶水文件，成功地在微信开发者工具中运行起来了 C++ 程序。但是这个成功运行的版本，在手机上，就是跑不起来。通过调试信息，发现在 WXWebAssembly.initialize 时，报了 load wasm failed! 这个错误。<strong>也就是说，即使把 wasm 文件放在包内，也不能在真机上运行。</strong></p>\n<p>网上完全没有 WXWebAssembly 的详细文档，更没有源代码，也没有官方的成功示例说明。只找到一个代码片段，是加载并执行 opencv 的 wasm。但是很不幸，和我自己做的版本一样，在微信开发者工具里是跑得起来的，上了真机就是  load wasm failed!。</p>\n<p>怀着极为沮丧的心情，最终只能在微信小程序里抛弃 wasm，退而求其次，只执行纯粹的 js 代码。</p>\n<p>所以，上一节中展示的成功案例，真正原理是把 C++ 代码通过 emcc 编译成 js，然后再通过 eval5 执行！是的，还是使用 eval5！</p>\n<p><a name=nCPAk></a></p>\n<h1>详细步骤</h1>\n<p><a name=qpcJY></a></p>\n<h2>新建一个 C++ 工程</h2>\n<p>这个工程，专门用来放置《编程珠玑》的练习源代码（C++）：<a href=\"https://github.com/Jeff-Tian/PearlsPlus\">https://github.com/Jeff-Tian/PearlsPlus</a>。同时，它也做为远程目标，供微信小程序下载执行使用。从而，当新完成一个练习时，不需要更新和发布小程序，就能动态渲染。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1643777088093-6a5b1866-a588-4e1c-b98f-5720deb7494c.png#clientId=u0bd97567-2b06-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=393&#x26;id=u20716763&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=491&#x26;originWidth=468&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=8705&#x26;status=done&#x26;style=none&#x26;taskId=u849b585a-a1bc-4377-b172-a01d4f363a5&#x26;title=&#x26;width=374.4\" alt=\"image.png\"></p>\n<p><a name=WsUFK></a></p>\n<h2>设置远程项目的持续集成和持续部署</h2>\n<p>因为使用了 github 做代码托管，很自然地使用了 github actions 做 ci/cd。这个 action，先安装 emcc，然后编译成网页版和微信小程序两个执行目标。网页版仍然采用加载 wasm 的方式，而微信小程序版本的编译目标，全部是 js。</p>\n<p>所以关键的 action 步骤，是执行 emcc。比如对于练习 1.6.1，其编译命令分别如下：\nbash</p>\n<h1>网页版</h1>\n<p>emcc chapter1/1.6.1.cpp -o chapter1/1.6.1.html</p>\n<h1>微信小程序版</h1>\n<p>emcc chapter1/1.6.1.cpp -s WASM=0 -o chapter1/wmp-1.6.1.html</p>\n<p>最后，这个 action 会使用 github pages 服务，将网页版发布在 <a href=\"https://pearlsplus.pa-ca.me/chapter1/1.6.1.html\">https://pearlsplus.pa-ca.me/chapter1/1.6.1.html</a>。同时会 host 微信小程序的目标 js：<a href=\"https://pearlsplus.pa-ca.me/chapter1/wmp-1.6.1\">https://pearlsplus.pa-ca.me/chapter1/wmp-1.6.1</a>。</p>\n<p><a name=OtDfz></a></p>\n<h2>微信小程序项目的对接</h2>\n<p>回到微信小程序项目，还是那一个基于 Taro 的工程。Hello World 是很简单的，因为只有输出，通过自定义 emcc 胶水 js 中的 print 函数，将输出展示在页面上即可：</p>\n<p>typescript\nconst [output, setOutput] = useState(正在加载运行时……)</p>\n<p>const interpreter = new Interpreter({\n...window,\nModule: {\nprint: function (text) {\nsetOutput(text)\n}\n},\nwindow: {}\n}, {\ntimeout: 5000, rootContext: {}\n});</p>\n<p>useEffect(() => {\nTaro.request({url: <a href=\"https://uniheart.pa-ca.me/proxy?url=$%7BencodeURIComponent(https://pearlsplus.pa-ca.me/wmp-index.js)%7D%7D).then((%7Bdata%7D)\">https://uniheart.pa-ca.me/proxy?url=${encodeURIComponent(https://pearlsplus.pa-ca.me/wmp-index.js)}}).then(({data})</a> => {\nsetOutput(正在执行……)\ninterpreter.evaluate(data)\n}).catch(err => setOutput(JSON.stringify(err)))\n}, [])</p>\n<p>光有输出其实不完整，因为有些程序是要求输入的。比如练习 1.6.1，就要求用户输入一系列的数字，然后对其排序后输出。</p>\n<p>这里实现了一个简略版本的收集用户输入的界面：</p>\n<p>css\n.terminal {\nbackground: black;\ncolor: white;\npadding: 5px;\nmin-height: 500px;\nbox-sizing: border-box;</p>\n<p>textarea {\nheight: 500px;\n}\n}</p>\n<p>.code {\nbackground: #f4f4f4;\nborder: 1px solid #ddd;\nborder-left: 3px solid #f36d33;\ncolor: #666;\npage-break-inside: avoid;\nfont-family: monospace;\nline-height: 1.6;\nmargin-bottom: 1.6em;\nmax-width: 100%;\noverflow: auto;\npadding: 1em 1.5em;\ndisplay: block;\nword-wrap: break-word;\n}</p>\n<p>.prompt {\nbackground-color: black;\nborder: solid 2px red;\ncolor: white;\nz-index: 99;\nposition: absolute;\nbottom: 100px;\nleft: 80px;</p>\n<p>button {\ncolor: white;\n}\n}</p>\n<p>.inputs {\ncolor: black;\n}</p>\n<p>typescript\nconst Prompt = ({isOpen, onConfirm}) => {\nconst [content, setContent] = useState()</p>\n<p>return isOpen ? <View className=prompt>\n<View>请输入要排序的数字集合，一行一个。</View>\n<View>\n&#x3C;AtTextarea value={content} onChange={(inputs) => {\nsetContent(inputs)\n}} focus className=inputs count={false} autoFocus\n/>\n</View>\n<View>\n&#x3C;AtButton full={false} onClick={() => onConfirm(content)}>确定</AtButton>\n</View>\n</View> : null\n}</p>\n<p>&#x3C;Prompt isOpen={isModalOpen} onConfirm={content => {\nuserInput = content.trim().split(n).filter(s => !!s.trim()).map(i => Number(i));\nsetIsModalOpen(false)</p>\n<p>setStatus(用户输入完毕，准备执行……)</p>\n<p>output.push(用户输入： )\noutput.push(userInput.join(n))\nsetPrinted(output.join(n))</p>\n<p>setTimeout(() => {\ninterpreter.evaluate(sourceCode)\n}, 10)\n}}\n/></p>\n<p>const [printed, setPrinted] = useState()\nlet userInput = []\nconst output: string[] = []\nconst [sourceCode, setSourceCode] = useState()</p>\n<p>let count = 0;\nconst interpreter = new Interpreter({\n...window,\nModule: {\nprint: function (text) {\nconsole.log(eval = , text);\noutput.push(text)</p>\n<pre><code>  setPrinted(output.join(n))\n}\n</code></pre>\n<p>},\nwindow: {\nprompt: () => {\nreturn userInput[count++]\n}\n}\n}, {\ntimeout: 5000, rootContext: {}\n});</p>\n<p>并与胶水 js 中的 prompt 深度结合，实现了这样的效果：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1643776897340-2cd8d6fb-92ea-4f2a-8bbd-7f30ac82f2f6.png#clientId=u0bd97567-2b06-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=566&#x26;id=u547770c2&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=707&#x26;originWidth=397&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=16987&#x26;status=done&#x26;style=none&#x26;taskId=u30535848-b904-47c3-ae22-c6e00c25326&#x26;title=&#x26;width=317.6\" alt=\"image.png\"><br />完整代码详见：  <a href=\"https://github.com/Jeff-Tian/weapp/blob/main/src/pages/pearlsplus/1_6_1.tsx\">https://github.com/Jeff-Tian/weapp/blob/main/src/pages/pearlsplus/1_6_1.tsx</a></p>\n<p><a name=zb3Fb></a></p>\n<h1>总结</h1>\n<p>通过 emcc 将 C++ 代码编译成 js，然后通过  eval5，就可以实现在微信小程序里动态执行远程 C++ 代码的效果。如果将 emcc 做为一个服务，那么实现在微信小程序（或者网页版）执行用户输入的 C++ 代码也是可行的。</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"Full Stack Developer, good at OAuth 2.0","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"本站源码","url":"https://github.com/Jeff-Tian/space","style":"link","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}