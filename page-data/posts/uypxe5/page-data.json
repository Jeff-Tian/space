{"componentChunkName":"component---src-templates-post-js","path":"/posts/uypxe5","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/uypxe5","relativePath":"posts/uypxe5","frontmatter":{"title":"Free Arch: 解决静态站点 deeplink 404 的问题（以 Taro 框架举例）","stackbit_url_path":"posts/uypxe5","date":"2021-10-11T05:57:00","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<blockquote>\n<p><strong>FBI Warning： Free Arch 是我的杜撰，意味着应用的架构全部使用免费资源。该架构服务于像我一样的这种贫穷的个人开发者，目的是在尽可能免费的前提下，为应用打造极致的用户体验（将羊毛薅到无以复加！）。</strong></p>\n</blockquote>\n<br />\n<a name=VdmwO></a>\n# 背景\n<p>个人开发者创建的网页站点，希望开放外网访问，首先需要解决部署问题。最佳实践是将站点静态化，从而可以在大量的免费静态站点部署服务中自由选择。如果使用 GitHub 托管代码，当然建议直接使用 GitHub Pages 服务来部署静态站点。</p>\n<p>市面上也有大量的专门的免费静态站点生成器，一般这样的部署不会碰到什么问题。但是如果采用了其他的框架开发站点，那么很容易碰到的一个问题是：可以访问首页，点击进入别的页面也没有问题。但是一旦在非首页的页面，按键刷新了页面，或者直接从 deeplink 进入，都会得到一个 404 页面，比如：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/221736/1633929422461-fa45c0b4-8bce-41c4-b968-e3f644686407.png#clientId=uf2fe1020-b710-4&#x26;from=paste&#x26;id=u2a1e8aad&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=548&#x26;originWidth=589&#x26;originalType=binary%E2%88%B6=1&#x26;size=40973&#x26;status=done&#x26;style=none&#x26;taskId=u16893b9e-911d-495d-963b-934f6da5d54\" alt=\"image.png\"></p>\n<p><a name=MYzIs></a></p>\n<h1>现象重述</h1>\n<p>站点静态化部署后：</p>\n<p>站点的 deeplink 页面，从首页点击进入正常展示，直接进入或者刷新就会 404。<br />站点的首页没有这个问题。</p>\n<p>站点如果采用服务器部署，则没有以上问题。比如本地开发时，实际上启动了一个服务器程序，deeplink 是可以直接打开的。</p>\n<p><a name=BgBpU></a></p>\n<h1>原因</h1>\n<p>生成的站点文件，根目录下有一个 index.html 文件，从而首页可以正常打开。但是 deeplink 对应的路径，在服务器上没有对应的文件。从首页上点击可以正常显示，是因为框架做了客户端路由，也就是渲染的文件仍然是服务器上根目录下的 index.html 文件，但是这个文件中加载的 javascript，处理了点击并做了后续的渲染。</p>\n<p>在有服务器程序运行的情况下，直接打开 deeplink，页面也能正常渲染，是因为服务器程序处理了路由，并对相关的路径返回了某个 html 结果响应，从而正常显示页面。</p>\n<p>如果没有服务器渲染程序，而 deeplink 对应的路径在服务器上又找不到响应的文件，自然就是 404 了。</p>\n<p><a name=okQ0L></a></p>\n<h1>解决办法</h1>\n<p>原因找到了，解决办法也很简单粗暴，在服务器上直接创建所有的 deeplink 路径就行了。当然也可以运行服务器端渲染程序解决，但这就不是 Free Arch 的范围了。</p>\n<p><a name=Pimgs></a></p>\n<h1>举个例子</h1>\n<p>**在线演示： **<a href=\"https://taro.pa-ca.me/pages/yuque/index\"><strong>https://taro.pa-ca.me/pages/yuque/index</strong></a></p>\n<p>这个例子采用 Taro 框架生成了一个静态站点，通过 GitHub Actions，将 yarn build 后产生的 dist 目录部署在 GitHub pages 服务上。Taro 和很多框架一样，在 build 后生成了一个 dist 目录，但是这个目录下只有一个 index.html 文件，如果你的应用有其他路径，默认是不会为每个路径建立文件夹和相应的 html 文件的。</p>\n<p>这里通过在 GitHub Actions 的配置文件中加入一些 shell 脚本，去为所有页面建立文件夹，并且将 dist/index.html 文件复制到相应文件夹下，从而解决了 404 的问题。</p>\n<p>首先看下所有的客户端路由页面，在 app.config.ts 文件中：</p>\n<p>typescript\nexport default {\npages: [\npages/yuque/index,\npages/yuque/article,\npages/index/index,\npages/about/index\n],\nwindow: ...\n}</p>\n<p>除去 yarn build 会自动生成的首页对应 pages/index/index  路由外，其他路由都是要自行灌入 shell 脚本的：</p>\n<p>yaml</p>\n<ul>\n<li>name: build</li>\n</ul>\n<p>run: yarn &#x26;&#x26; yarn build:h5</p>\n<h1>在 build 完成后做一些 deeplink 工作：</h1>\n<ul>\n<li>name: deeplinks</li>\n</ul>\n<p>run: |\nmkdir -p dist/pages/yuque\nmkdir -p dist/pages/about</p>\n<p>cp -r dist/index.html dist/pages/yuque/index.html</p>\n<h1>注意，不是所有路由都对应为 index.html，但是可以复用 index.html，所以改个名即可：</h1>\n<p>cp -r dist/index.html dist/pages/yuque/article.html\ncp -r dist/index.html dist/pages/about/index.html</p>\n<p><a name=vES8L></a></p>\n<h1>继续改进</h1>\n<p>这个 shell 脚本虽然简单粗暴有效果，但是还可以更加简化和智能化，比如自动解析 app.config.ts 文件，这样不用每次添加新的路由时，需要改动两个地方。或者将这个零散的逻辑封装成一个 GitHub Action，命名为 ghaction-taro-pages 等等。</p>\n<p>欢迎留言反馈更好的做法！</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"Made with Stackbit.","url":"https://www.stackbit.com","style":"link","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}