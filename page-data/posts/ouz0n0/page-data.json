{"componentChunkName":"component---src-templates-post-js","path":"/posts/ouz0n0","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/ouz0n0","relativePath":"posts/ouz0n0","frontmatter":{"title":"Free Arch: 如何在 Spring Boot 应用中集成 Keycloak？","stackbit_url_path":"posts/ouz0n0","date":"2022-03-14T08:39:23","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<blockquote>\n<p><strong>FBI Warning</strong>: 小白科普，大佬绕路！</p>\n</blockquote>\n<p>又是一篇小小科普，在开始正文之前，容我先得瑟一下。</p>\n<p>上次在公众号和知乎同步发了一篇文章，其实是先抑后扬，对于身份证证，推荐大家使用 Authing。这篇文章对比了 Keycloak 和 Authing，并得出结论，尽管 Keycloak 很棒，但是 Authing 的中文文档、界面效果以及和微信生态等等做得非常棒。没想到分别引起了 Authing 的 CEO 和 CTO 的关注，非常荣幸！</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/jpeg/221736/1647241100981-d213da85-35cf-4ea3-b5ad-85ba4fe356ea.jpeg#clientId=u42764b20-e6ee-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=498&#x26;id=u58324a9e&#x26;margin=%5Bobject%20Object%5D&#x26;name=f54e1b7ff5d5cfa3bb68b29ef0fd1450.jpg&#x26;originHeight=2079&#x26;originWidth=960&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=139437&#x26;status=done&#x26;style=none&#x26;taskId=ua28bd2c7-2c52-4cc6-9b4a-a8451d295d8&#x26;title=&#x26;width=230\" alt=\"f54e1b7ff5d5cfa3bb68b29ef0fd1450.jpg\"><img src=\"https://cdn.nlark.com/yuque/0/2022/jpeg/221736/1647241122822-a21da1bf-955b-46bd-b435-b6246c6b53e5.jpeg#clientId=u42764b20-e6ee-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=489&#x26;id=u800d524a&#x26;margin=%5Bobject%20Object%5D&#x26;name=e8b15c57f6b5e4b5fe48ca5d79fe9113.jpg&#x26;originHeight=2079&#x26;originWidth=960&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=72090&#x26;status=done&#x26;style=none&#x26;taskId=u815dcb5b-1fb6-4784-8062-fe6d205e124&#x26;title=&#x26;width=226\" alt=\"e8b15c57f6b5e4b5fe48ca5d79fe9113.jpg\"><br /><img src=\"https://cdn.nlark.com/yuque/0/2022/jpeg/221736/1647241178263-09ff744e-a8d6-4c12-bc72-82ee5d15cada.jpeg#clientId=u42764b20-e6ee-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=617&#x26;id=u8cc2b83b&#x26;margin=%5Bobject%20Object%5D&#x26;name=1878588a02f86c0307f63c53cc1650d4.jpg&#x26;originHeight=2079&#x26;originWidth=727&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=93450&#x26;status=done&#x26;style=none&#x26;taskId=ub8d68b01-6f60-47e6-b8fd-cade70626c6&#x26;title=&#x26;width=215.60000610351562\" alt=\"1878588a02f86c0307f63c53cc1650d4.jpg\"><img src=\"https://cdn.nlark.com/yuque/0/2022/jpeg/221736/1647241230811-6f3361d1-c258-44ae-8f85-e869cd5cd2c5.jpeg#clientId=u42764b20-e6ee-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=615&#x26;id=u49540790&#x26;margin=%5Bobject%20Object%5D&#x26;name=89f5cdf1a1e1db62c0af00e5f93e49a9.jpg&#x26;originHeight=2079&#x26;originWidth=960&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=171205&#x26;status=done&#x26;style=none&#x26;taskId=ua7ce6101-0518-4134-8868-11913f57653&#x26;title=&#x26;width=284\" alt=\"89f5cdf1a1e1db62c0af00e5f93e49a9.jpg\"></p>\n<p>我一直认为，由于 Keycloak 的中文文档非常缺失，从而给我带来了一些 Keycloak 相关的付费咨询单子。在推荐了 Authing 后，估计后面就不会有这样的单子了，却没想到来了更多的 Keycloak 相关的付费咨询。</p>\n<p>我非常感谢这些咨询的朋友，让我在成为 Keycloak 专家的道路上一去不复返。我之前为了介绍 Free Arch，从而利用 Heroku 免费搭建了一个 Keycloak 实例，并在多个 nodejs 站点上对接了它，比如： <a href=\"https://uniheart.pa-ca.me/keycloak/login\">https://uniheart.pa-ca.me/keycloak/login</a> 。</p>\n<p>但是最近收到的咨询，是如何在 Spring Boot 应用里集成 Keycloak。说实话，Spring Boot 以及 Java，本人非常不熟悉，但为了挣这个钱，硬着头皮含着泪也是要学习的。</p>\n<p><a name=vDydW></a></p>\n<h1>示例应用</h1>\n<p>目前做了一个超级简洁的示例应用： <a href=\"https://tranquil-plains-58233.herokuapp.com/\">https://tranquil-plains-58233.herokuapp.com/</a>，根路由是公开的，而 <a href=\"https://tranquil-plains-58233.herokuapp.com/visitor\">https://tranquil-plains-58233.herokuapp.com/visitor</a> 这个路由是需要先通过 Keycloak 登录的。</p>\n<p><a name=xEdE5></a></p>\n<h1>源代码</h1>\n<p><a href=\"https://github.com/Jeff-Tian/keycloak-springboot\">https://github.com/Jeff-Tian/keycloak-springboot</a></p>\n<p><a name=s2K40></a></p>\n<h1>视频教学指引</h1>\n<p><a href=\"https://player.bilibili.com/player.html?bvid=BV1t44y1K74W\">点击查看【bilibili】</a></p>\n<p><a name=K3V9e></a></p>\n<h1>文字版按步指引</h1>\n<p><a name=NH1a6></a></p>\n<h2>安装 Spring 客户端</h2>\n<p>通过 spring 客户端可以快速生成一个 Spring Boot 应用。</p>\n<p>如果使用 mac osx 建议使用 homebrew 安装：</p>\n<p>shell\nbrew tap spring-io/tap\nbrew install spring</p>\n<p>如果使用 Windows，建议通过 Scoop 安装：</p>\n<p>powershell\nscoop bucket add extras\nscoop install springboot</p>\n<p><a name=JxSGs></a></p>\n<h2>初始化 Spring Boot 项目</h2>\n<p>比如，我的示例应用叫 keycloak-springboot，它就是这样初始化的：\nshell\nspring init --dependencies=web keycloak-springboot</p>\n<p><a name=fBBmd></a></p>\n<h2>引入 Keycloak 相关的依赖</h2>\n<p>这可以参考 Keycloak 官网的文档，主要是关于 Spring Boot Adapter 的这一节。</p>\n<p>要保护 Spring Boot 应用，可以将 Keycloak Spring Boot Adapter 的 JAR 包引入到该应用，然后通过配置文件（application.properties）提供额外的信息。\n<a name=hZGyf></a></p>\n<h3>引入适配器</h3>\n<p>官方的 Keycloak Spring Boot 适配器利用了 Spring Boot 的自动配置功能，于是你仅需要将 Keycloak Spring Boot starter 添加到自己的项目中。看到这里，我才发现，原来 Keycloak Spring Boot Starter 是可以直接通过 Spring Starter Page 生成的。不过，手动添加也很方便，以 Maven 项目为例，可以在 pom.xml 文件里添加如下依赖项：\nxml\n<dependency>\n<groupId>org.keycloak</groupId>\n<artifactId>keycloak-spring-boot-starter</artifactId>\n</dependency></p>\n<p>另外还需要添加 Adapter BOM 依赖：\nxml\n<dependencyManagement>\n<dependencies>\n<dependency>\n<groupId>org.keycloak.bom</groupId>\n<artifactId>keycloak-adapter-bom</artifactId>\n<version>SNAPSHOT</version>\n<type>pom</type>\n<scope>import</scope>\n</dependency>\n</dependencies>\n</dependencyManagement></p>\n<p><a name=DN61b></a></p>\n<h3>必须的 Spring Boot Adapter 配置项</h3>\n<p>这一节描述如何配置 Spring Boot 应用来使用 Keycloak。</p>\n<p>很多其他类型的应用使用 keycloak.json 文件来配置 Keycloak 相关的信息，但是 Spring Boot 应用却是使用通常的 Spring Boot 配置，而不是 json 文件。比如这是我的 src/main/resources/application.properties 配置：</p>\n<p>keycloak.realm = UniHeart\nkeycloak.auth-server-url = <a href=\"https://keycloak.jiwai.win/auth\">https://keycloak.jiwai.win/auth</a>\nkeycloak.ssl-required = external\nkeycloak.resource = demoapp\nkeycloak.use-resource-role-mappings = true\nkeycloak.public-client=true</p>\n<p>keycloak.security-constraints[0].authRoles[0]=visitor\nkeycloak.security-constraints[0].securityCollections[0].patterns[0]=/visitor/*</p>\n<p>上面的示例配置分为两部分，第一部分是要连接的 Keycloak 实例的信息，而第二部分， 是 Java EE Security 配置项，本来一般存在 web.xml 文件中。得益于 Spring Boot Adapter，它会在启动时，将 login-method 设置为 KEYCLOAK，并且配置相应的 security-constraints。\n<a name=t4GH4></a></p>\n<h2>配置 Keycloak</h2>\n<p>要在 Keycloak 里接入一个新的应用，需要将该应用看成一个客户端。为了这个示例应用，我创建了一个叫做 demoapp 的客户端：\n<a name=RKWpE></a></p>\n<h3>给这个客户端起个名字</h3>\n<p>我就叫它为 demoapp 吧，点击保存。<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1646994260358-011adcb3-9905-4f49-a051-57b8a508c8da.png#clientId=uc5c73ab9-e2a2-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=723&#x26;id=ub9928db4&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1446&#x26;originWidth=2652&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=227579&#x26;status=done&#x26;style=none&#x26;taskId=u52c4cc5e-9906-48c3-8e1c-f2925309be3&#x26;title=&#x26;width=1326\" alt=\"image.png\">\n<a name=EWDJN></a></p>\n<h3>设置重定向 URI</h3>\n<p>即在 Keycloak 登录成功后，可以回调哪些域名。可以配置多个，也支持通配符。<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1646994360890-4c4fe15c-4c86-4b5c-abef-6c9d9fac8d35.png#clientId=uc5c73ab9-e2a2-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=936&#x26;id=u7db61365&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1872&#x26;originWidth=3080&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=426934&#x26;status=done&#x26;style=none&#x26;taskId=u0d60710b-7ed5-4505-8d5d-891590d37ba&#x26;title=&#x26;width=1540\" alt=\"image.png\"></p>\n<p><a name=Ilym3></a></p>\n<h3>配置角色</h3>\n<p>对于被保护的路由，可以允许哪些角色的用户来访问呢？这些都可以通过配置来完成。你可以在实际应用中，对不同的路由授权不同的角色。目前本示例应用仅配置了一个 visitor 角色，允许该角色访问 /vistor 路由。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1646994522041-654c5376-0a0a-435b-9828-3138a91ca639.png#clientId=uc5c73ab9-e2a2-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=651&#x26;id=u0c30025a&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1302&#x26;originWidth=2750&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=236102&#x26;status=done&#x26;style=none&#x26;taskId=u899171ca-da98-4456-bdea-89f27678a8a&#x26;title=&#x26;width=1375\" alt=\"image.png\">\n<a name=XRVZl></a></p>\n<h2>实现路由功能</h2>\n<p>比如在 spring 脚本自动生成的脚手架文件 src/main/java/com/example/keycloakspringboot/DemoApplication.java 里添加两个路由，根路由公开访问，/visitor 路由受保护，仅允许拥有 visitor 角色的用户访问：\njava\npackage com.example.keycloakspringboot;</p>\n<p>import org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.<em>;\nimport org.springframework.stereotype.</em>;</p>\n<p>import java.io.IOException;</p>\n<p>@Controller\n@SpringBootApplication\npublic class DemoApplication {</p>\n<pre><code>@RequestMapping(/)\n@ResponseBody\nString home() {\n    return Hello Keycloak!;\n}\n\n@RequestMapping(value = /visitor, method = RequestMethod.GET)\n@ResponseBody\npublic String getVisitorPath() {\n    return 嗨，你好！当你看到这些文字，说明你成功登录了！;\n}\n\npublic static void main(String[] args) {\n    SpringApplication.run(DemoApplication.class, args);\n}\n</code></pre>\n<p>}</p>\n<p><a name=D5UfG></a></p>\n<h2>发布应用</h2>\n<p>推荐直接将代码推送到 GitHub，然后连接 GitHub 和 Heorku，一旦代码有更新，就可以自动发布。Heroku 默认的 jdk 是 1.8，如果你的应用要使用更新的 java 特性，需要使用 system.properties 文件来指定更新的 java 运行时版本，比如本示例应用在项目根目录下添加了一个 system.properties 文件，内容如下：</p>\n<p>java.runtime.version=13</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"Made with Stackbit.","url":"https://www.stackbit.com","style":"link","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}