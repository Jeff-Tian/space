{"componentChunkName":"component---src-templates-post-js","path":"/posts/使用-HttpHandler-对-jscss-文件进行压缩/","result":{"data":{"sitePage":{"id":"SitePage /posts/使用-HttpHandler-对-jscss-文件进行压缩/"}},"pageContext":{"url":"/posts/使用-HttpHandler-对-jscss-文件进行压缩/","relativePath":"posts/使用-HttpHandler-对-jscss-文件进行压缩.md","relativeDir":"posts","base":"使用-HttpHandler-对-jscss-文件进行压缩.md","name":"使用-HttpHandler-对-jscss-文件进行压缩","frontmatter":{"title":"使用 HttpHandler 对 js/css 文件进行压缩","stackbit_url_path":"posts/使用-HttpHandler-对-jscss-文件进行压缩","date":"2011-10-05 07:33:00","excerpt":"","comments_count":0,"positive_reactions_count":0,"tags":["HttpHandler","css","javascript","js","压缩"],"canonical_url":"https://be-net.azurewebsites.net/post/2011/10/05/使用-HttpHandler-对-jscss-文件进行压缩","template":"post"},"html":"<h1><span style=\"color: #9b00d3;\"><span style=\"font-weight: bold;\">一、简介</span></span></h1>\n<p>在对网站进行开发时，为了给开发人员以好的可读性，需要对代码进行良好的排版，给变量起有意义的名字，进行合理的注释。然而，当网页呈现在用户面前时，之前提及的都不再重要，而另一方面，网页的呈现速度则变得很重要，这时候，又需要对代码进行压缩（以减少文件大小，节省网络带宽，从而加快了页面的加载时间），删掉不必要的空白字符，缩短变量名，删除注释等。如果网站上线后仍然一直处于持续更新状态，则每次在发布前压缩代码就变成了重复性的劳动。如何简化甚至省略掉这个重复性劳动呢？</p>\n<h1><span style=\"color: #9b00d3;\"><span style=\"font-weight: bold;\">二、解决方案一</span></span></h1>\n<h2>使用外置的代码压缩程序，配置它在每次网站编译前执行。（这是一种简化重复性劳动的方法）</h2>\n<p>我看到微软项目中使用了一个Crunch.exe的程序，在网站项目配置它在每次编译前执行，专门用来压缩指定的js/css文件。这个方法的确可以奏效，但是我认为它有很多缺点：</p>\n<ul>\n<li>要引用外置程序，这很讨厌</li>\n<li>要在网站项目做配置，使得它在每次编译前执行</li>\n<li>要维护一个xml文件，以指定哪些js/css文件需要压缩。这很不灵活，每次新增一个需要压缩的文件，都要去修改这个xml文件</li>\n<li>要配置一些难记的命令</li>\n<li>由于这个Crunch.exe程序的引入，使得网站项目所在的路径中，任何文件夹名不得含有空格！否则这个程序将会执行失败，导致整个项目的编译失败！这点最令人讨厌！我曾吃过亏，在一个微软项目(给MSN的客户NBC做的网站)中，某一天我发现好端端的网站工程，老是编译失败，百思不得其解，找了很久才发现是由于这个原因！</li>\n</ul>\n<h1><span style=\"font-weight: bold; color: #9b00d3;\">三、解决方案二</span></h1>\n<h2>使用HttpHandler，针对js/css文件的请求，给予压缩响应。（这从根本上省掉了发布网站前的代码压缩工作！）</h2>\n<p>这个是我从BlogEngine.NET项目中学来的。分别写好JavaScriptHandler和CssHandler，再在Web.Config中做配置，将对js文件的请求，交由JavaScriptHandler来处理，而将对css文件的请求，交由CssHandler处理。</p>\n<h1><span style=\"font-weight: bold; color: #9b00d3;\">四、解决方案二原理剖析</span></h1>\n<p>这个解决方案的两个Handler，分别对js文件和css文件进行压缩，不用担心影响服务器性能，因为它设置了缓存，除非源文件有修改，否则就一直调用压缩好的缓存版代码给予响应，所以针对同一代码文件的所有请求，只需要压缩一次。</p>\n<p>这两个Handler还会对请求的查询字符串进行检查，看看是否有?minify=true这样的查询字符串存在，如果有才压缩，如果没有就不压缩。这是一个非常灵活的做法，即你可以在网站中灵活地配置是否要压缩某个代码文件。也就是说，只要你配置minify=true，则用户浏览你的网页时会非常快。如果他/她感觉你的网站很酷，想要学习一下，那么它会去查看你的源代码，这时候，他/她只需要将minify=true删除，便能够查看到你的开发版代码（可读性非常好）。（当然，如果你不愿意分享，则不要采用这种方式，你可以采用解决方案一）</p>\n<p>对于JavaScriptHandler，这里引用了一个JavascriptMinifier的工具类。在下面的实现一节里给出了它的源代码。</p>\n<h1><span style=\"color: #9b00d3;\"><span style=\"font-weight: bold;\">五、解决方案二的实现</span></span></h1>\n<p>1. 引用JavaScriptMinifier类，下面给出它的源码，你可以直接添加到你的网站工程中。这里将它封装在了zizhujy.Utility命名空间内，你也可以修改成你自己的命名空间，只要在后面引用时也作相应修改就好。</p>\n<pre class=\"brush: csharp\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing Microsoft.Ajax.Utilities;\n<p>namespace zizhujy.Utility\n{\n/// &#x3C;summary>\n/// Helper class for performing minification of Javascript and CSS.\n/// &#x3C;/summary>\n/// &#x3C;remarks>\n///\n/// This class is basically a wrapper for the AjaxMin library(lib/AjaxMin.dll).\n/// <a href=\"http://ajaxmin.codeplex.com/\">http://ajaxmin.codeplex.com/</a>\n///\n/// There are no symbols that come with the AjaxMin dll, so this class gives a bit of intellisense\n/// help for basic control. AjaxMin is a pretty dense library with lots of different settings, so\n/// everyone's encouraged to use it directly if they want to.\n///\n/// &#x3C;/remarks>\npublic sealed class JavascriptMinifier\n{</p>\n<pre><code>    private Microsoft.Ajax.Utilities.Minifier ajaxMinifier = new Microsoft.Ajax.Utilities.Minifier();\n\n    /// &#x26;lt;summary&#x26;gt;\n    /// Creates a new Minifier instance.\n    /// &#x26;lt;/summary&#x26;gt;\n    public JavascriptMinifier()\n    {\n        this.RemoveWhitespace = true;\n        this.PreserveFunctionNames = true;\n        this.VariableMinification = VariableMinification.None;\n    }\n\n    #region \"Methods\"\n\n    /// &#x26;lt;summary&#x26;gt;\n    /// Builds the required CodeSettings class needed for the Ajax Minifier.\n    /// &#x26;lt;/summary&#x26;gt;\n    /// &#x26;lt;returns&#x26;gt;&#x26;lt;/returns&#x26;gt;\n    private CodeSettings CreateCodeSettings()\n    {\n        var codeSettings = new CodeSettings();\n        codeSettings.MinifyCode = false;\n        codeSettings.OutputMode = (this.RemoveWhitespace ? OutputMode.SingleLine : OutputMode.MultipleLines);\n\n        // MinifyCode needs to be set to true in order for anything besides whitespace removal\n        // to be done on a script.\n        codeSettings.MinifyCode = this.ShouldMinifyCode;\n        if (this.ShouldMinifyCode)\n        {\n\n            switch (this.VariableMinification)\n            {\n                case VariableMinification.None:\n                    codeSettings.LocalRenaming = LocalRenaming.KeepAll;\n                    break;\n\n                case VariableMinification.LocalVariablesOnly:\n                    codeSettings.LocalRenaming = LocalRenaming.KeepLocalizationVars;\n                    break;\n\n                case VariableMinification.LocalVariablesAndFunctionArguments:\n                    codeSettings.LocalRenaming = LocalRenaming.CrunchAll;\n                    break;\n            }\n            // This is being set by default. A lot of scripts use eval to parse out various functions\n            // and objects. These names need to be kept consistant with the actual arguments.\n            codeSettings.EvalTreatment = EvalTreatment.MakeAllSafe;\n\n\n            // This makes sure that function names on objects are kept exactly as they are. This is\n            // so functions that other non-minified scripts rely on do not get renamed.\n            codeSettings.PreserveFunctionNames = this.PreserveFunctionNames;\n\n        }\n\n\n        return codeSettings;\n    }\n\n\n    /// &#x26;lt;summary&#x26;gt;\n    /// Gets the minified version of the passed in script.\n    /// &#x26;lt;/summary&#x26;gt;\n    /// &#x26;lt;param name=\"script\"&#x26;gt;&#x26;lt;/param&#x26;gt;\n    /// &#x26;lt;returns&#x26;gt;&#x26;lt;/returns&#x26;gt;\n    public string Minify(string script)\n    {\n        if (this.ShouldMinify)\n        {\n            if (String.IsNullOrEmpty(script))\n            {\n                return string.Empty;\n            }\n            else\n            {\n                return this.ajaxMinifier.MinifyJavaScript(script, this.CreateCodeSettings());\n            }\n        }\n\n        return script;\n    }\n\n    #endregion\n\n    #region \"Properties\"\n\n    /// &#x26;lt;summary&#x26;gt;\n    /// Gets or sets whether this Minifier instance should minify local-scoped variables.\n    /// &#x26;lt;/summary&#x26;gt;\n    /// &#x26;lt;remarks&#x26;gt;\n    /// \n    /// Setting this value to LocalVariablesAndFunctionArguments can have a negative impact on some scripts.\n    /// Ex: A pre-minified jQuery will fail if passed through this. \n    /// \n    /// &#x26;lt;/remarks&#x26;gt;\n    public VariableMinification VariableMinification { get; set; }\n\n    /// &#x26;lt;summary&#x26;gt;\n    /// Gets or sets whether this Minifier instance should preserve function names when minifying a script.\n    /// &#x26;lt;/summary&#x26;gt;\n    /// &#x26;lt;remarks&#x26;gt;\n    /// \n    /// Scripts that have external scripts relying on their functions should leave this set to true. \n    /// \n    /// &#x26;lt;/remarks&#x26;gt;\n    public bool PreserveFunctionNames { get; set; }\n\n    /// &#x26;lt;summary&#x26;gt;\n    /// Gets or sets whether the &#x26;lt;see cref=\"BlogEngine.Core.JavascriptMinifier\"/&#x26;gt; instance should remove\n    /// whitespace from a script.\n    /// &#x26;lt;/summary&#x26;gt;\n    public bool RemoveWhitespace { get; set; }\n\n    private bool ShouldMinifyCode\n    {\n        get\n        {\n            //  return true;\n            return ((!PreserveFunctionNames) || (this.VariableMinification != VariableMinification.None));\n        }\n    }\n\n    private bool ShouldMinify\n    {\n        get\n        {\n            return ((this.RemoveWhitespace) || (this.ShouldMinifyCode));\n        }\n    }\n\n    #endregion\n\n\n}\n\n/// &#x26;lt;summary&#x26;gt;\n/// Represents the way variables should be minified by a Minifier instance.\n/// &#x26;lt;/summary&#x26;gt;\npublic enum VariableMinification\n{\n    /// &#x26;lt;summary&#x26;gt;\n    /// No minification will take place.\n    /// &#x26;lt;/summary&#x26;gt;\n    None = 0,\n\n    /// &#x26;lt;summary&#x26;gt;\n    /// Only variables that are local in scope to a function will be minified.\n    /// &#x26;lt;/summary&#x26;gt;\n    LocalVariablesOnly = 1,\n\n    /// &#x26;lt;summary&#x26;gt;\n    /// Local scope variables will be minified, as will function parameter names. This can have a negative impact on some scripts, so test if you use it! \n    /// &#x26;lt;/summary&#x26;gt;\n    LocalVariablesAndFunctionArguments = 2\n\n}\n</code></pre>\n<p>}</pre></p>\n<p>2. 在网站工程中添加JavaScriptHandler类，下面给出它的源码：</p>\n<pre class=\"brush: csharp\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\nusing System.IO;\nusing System.Security;\nusing System.Web.Caching;\nusing zizhujy.Utility;\nusing System.Net;\n<p>namespace zizhujy.HttpHandlers\n{\n/// &#x3C;summary>\n/// Removes whitespace in all stylesheets added to the handler of the HTML document\n/// &#x3C;/summary>\n/// &#x3C;remarks>\n///\n/// This handler uses an external library to perform minification of scripts.\n/// See the zizhujy.Utility.JavascriptMinifier class for more details.\n///\n/// &#x3C;/remarks>\npublic class JavaScriptHandler : IHttpHandler\n{\n#region Properties</p>\n<pre><code>    /// &#x26;lt;summary&#x26;gt;\n    ///     Gets a value indicating whether another request can use the &#x26;lt;see cref=\"T:System.Web.IHttpHandler\"&#x26;gt;&#x26;lt;/see&#x26;gt; instance.\n    /// &#x26;lt;/summary&#x26;gt;\n    /// &#x26;lt;value&#x26;gt;&#x26;lt;/value&#x26;gt;\n    /// &#x26;lt;returns&#x26;gt;true if the &#x26;lt;see cref=\"T:System.Web.IHttpHandler\"/&#x26;gt; instance is reusable; otherwise, false.&#x26;lt;/returns&#x26;gt;\n    public bool IsReusable\n    {\n        get { return false; }\n    }\n\n    #endregion\n\n    #region Implemented Interfaces\n\n    /// &#x26;lt;summary&#x26;gt;\n    /// Enables processing of HTTP Web requests by a custom\n    ///     HttpHandler that implements the &#x26;lt;see cref=\"T:System.Web.IHttpHandler\"/&#x26;gt; interface.\n    /// &#x26;lt;/summary&#x26;gt;\n    /// &#x26;lt;param name=\"context\"&#x26;gt;\n    /// An &#x26;lt;see cref=\"T:System.Web.HttpContext\"/&#x26;gt; object that provides\n    ///     references to the intrinsic server objects\n    ///     (for example, Request, Response, Session, and Server) used to service HTTP requests.\n    /// &#x26;lt;/param&#x26;gt;\n    public void ProcessRequest(HttpContext context)\n    {\n        var request = context.Request;\n        string path = request.Path;\n\n        if (string.IsNullOrEmpty(path))\n        {\n            return;\n        }\n\n        string rawUrl = request.RawUrl.Trim();\n        string cacheKey = context.Server.HtmlDecode(rawUrl);\n        string script = (string)context.Cache[cacheKey];\n        bool minify = ((request.QueryString[\"minify\"] != null) &#x26;amp;&#x26;amp; (request.QueryString[\"minify\"].ToString().Trim() != \"false\"));\n\n        if (string.IsNullOrEmpty(script))\n        {\n            script = RetrieveLocalScript(path, cacheKey, minify);\n        }\n\n        if (string.IsNullOrEmpty(script))\n        {\n            return;\n        }\n\n        SetHeaders(script.GetHashCode(), context);\n        context.Response.Write(script);\n    }\n\n    #endregion\n\n    #region Methods\n\n    /// &#x26;lt;summary&#x26;gt;\n    /// Retrieves the local script from the disk\n    /// &#x26;lt;/summary&#x26;gt;\n    /// &#x26;lt;param name=\"file\"&#x26;gt;The file name.&#x26;lt;/param&#x26;gt;\n    /// &#x26;lt;param name=\"cacheKey\"&#x26;gt;The key used to insert this script into the cache.&#x26;lt;/param&#x26;gt;\n    /// &#x26;lt;param name=\"minify\"&#x26;gt;Whether or not the local script should be minified&#x26;lt;/param&#x26;gt;\n    /// &#x26;lt;returns&#x26;gt;The retrieved local script.&#x26;lt;/returns&#x26;gt;\n    private static string RetrieveLocalScript(string file, string cacheKey, bool minify)\n    {\n        if(StringComparer.OrdinalIgnoreCase.Compare(Path.GetExtension(file), \".js\") != 0) {\n            throw new SecurityException(\"No access\");\n        }\n        try{\n            var path = HttpContext.Current.Server.MapPath(file);\n            if(File.Exists(path)){\n                string script;\n                using (var reader = new StreamReader(path)){\n                    script = reader.ReadToEnd();\n                }\n\n                script =ProcessScript(script, file, minify);\n                HttpContext.Current.Cache.Insert(cacheKey, script, new CacheDependency(path));\n                return script;\n            }\n        }catch(Exception ex) {\n        }\n\n        return string.Empty;\n    }\n\n    /// &#x26;lt;summary&#x26;gt;\n    /// Call this method for any extra processing that needs to be done on a script resource before\n    /// being wriiten to the response.\n    /// &#x26;lt;/summary&#x26;gt;\n    /// &#x26;lt;param name=\"script\"&#x26;gt;&#x26;lt;/param&#x26;gt;\n    /// &#x26;lt;param name=\"filePath\"&#x26;gt;&#x26;lt;/param&#x26;gt;\n    /// &#x26;lt;param name=\"shouldMinify\"&#x26;gt;&#x26;lt;/param&#x26;gt;\n    /// &#x26;lt;returns&#x26;gt;&#x26;lt;/returns&#x26;gt;\n    private static string ProcessScript(string script, string filePath, bool shouldMinify)\n    {\n        if ((shouldMinify))\n        {\n            var min = new JavascriptMinifier();\n            min.VariableMinification = VariableMinification.LocalVariablesOnly;\n\n            return min.Minify(script);\n        }\n        else\n        {\n            return script;\n        }\n    }\n\n    private static void SetHeaders(int hash, HttpContext context)\n    {\n        var response = context.Response;\n        response.ContentType = \"text/jvascript\";\n        var cache = response.Cache;\n        cache.VaryByHeaders[\"Accept-Encoding\"] = true;\n        cache.SetExpires(DateTime.Now.ToUniversalTime().AddDays(7));\n        cache.SetMaxAge(new TimeSpan(7, 0, 0, 0));\n        cache.SetRevalidation(HttpCacheRevalidation.AllCaches);\n\n        var etag = string.Format(\"\\\"{0}\\\"\", hash);\n        var incomingEtag = context.Request.Headers[\"If-None-Match\"];\n\n        cache.SetETag(etag);\n        cache.SetCacheability(HttpCacheability.Public);\n\n        if (string.Compare(incomingEtag, etag) != 0)\n        {\n            return;\n        }\n\n        response.Clear();\n        response.StatusCode = (int)HttpStatusCode.NotModified;\n        response.SuppressContent = true;\n    }\n\n    #endregion\n}\n</code></pre>\n<p>}</pre></p>\n<p>3. 在网站工程中添加CssHandler类，下面给出它的源码：</p>\n<pre class=\"brush: csharp\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\nusing System.IO;\nusing System.Security;\nusing System.Web.Caching;\nusing System.Text.RegularExpressions;\nusing System.Net;\n<p>namespace zizhujy.HttpHandlers\n{\n/// &#x3C;summary>\n/// Removes whitespace in all stylesheets added to the header of the HTML document.\n/// &#x3C;/summary>\npublic class CssHandler : IHttpHandler\n{\n#region Properties</p>\n<pre><code>    /// &#x26;lt;summary&#x26;gt;\n    ///     Gets a value indicating whether another request can use the &#x26;lt;see cref=\"T:System.Web.IHttpHandler\"&#x26;gt;&#x26;lt;/see&#x26;gt; instance.\n    /// &#x26;lt;/summary&#x26;gt;\n    /// &#x26;lt;value&#x26;gt;&#x26;lt;/value&#x26;gt;\n    /// &#x26;lt;returns&#x26;gt;true if the &#x26;lt;see cref=\"T:System.Web.IHttpHandler\"/&#x26;gt; instance is reusable; otherwise, false.&#x26;lt;/returns&#x26;gt;\n    public bool IsReusable\n    {\n        get\n        {\n            return false;\n        }\n    }\n\n    #endregion\n\n    #region Implemented Interfaces\n\n    /// &#x26;lt;summary&#x26;gt;\n    /// Enables processing of HTTP Web request by a custom \n    ///     HttpHandler that implements the &#x26;lt;see cref=\"T:System.Web.IHttpHandler\"/&#x26;gt; interface.\n    /// &#x26;lt;/summary&#x26;gt;\n    /// &#x26;lt;param name=\"context\"&#x26;gt;\n    /// An &#x26;lt;see cref=\"T:System.Web.HttpContext\"/&#x26;gt; object that provides \n    ///     references to the intrinsic server objects\n    ///     (for example, Request, Response, Session, and Server) used to server HTTP requests.\n    /// &#x26;lt;/param&#x26;gt;\n    public void ProcessRequest(HttpContext context)\n    {\n        var request = context.Request;\n        string path = request.Path;\n\n        if (!string.IsNullOrEmpty(path))\n        {\n            if (StringComparer.InvariantCultureIgnoreCase.Compare(Path.GetExtension(path), \".css\") != 0)\n            {\n                throw new SecurityException(\"Invalid CSS file extension\");\n            }\n\n            string cacheKey = request.RawUrl.Trim();\n            string css = (string)context.Cache[cacheKey];\n            bool minify = ((request.QueryString[\"minify\"] != null) &#x26;amp;&#x26;amp; (request.QueryString[\"minify\"].ToString().Trim() != \"false\"));\n\n            if (String.IsNullOrEmpty(css))\n            {\n                css = RetrieveLocalCss(path, cacheKey, minify);\n            }\n\n            // Make sure css isn't empty\n            if (!string.IsNullOrEmpty(css))\n            {\n                // Configure response headers\n                SetHeaders(css.GetHashCode(), context);\n\n                context.Response.Write(css);\n            }\n            else\n            {\n                context.Response.Status = \"404 Bad Request\";\n            }\n        }\n    }\n\n    #endregion\n\n    #region Methods\n\n    /// &#x26;lt;summary&#x26;gt;\n    /// This will make the browser and server keep the output\n    ///     in its cache and thereby improve performance.\n    /// &#x26;lt;/summary&#x26;gt;\n    /// &#x26;lt;param name=\"hash\"&#x26;gt;\n    /// The hash number.\n    /// &#x26;lt;/param&#x26;gt;\n    /// &#x26;lt;param name=\"context\"&#x26;gt;\n    /// The context.\n    /// &#x26;lt;/param&#x26;gt;\n    private static void SetHeaders(int hash, HttpContext context)\n    {\n\n        var response = context.Response;\n        response.ContentType = \"text/css\";\n\n        var cache = response.Cache;\n        cache.VaryByHeaders[\"Accept-Encoding\"] = true;\n\n        cache.SetExpires(DateTime.Now.ToUniversalTime().AddDays(7));\n        cache.SetMaxAge(new TimeSpan(7, 0, 0, 0));\n        cache.SetRevalidation(HttpCacheRevalidation.AllCaches);\n\n        var etag = string.Format(\"\\\"{0}\\\"\", hash);\n        var incomingEtag = context.Request.Headers[\"If-None-Match\"];\n\n        cache.SetETag(etag);\n        cache.SetCacheability(HttpCacheability.Public);\n\n        if (String.Compare(incomingEtag, etag) != 0)\n        {\n            return;\n        }\n\n        response.Clear();\n        response.StatusCode = (int)HttpStatusCode.NotModified;\n        response.SuppressContent = true;\n    }\n\n    /// &#x26;lt;summary&#x26;gt;\n    /// Retrieves the local CSS from the disk\n    /// &#x26;lt;/summary&#x26;gt;\n    /// &#x26;lt;param name=\"file\"&#x26;gt;\n    /// The file name.\n    /// &#x26;lt;/param&#x26;gt;\n    /// &#x26;lt;param name=\"cacheKey\"&#x26;gt;\n    /// The key used to insert this script into the cache.\n    /// &#x26;lt;/param&#x26;gt;\n    /// &#x26;lt;returns&#x26;gt;\n    /// The retrieve local css.\n    /// &#x26;lt;/returns&#x26;gt;\n    private static string RetrieveLocalCss(string file, string cacheKey, bool minify)\n    {\n        var path = HttpContext.Current.Server.MapPath(file);\n        try\n        {\n            string css;\n            using (var reader = new StreamReader(path))\n            {\n                css = reader.ReadToEnd();\n            }\n\n            css = ProcessCss(css, minify);\n            HttpContext.Current.Cache.Insert(cacheKey, css, new CacheDependency(path));\n\n            return css;\n        }\n        catch\n        {\n            return string.Empty;\n        }\n    }\n\n    /// &#x26;lt;summary&#x26;gt;\n    /// Call this method to do any post-processing on the css before its returned in the context response.\n    /// &#x26;lt;/summary&#x26;gt;\n    /// &#x26;lt;param name=\"css\"&#x26;gt;&#x26;lt;/param&#x26;gt;\n    /// &#x26;lt;returns&#x26;gt;&#x26;lt;/returns&#x26;gt;\n    private static string ProcessCss(string css, bool minify)\n    {\n        if (minify)\n        {\n            css = StripWhitespace(css);\n            return css;\n        }\n        else\n        {\n            return css;\n        }\n    }\n\n    /// &#x26;lt;summary&#x26;gt;\n    /// Strips the whitespace from any .css file.\n    /// &#x26;lt;/summary&#x26;gt;\n    /// &#x26;lt;param name=\"body\"&#x26;gt;\n    /// The body string.\n    /// &#x26;lt;/param&#x26;gt;\n    /// &#x26;lt;returns&#x26;gt;\n    /// The strip whitespace.\n    /// &#x26;lt;/returns&#x26;gt;\n    private static string StripWhitespace(string body)\n    {\n\n        body = body.Replace(\"  \", \" \");\n        body = body.Replace(Environment.NewLine, String.Empty);\n        body = body.Replace(\"\\t\", string.Empty);\n        body = body.Replace(\" {\", \"{\");\n        body = body.Replace(\" :\", \":\");\n        body = body.Replace(\": \", \":\");\n        body = body.Replace(\", \", \",\");\n        body = body.Replace(\"; \", \";\");\n        body = body.Replace(\";}\", \"}\");\n\n        // sometimes found when retrieving CSS remotely\n        body = body.Replace(@\"?\", string.Empty);\n\n        // body = Regex.Replace(body, @\"/\\*[^\\*]*\\*+([^/\\*]*\\*+)*/\", \"$1\");\n        body = Regex.Replace(\n            body, @\"(?&#x26;lt;=[&#x26;gt;])\\s{2,}(?=[&#x26;lt;])|(?&#x26;lt;=[&#x26;gt;])\\s{2,}(?= )|(?&#x26;lt;=&#x26;amp;ndsp;)\\s{2,}(?=[&#x26;lt;])\", String.Empty);\n\n        // Remove comments from CSS\n        body = Regex.Replace(body, @\"/\\*[\\d\\D]*?\\*/\", string.Empty);\n\n        return body;\n    }\n\n    #endregion\n}\n</code></pre>\n<p>}</pre></p>\n<p>4. 在Web.Config中作映射配置：</p>\n<p>如果是IIS 7.5 或以上，则只需要作如下配置即可：</p>\n<pre class=\"brush: xml\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n<p>&#x3C;!--</p>\n<p>有关如何配置 ASP.NET 应用程序的详细信息，请访问</p>\n<p><a href=\"http://go.microsoft.com/fwlink/?LinkId=152368\">http://go.microsoft.com/fwlink/?LinkId=152368</a></p>\n<p>--></p>\n<p>&#x3C;configuration></p>\n<pre><code>...\n\n&#x26;lt;system.webServer&#x26;gt;\n\n    &#x26;lt;validation validateIntegratedModeConfiguration=\"false\"/&#x26;gt;\n\n    &#x26;lt;modules runAllManagedModulesForAllRequests=\"true\"/&#x26;gt;\n\n    &#x26;lt;handlers&#x26;gt;\n\n        &#x26;lt;add name=\"ZiZhuJYJavaScriptHandler\" path=\"*.js\" verb=\"*\" type=\"zizhujy.HttpHandlers.JavaScriptHandler, zizhujy\" resourceType=\"Unspecified\" preCondition=\"integratedMode\"/&#x26;gt;\n\n        &#x26;lt;add name=\"ZiZhuJYCssHandler\" path=\"*.css\" verb=\"*\" type=\"zizhujy.HttpHandlers.CssHandler, zizhujy\" resourceType=\"Unspecified\" preCondition=\"integratedMode\"/&#x26;gt;\n\n    &#x26;lt;/handlers&#x26;gt;\n\n&#x26;lt;/system.webServer&#x26;gt;\n\n...\n</code></pre>\n<p>&#x3C;/configuration></pre></p>\n<p>如果是IIS 5.1，则要按这样的格式作配置：</p>\n<pre class=\"brush: xml\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n<p>&#x3C;!--</p>\n<p>有关如何配置 ASP.NET 应用程序的详细信息，请访问</p>\n<p><a href=\"http://go.microsoft.com/fwlink/?LinkId=152368\">http://go.microsoft.com/fwlink/?LinkId=152368</a></p>\n<p>--></p>\n<p>&#x3C;configuration></p>\n<pre><code>...\n\n&#x26;lt;system.web&#x26;gt;\n\n    &#x26;lt;httpHandlers&#x26;gt;\n\n        &#x26;lt;add path=\"*.js\" verb=\"*\" type=\"zizhujy.HttpHandlers.JavaScriptHandler, zizhujy\" validate=\"false\"/&#x26;gt;\n\n        &#x26;lt;add path=\"*.css\" verb=\"*\" type=\"zizhujy.HttpHandlers.CssHandler, zizhujy\" validate=\"false\"/&#x26;gt;\n\n    &#x26;lt;/httpHandlers&#x26;gt;\n\n&#x26;lt;/system.web&#x26;gt;\n\n...\n</code></pre>\n<p>&#x3C;/configuration></pre></p>\n<p>5. 通过在需要压缩的文件名后面添加查询字符串?minify=true来启动压缩：</p>\n<pre class=\"brush: html\">&lt;!DOCTYPE html&gt;\n<p>&#x3C;html></p>\n<p>&#x3C;head>\n...</p>\n<pre><code>&#x26;lt;link href=\"/Content/css/functionGraffitiStyle.css?minify=true\" rel=\"stylesheet\" type=\"text/css\" /&#x26;gt;\n\n&#x26;lt;link href=\"/Scripts/syntaxhighlighter_3.0.83/styles/shCore.css?minify=true\" rel=\"stylesheet\" type=\"text/css\" /&#x26;gt;\n\n&#x26;lt;link href=\"/Scripts/syntaxhighlighter_3.0.83/styles/shThemeDefault.css?minify=true\" rel=\"Stylesheet\" type=\"text/css\" /&#x26;gt;\n\n&#x26;lt;script src=\"/Scripts/flot/jquery.flot.js?minify=true\" type=\"text/javascript\"&#x26;gt;&#x26;lt;/script&#x26;gt;\n\n&#x26;lt;script src=\"/Scripts/FunctionGraffiti/jGraffiti-Math.js?minify=true\" type=\"text/javascript\"&#x26;gt;&#x26;lt;/script&#x26;gt;\n\n&#x26;lt;script src=\"/Scripts/FunctionGraffiti/jGraffiti.js?minify=true\" type=\"text/javascript\"&#x26;gt;&#x26;lt;/script&#x26;gt;\n</code></pre>\n<p>...</p>\n<p>&#x3C;/head></p>\n<p>&#x3C;body></p>\n<p>...</p>\n<p>&#x3C;/body></p>\n<p>&#x3C;/html></pre></p>\n<h1><span style=\"color: #9b00d3;\"><span style=\"font-weight: bold;\">六、解决方案二的总结</span></span></h1>\n<p>个人认为解决方案二是代码压缩的最佳实践方案，它同时对开发人员和用户友好。和解决方案一相比，它有这些优点：</p>\n<ul>\n<li>它是内包的，不需要引用外部的奇怪程序，封装性好</li>\n<li>它不插手编译过程，它是在第一次响应请求时进行压缩，之后调用缓存版本</li>\n<li>不用维护另外的xml文件，只需要对那些你想要压缩的文件名后面添加一个查询字符串?minify=true即可启动压缩</li>\n<li>?minify=true这个查询字符串太直观太好记了</li>\n<li>没有格外的文件夹名要求，因此不会因为它的失败引起奇怪的编译过程错误</li>\n</ul>\n<h1><span style=\"color: #9b00d3;\"><span>七、相关文件下载</span></span></h1>\n<p>解决方案二需要在项目中引用一个DLL文件（AjaxMin.dll），请点击下面的链接下载：&nbsp;</p>\n<p><a href=\"/blog/file.axd?file=2011%2f11%2fAjaxMin.zip\">AjaxMin.zip (115.25 kb)</a></p>\n<p>&nbsp;</p>\n<p>[donate: <a href=\"http://www.zizhujy.com\">www.zizhujy.com</a>]</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","author":"@zizhujy","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"Made with Stackbit.","url":"https://www.stackbit.com","style":"link","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}}}},"staticQueryHashes":[],"slicesMap":{}}