{"componentChunkName":"component---src-templates-post-js","path":"/posts/wtohb0","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/wtohb0","relativePath":"posts/wtohb0","frontmatter":{"title":"Free Arch: 狡兔三窟，多处部署","stackbit_url_path":"posts/wtohb0","date":"2022-11-03T09:59:04","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<p>刚刚写了一篇《<a href=\"https://zhuanlan.zhihu.com/p/580043578\">Free Arch: 个人开发者也能做到支付闭环 - Jeff Tian的文章 - 知乎</a>》，提到了其中的 Demo，也是一个老项目的复活，这里详解一下复活步骤。\n<a name=lc5nq></a></p>\n<h1>OAM</h1>\n<p>首先，要再提一下《<a href=\"https://zhuanlan.zhihu.com/p/571009896\">Free Arch: 使用 OAM 摆脱厂商锁定 - Jeff Tian的文章 - 知乎</a>》，它利用开放应用模型，将老项目 uni-orders 复活，并分别部署到了 Okteto 和 Napptive。参考它，我又将老项目 v 复活，依葫芦画瓢，将它也部署到了 Okteto 和 Napptive：</p>\n<p><a name=Q8bvN></a></p>\n<h2>v 的 GitHub Actions</h2>\n<p><a href=\"https://github.com/Jeff-Tian/v/actions\">https://github.com/Jeff-Tian/v/actions</a></p>\n<p>做得还不完美。</p>\n<p>测试其实通过了，但是由于使用了 killall node 的方式结束测试进程，导致显示是失败的。而对于 napptive，问题尝试先部署，再更新。如果已经是已部署状态（未被强行休眠），部署显示失败。但整体其实是成功的。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1667468448924-857cb574-c7db-4486-bbe8-afd624328e19.png#clientId=ucf5531c0-346e-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=531&#x26;id=ub642a1a9&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=597&#x26;originWidth=1221&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=37919&#x26;status=done&#x26;style=none&#x26;taskId=u141477bb-104a-4fca-bf25-2cfec8e5581&#x26;title=&#x26;width=1085.3333333333333\" alt=\"image.png\">\n<a name=O2ijJ></a></p>\n<h2>Okteto 上的 v</h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1667458423676-b4fa7237-e994-4195-81dd-c27160929ebd.png#clientId=ueb7b70ec-edd8-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=329&#x26;id=u063554bb&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=658&#x26;originWidth=1000&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=77533&#x26;status=done&#x26;style=none&#x26;taskId=ub524d564-747e-45cd-a125-58ab25ba0b1&#x26;title=&#x26;width=500\" alt=\"image.png\"></p>\n<p><a name=Xs6GW></a></p>\n<h2>Napptive 上的 v</h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1667458469529-3616b715-baa2-407b-bcc6-a20883a6a548.png#clientId=ueb7b70ec-edd8-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=405&#x26;id=ue897bd22&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=810&#x26;originWidth=2178&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=170389&#x26;status=done&#x26;style=none&#x26;taskId=u5177d3ca-d602-4279-b808-48076693a1d&#x26;title=&#x26;width=1089\" alt=\"image.png\"></p>\n<p><a name=TSuPg></a></p>\n<h1>Vercel</h1>\n<p>但是这一次更进一步，还仅将 v 部署在了两个不同的 Kubernetes 集群中，还将它部署在了 Vercel 上！</p>\n<p><a name=JR2p6></a></p>\n<h2>k2e</h2>\n<p>v 这个项目，是一个很老的项目了，当时我不知道出于什么原因，将服务器和客户端的代码，杂揉在了一起。大概是为了将它们部署在一个地方，使用 pm2 + nginx 来对外提供服务。另外，在开发时前后端有很多代码是共享的，总之，不太像一个纯粹的前后端分离的主流项目。后端是 koa 写的，前端就是一个 create-react-app。</p>\n<p>在将这种杂揉在一起的代码部署上 Kubernetes 时，没有任何障碍。没有想到，部署上 Vercel 竟然也如此丝滑顺畅，这得益于参考《<a href=\"https://zhuanlan.zhihu.com/p/542130945\">Free Arch：将 Koa 服务部署到 Vercel - Jeff Tian的文章 - 知乎</a> 》。即添加一个 api 目录，并使用 <a href=\"https://github.com/xingxingted/koa-to-express\">@jeff-tian/koa-to-express</a> 将 koa 形式的中间件转换成了 Express 的中间件，就和 Vercel 的 Serverless 函数对上了！其实上文中有大佬留言，不需要做这个转换，只需要自己写一个 runtime 就行了。但是我还没有空研究这个 runtime，总之再次使用了自己的 k2e，又不是不能跑（逃……）。</p>\n<p><a name=jl750></a></p>\n<h2>Vercel 上的 v</h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1667469400022-eaac9850-8509-459b-99d9-614d83bbdbbf.png#clientId=ucf5531c0-346e-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=580&#x26;id=u3f4323a5&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=652&#x26;originWidth=1055&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=99994&#x26;status=done&#x26;style=none&#x26;taskId=ub54ecce9-5c40-4b4b-9959-b593278736b&#x26;title=&#x26;width=937.7777777777778\" alt=\"image.png\"></p>\n<p><a name=rwXmY></a></p>\n<h1>复活老项目</h1>\n<p>这样，每一次提交代码，就将 v 同时部署在了三个平台，做到了真正意义上的“狡兔三窟”。不仅复活了老项目，还同时给它制造了多个分身。这一次，不是为了复活而复活，而是为了实现个人收款自动化的功能，不想从零开始，就在老项目（哪怕是一个屎山项目）上添加这个功能了。</p>\n<p><a href=\"https://v.pa-ca.me/orders\">https://v.pa-ca.me/orders</a></p>\n<p>嗯，就是喜欢做这样的事情：</p>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/522752605\">屎山并不可怕 - Jeff Tian的文章 - 知乎 </a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/359908165\">10 年前老博客以 JAM Stack 方式满血复活！ - Jeff Tian的文章 - 知乎 </a></li>\n</ul>\n<p><a name=GBlCM></a></p>\n<h1></h1>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"Made with Stackbit.","url":"https://www.stackbit.com","style":"link","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}