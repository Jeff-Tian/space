{"componentChunkName":"component---src-templates-post-js","path":"/posts/at15gr","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/at15gr","relativePath":"posts/at15gr","frontmatter":{"title":"微前端的一个简单应用","stackbit_url_path":"posts/at15gr","date":"2022-05-17T13:34:42","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<p>做为后端工程师，对微服务肯定耳熟能详了，或者可以说，微服务已经烂大街了。</p>\n<p>做为前端工程师，也有些类似的概念，那就是微前端。</p>\n<p>很多年前，其实前端就已经开始探索面向组件开发了，当时有过一些 Web Component 的概念，我曾经尝试过，工程上很难用，兼容性又不好，后来似乎不温不火渐渐没有消息了。不过经过多年的发展，前端框架层出不穷，如今面向组件开发已经成为了很自然的事情了。</p>\n<p>乾坤是一个优秀的微前端框架，它的官网也说明了为什么会有微前端，为什么 iframe 不好用等等。但是如果不使用任何微前端框架，可以进行微前端的开发吗？答案是可以的，搞清楚本质就行。当然，如果项目比较大比较复杂，还是建议使用框架，毕竟功能更全。不过，在简单的场景里，引入框架就没有必要了。</p>\n<p>本文以一个实际的例子，来说明微前端的一个具体应用，可以展示出，这个理念本身非常有用，框架并不重要。</p>\n<p>我个人创建了很多网站，比较杂也比较分散。如今尝试把它们渐渐地联结成一个整体，先想到的是让它们复用一个统一的页脚，于是首先将自己的个人主页站点和我学习《计算机程序的构造和解释》时做的习题集站点加上统一的页脚：</p>\n<ul>\n<li><a href=\"https://jeff-tian.jiwai.win\">https://jeff-tian.jiwai.win</a></li>\n<li><a href=\"https://sicp.jiwai.win\">https://sicp.jiwai.win</a></li>\n</ul>\n<p>这里详解一下过程：\n<a name=IJ04U></a></p>\n<h1>页脚组件选型</h1>\n<p>看过一些，比如 bit.dev、contentful 站点的，后来还是觉得 rc-footer 最美观，同时开发量最小。它是基于 React 的组件。</p>\n<p>我想集成进入的前两个站点，个人主页站点是 Gatsby Js 的，前端使用到了 React；而那个 sicp 站点，则是基于 GitBook，是一个早就停止维护的开源框架，前端是基于 jQuery 的。因此想到集成进个人主页是很自然的，集成进入 sicp 站点时，可能会有一些挑战。但是基于之前成功地在微信小程序里动态嵌入了 React 组件，因此还是很有信心能够搞定，毕竟在网页里嵌入代码，比起微信小程序来，要少很多限制。</p>\n<p><a name=yfHdt></a></p>\n<h1>页脚开发</h1>\n<p>使用 rc-footer，基本上不需要什么开发，填入数据就完成了。但是我将它发布在了 bit.dev，因为它提供了方便管理的 Dashboard，也同时提供 npm 仓库源服务。</p>\n<p>不过它还很新，版本号还在零点几。感觉类似 Backstage，但是专注微前端托管，有了它，感觉 Storybook 都可以不用了。\n<a name=MCAwg></a></p>\n<h1>嵌入个人主页</h1>\n<p>因为是 React 技术栈，所以只需要</p>\n<p>bash\nyarn add @uniheart/experience.ui.uniheart-rich-footer</p>\n<p>要注意的是，以上 npm 包目前没有发布到 npm registry，而是发布在了 bit.dev，所以需要在项目中增加 .npmrc 文件，并且将相关的 scope 写入：</p>\n<p>bash\nregistry=<a href=\"https://registry.yarnpkg.com/\">https://registry.yarnpkg.com/</a>\n@uniheart:registry=<a href=\"https://node.bit.dev\">https://node.bit.dev</a>\n@teambit:registry=<a href=\"https://node.bit.dev\">https://node.bit.dev</a></p>\n<p>然后在页面里使用就行了。</p>\n<p>javascript\nimport {UniheartRichFooter} from @uniheart/experience.ui.uniheart-rich-footer</p>\n<UniheartRichFooter />\n<p><a name=EmV6O></a></p>\n<h1><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1652796097361-42fee646-4869-4d4a-ba2b-cd54e7e8dde5.png#clientId=u35be84a7-9945-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=621&#x26;id=u2168c137&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1242&#x26;originWidth=2108&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=1007411&#x26;status=done&#x26;style=none&#x26;taskId=u4d91d606-8f21-411b-bdd7-ea11d536c11&#x26;title=&#x26;width=1054\" alt=\"image.png\"></h1>\n<p><a name=SM9dO></a></p>\n<h1>嵌入 GitBook</h1>\n<p>这个要克服的问题略微多一些。首先，要知道 GitBook 提供了主题，而加入页脚应该在主题的布局中完成。所以，第一步是需要自己建立一个主题。\n<a name=mGHOu></a></p>\n<h2>建立主题</h2>\n<p>我从官方的 default 主题源代码仓库 fork 了一个，命名为 jeff-tian 主题： <a href=\"https://github.com/Jeff-Tian/theme-default\">https://github.com/Jeff-Tian/theme-default</a>。\n<a name=NGn2u></a></p>\n<h2>引入 npm 包</h2>\n<p>这一步和嵌入个人主页一样，并且需要额外安装 react 和 react dom。\n<a name=hUSA7></a></p>\n<h2>增加 footer.js</h2>\n<p>这个文件就是将页脚渲染出来的 js 代码。由于不想再给已有的 GitBook Theme 工程增加更多依赖，所以没有配置解析 jsx 语法的工具链。这时不像在个人主页中那样可以使用 <UniheartRichFooter /> 的写法，而是用 React.createElement(UniheartRichFooter) 的写法。</p>\n<p>同时，由于宿主不是 React 技术环境，因此，需要手动自行使用 ReactDOM.render 来将组件渲染在指定的位置。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1652795189409-df8c58a9-4cac-4dec-9970-1bc6c90cf30d.png#clientId=u35be84a7-9945-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=491&#x26;id=ua9f56367&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=982&#x26;originWidth=2180&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=299363&#x26;status=done&#x26;style=none&#x26;taskId=u961e8379-3061-4d7a-afa4-b8fa9fec133&#x26;title=&#x26;width=1090\" alt=\"image.png\">\n<a name=Y7juP></a></p>\n<h2>修改布局文件</h2>\n<p>就是在合适的地方，增加一个placeholder，让 footer.js 渲染后生效的一块区域，我准备渲染页面，自然是在页面最底部。在 layout.html 文件里，找到 body 标签，在结束前增加一点代码：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1652795309303-efd95d4e-ece2-4ee8-badd-701c24ab4a33.png#clientId=u35be84a7-9945-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=444&#x26;id=u776595fc&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=888&#x26;originWidth=1834&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=277931&#x26;status=done&#x26;style=none&#x26;taskId=uff5b1917-bd94-4d3b-83e5-c019264ce10&#x26;title=&#x26;width=917\" alt=\"image.png\">\n<a name=CN1LE></a></p>\n<h2>解决打包问题</h2>\n<p>GitBook 主题的打包，需要运行 src/build.sh 文件。我在运行时，碰到了错误，看上去是不知道如何处理 css 文件。原来我在实现页脚组件时，引入了一个 css 文件，而 build.sh 是使用的 browserify 进行 js bundle，然后使用 uglify 进行代码压缩。原来的 js 文件里不会引入 css，所以没有问题。</p>\n<p>为了解决 css 文件和 js 文件的混合 bundle，再次安装一个 npm 包： browserify-css，并修改 build.sh：</p>\n<p>diff</p>\n<ul>\n<li>node_modules/.bin/browserify src/js/theme/index.js | node_modules/.bin/uglifyjs -mc > _assets/website/theme.js</li>\n</ul>\n<ul>\n<li>node_modules/.bin/browserify -g browserify-css src/js/theme/index.js -o _assets/website/theme.js</li>\n</ul>\n<p>为了简化问题，没有再折腾 uglify 对 css 的支持，代价是目前代码文件会大一丢丢。\n<a name=MLaMw></a></p>\n<h2>在 sicp 站点中引入 theme-jeff-tian</h2>\n<p>book.json 的 plugins 里增加：</p>\n<p>json\n{\nplugins: [\n...\n-theme-default,\n<a href=\"mailto:theme-jeff-tian@1.2.0\">theme-jeff-tian@1.2.0</a>,\n],\n...\n}</p>\n<p>同时在 package.json 里增加 theme-jeff-tian 包的 dependency 项，不然 book install 后，仍然会报找不到 theme-jeff-tian 的错误。感觉 GitBook 这一块儿的逻辑有点过于复杂了，如果细看，会发现它自己用了一个老版本的 npm 安装 GitBook 插件，并单独放在一个文件夹中。</p>\n<p>json\n...\ndependencies: {\ngitbook-plugin-theme-jeff-tian: 1.2.0\n},\n...\nscripts: {\nbuild: gitbook install &#x26;&#x26; yarn install &#x26;&#x26; book sm &#x26;&#x26; gitbook build,\nserve: gitbook serve\n},\n...</p>\n<p><a name=qpyBy></a></p>\n<h2>完成</h2>\n<p>运行 yarn build &#x26;&#x26; yarn serve，效果完美。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/221736/1652796006980-a47262d5-cd11-4312-94fa-b27c246b2317.png#clientId=u35be84a7-9945-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=655&#x26;id=uf4dfdd6e&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1310&#x26;originWidth=1682&#x26;originalType=binary%E2%88%B6=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=356060&#x26;status=done&#x26;style=none&#x26;taskId=u5b05451c-5a03-4654-9d20-f8389054ceb&#x26;title=&#x26;width=841\" alt=\"image.png\">\n<a name=cviYI></a></p>\n<h1>总结</h1>\n<p>一、微前端的理念非常好，实现的框架相对没那么重要。</p>\n<p>二、React 组件并不要求宿主基于 React 技术栈。</p>\n<p>三、jsx 只是语法糖，本质上 <Component /> 相当于是 React.createElement(Component)。</p>\n<p>四、由于 React 组件就是一个闭包函数，所以要渲染它很容易，直接 ReactDOM.render() 就行了。这种隔离渲染真的是很爽，也是高内聚低耦合的典范。</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"本站源码","url":"https://github.com/Jeff-Tian/space","style":"link","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}