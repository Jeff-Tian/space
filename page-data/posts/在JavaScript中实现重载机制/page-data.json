{"componentChunkName":"component---src-templates-post-js","path":"/posts/在JavaScript中实现重载机制/","result":{"data":{"sitePage":{"id":"SitePage /posts/在JavaScript中实现重载机制/"}},"pageContext":{"url":"/posts/在JavaScript中实现重载机制/","relativePath":"posts/在JavaScript中实现重载机制.md","relativeDir":"posts","base":"在JavaScript中实现重载机制.md","name":"在JavaScript中实现重载机制","frontmatter":{"title":"在JavaScript中实现重载机制","stackbit_url_path":"posts/在JavaScript中实现重载机制","date":"2012-06-21 07:34:53.2744313","excerpt":"","comments_count":0,"positive_reactions_count":0,"tags":["javascript","重载"],"canonical_url":"https://be-net.azurewebsites.net/post/2012/06/21/在JavaScript中实现重载机制","template":"post"},"html":"<h2><font color=\"#800080\">一、背景：</font></h2>  <p>在面向对象的编程语言中，通过重载机制，使得同一个方法名可以具有不同的实现，这些不同的实现版本具有不同的参数（个数、类型都可以不同）。这些不同的参数形成了方法的不同的特征（或者叫签名），从而在使用中，即使方法名相同，程序也能正确地找到对应的版本。</p>  <p>在JavaScript中，没有内置的重载机制，但是它对每个方法（函数）都提供了一个arguments对象，该对象具有传递过来的参数信息，我们可以利用它来实现（或者说模拟）重载机制。</p>  <p>为什么要写多余的代码来实现这个重载机制呢？其实一般不需要，但是在某些情况下，多加一点点代码来实现重载机制后，带来的是巨大的灵活性和可重用性。否则给做同样事情的方法或函数，仅仅因为传进来的参数稍有不同就起不同的名字，会显得非常冗余、奇怪和不容易记忆。</p>  <h2><font color=\"#800080\">二、分析：</font></h2>  <p>在内置重载机制的语言里，编译器要对函数的参数列表进行两种分析：</p>  <ol>   <li>参数个数：对相同名字的方法（或者说函数），不同的参数个数对应不同的实现版本； </li>    <li>参数的类型：参数的个数相同，但是处于同一位置的参数类型不一样，那么也能区分出它们的不同版本。 </li> </ol>  <p>在JavaScript中，没有内置这样的机制，我们可以在代码中用同样的方法自己实现，基本思路是也是如此：</p>  <ol>   <li>参数个数：通过调用arguments.length，对不同个数的参数给予不同的实现； </li>    <li>参数的类型：通过 typeof arguments[i] 测试参数的类型，对不同的类型给予不同的代码实现。 </li> </ol>  <p>具体实现时，需要先对所有可能的参数给予良好的默认值，当传进来的参数存在时，就用传进来的值去覆盖默认值。</p>  <h2><font color=\"#800080\">三、实例：</font></h2>  <pre class=\"brush: javascript\">/// <summary>\r\n///     序列化一个对象（递归地）\r\n/// </summary>\r\n/// <param name=\"o\" />要被序列化的对象</param>\r\n/// <param name=\"level\" />当前正在被序列化的对象在序列化树中的层级（根级为0）</param>\r\n/// <param name=\"varName\" />当前正在被序列化的对象的变量名</param>\r\n/// <remark>\r\n///     该方法有四个重载：\r\n///     1. serializeObject(o);\r\n///     2. serializeObject(o, level);\r\n///     3. serializeObject(o, varName);\r\n///     4. serializeObject(o, level, varName);\r\n/// </remark>\r\nfunction serializeObject (){            \r\n    // 参数列表：\r\n    var o = arguments[0];\r\n    var level = 0;          \r\n    var varName = &quot;&quot;;     \n<pre><code>// 重载机制:\r\nswitch(typeof arguments[1]){\r\n    case &#x26;quot;number&#x26;quot;:\r\n        // 重载 2： serializeObject(o, level);\r\n        level = arguments[1];\r\n        if(arguments.length &#x26;gt; 2) {\r\n            // 重载 4： serializeObject(o, level, varName);\r\n            varName = arguments[2];\r\n        }\r\n        break;\r\n    case &#x26;quot;string&#x26;quot;:\r\n        // 重载 3： serializeObject(o, varName);\r\n        varName = arguments[1];\r\n        break;\r\n    default:\r\n        // 重载 1： serializeObject(o);\r\n        break;\r\n}\r\n\r\nvar sb = new StringBuffer();\r\n// 根对象信息：\r\nsb.appendLine(&#x26;quot;{0}{1}&#x26;lt;{2}&#x26;gt;: [{3}]&#x26;quot;.format(level &#x26;gt; 0 ? &#x26;quot; &#x26;quot;.duplicate(level*2) + &#x26;quot;|-&#x26;quot; : &#x26;quot;&#x26;quot;, varName, typeof o, o === null ? &#x26;quot;null&#x26;quot; : o === undefined ? &#x26;quot;undefined&#x26;quot; : o.toString()));\r\n// 子对象信息：\r\nswitch(typeof o) {\r\n    case &#x26;quot;object&#x26;quot;:\r\n        for(var i in o){\r\n            //sb.appendLine(&#x26;quot;{0}{1}&#x26;lt;{2}&#x26;gt;: [{3}]&#x26;quot;.format(&#x26;quot; &#x26;quot;.duplicate((level+1)*2), i, typeof o[i], o[i] === null ? &#x26;quot;null&#x26;quot; : o[i] === undefined ? &#x26;quot;undefined&#x26;quot; : o[i].toString()));\r\n            sb.append(serializeObject(o[i], level + 1, i));\r\n        } // end for\r\n        break;\r\n    case &#x26;quot;undefined&#x26;quot;:\r\n        break;\r\n    default:\r\n        // 根对象的prototype信息：\r\n        switch(typeof o.prototype){\r\n            case &#x26;quot;undefined&#x26;quot;:\r\n                break;\r\n            default:\r\n                sb.append(serializeObject(o.prototype, level + 1, &#x26;quot;prototype&#x26;quot;));\r\n                break;\r\n        } // end switch (typeof o.prototype)\r\n        break;\r\n} // end switch (typeof o)\r\nreturn sb.toString();\n</code></pre>\n<p>}</pre></p>\n<h2><font color=\"#800080\">四、测试：</font></h2>\n<p>对于上述的这个函数，我们可以根据通过如下方式去调用：</p>\n<pre class=\"brush: javascript\">var o = {\r\n\ta: 2,\r\n\tb: 3,\r\n\tc: {\r\n\t\tprop1: &quot;abc&quot;,\r\n\t\tprop2: &quot;bcd&quot;,\r\n\t\tprop3: {\r\n\t\t\tkey1: &quot;key1&quot;,\r\n\t\t\tkey2: &quot;key2&quot;\r\n\t\t},\r\n\t\tprop4: &quot;cde&quot;\r\n\t},\r\n\td: &quot;Hello&quot;\r\n};\r\n\r\nalert(serializeObject(o));\r\nalert(serializeObject(o, 4));\r\nalert(serializeObject(o, &quot;o&quot;));\r\nalert(serializeObject(o, 4, &quot;o&quot;));</pre>\n<p>这样，就避免了这样的情况：</p>\n<pre class=\"brush: javascript\">alert(serializeObject(o));\r\nalert(serializeObjectWithInitialLevel(o, 4));\r\nalert(serializeObjectWithVarName(o, &quot;o&quot;));\r\nalert(serializeObjectWithInitialLevelAndVarName(o, 4, &quot;o&quot;));</pre>\n<p>可见，重载方案要优雅得多！</p>\n<p>注意：在这个示例重载函数serializeObject()中，使用了StringBuffer对象，String对象的format()和duplicate()方法，它们不是JavaScript内置的，它们的介绍分别见：</p>\n<ul>\r\n  <li>《<a href=\"http://zizhujy.com/blog/post/2011/08/03/StringBuffer-class-in-JavaScript.aspx\">JavaScript 版 StringBuffer 类</a>》</li>\n  <li>《<a href=\"http://zizhujy.com/blog/post/2011/08/02/add-format-method-to-string-object-in-javascript.aspx\">给JavaScript的String对象添加一个format方法</a>》</li>\n  <li>《<a href=\"http://zizhujy.com/blog/post/2012/06/16/%E5%BA%8F%E5%88%97%E5%8C%96JavaScript%E5%AF%B9%E8%B1%A1.aspx\">序列化JavaScript对象</a>》中对duplicate()的介绍</li>\r\n</ul>\n<p>以上测试代码的运行的第一个结果截图如下：</p>\n<p><a href=\"http://www.myfootprints.cn/oldweb/javascript/\" target=\"_blank\"><img style=\"border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px\" title=\"JavaScript重载机制测试结果\" border=\"0\" alt=\"JavaScript重载机制测试结果\" src=\"https://raw.githubusercontent.com/Jeff-Tian/blogengine.net/master/Source/BlogEngine/BlogEngine.NET/App_Data/files/image_587.png\" width=\"531\" height=\"531\" /></a> </p>\n<p>完整的可运行的测试代码为：</p>\n<pre class=\"brush: javascript\">//\r\n// String Buffer Class\r\n//\r\nfunction StringBuffer() {\r\n    this.__strings__ = new Array();\r\n\r\n    if (typeof StringBuffer._initialized == &quot;undefined&quot;) {\r\n        StringBuffer.prototype.append = function (s) {\r\n            this.__strings__.push(s);\r\n        };\r\n\r\n        StringBuffer.prototype.appendLine = function (s) {\r\n            this.__strings__.push(s + &quot;\\n&quot;);\r\n        };\r\n\r\n        StringBuffer.prototype.toString = function () {\r\n            return this.__strings__.join(&quot;&quot;);\r\n        };\r\n\r\n        StringBuffer._initialized = true;\r\n    }\r\n}\r\n\r\nString.prototype.format = function () {\r\n    //        return String.format.apply(arguments);\r\n    var string = this;\r\n    for (var i = 0; i &lt; arguments.length; i++) {\r\n        string = string.replace(&quot;{&quot; + i + &quot;}&quot;, arguments[i]);\r\n    }\r\n\r\n    return string;\r\n};\r\n\r\n/// <summary>\r\n///     复制字符串为原来的n倍\r\n/// </summary>\r\nString.prototype.duplicate = function (n) {\r\n    var sb = new StringBuffer();\r\n    for (var i = 0; i &lt; n; i++) {\r\n        sb.append(this);\r\n    }\r\n\r\n    return sb.toString();\r\n};\r\n\r\n/// <summary>\r\n///     序列化一个对象（递归地）\r\n/// </summary>\r\n/// <param name=\"o\" />要被序列化的对象</param>\r\n/// <param name=\"level\" />当前正在被序列化的对象在序列化树中的层级（根级为0）</param>\r\n/// <param name=\"varName\" />当前正在被序列化的对象的变量名</param>\r\n/// <remark>\r\n///     该方法有四个重载：\r\n///     1. serializeObject(o);\r\n///     2. serializeObject(o, level);\r\n///     3. serializeObject(o, varName);\r\n///     4. serializeObject(o, level, varName);\r\n/// </remark>\r\nfunction serializeObject() {\r\n    // 参数列表：\r\n    var o = arguments[0];\r\n    var level = 0;\r\n    var varName = &quot;&quot;;\r\n\r\n    // 重载机制:\r\n    switch (typeof arguments[1]) {\r\n        case &quot;number&quot;:\r\n            // 重载 2： serializeObject(o, level);\r\n            level = arguments[1];\r\n            if (arguments.length &gt; 2) {\r\n                // 重载 4： serializeObject(o, level, varName);\r\n                varName = arguments[2];\r\n            }\r\n            break;\r\n        case &quot;string&quot;:\r\n            // 重载 3： serializeObject(o, varName);\r\n            varName = arguments[1];\r\n            break;\r\n        default:\r\n            // 重载 1： serializeObject(o);\r\n            break;\r\n    }\r\n\r\n    var sb = new StringBuffer();\r\n    // 根对象信息：\r\n    sb.appendLine(&quot;{0}{1}&lt;{2}&gt;: [{3}]&quot;.format(level &gt; 0 ? &quot; &quot;.duplicate(level * 2) + &quot;|-&quot; : &quot;&quot;, varName, typeof o, o === null ? &quot;null&quot; : o === undefined ? &quot;undefined&quot; : o.toString()));\r\n    // 子对象信息：\r\n    switch (typeof o) {\r\n        case &quot;object&quot;:\r\n            for (var i in o) {\r\n                //sb.appendLine(&quot;{0}{1}&lt;{2}&gt;: [{3}]&quot;.format(&quot; &quot;.duplicate((level+1)*2), i, typeof o[i], o[i] === null ? &quot;null&quot; : o[i] === undefined ? &quot;undefined&quot; : o[i].toString()));\r\n                sb.append(serializeObject(o[i], level + 1, i));\r\n            } // end for\r\n            break;\r\n        case &quot;undefined&quot;:\r\n            break;\r\n        default:\r\n            // 根对象的prototype信息：\r\n            switch (typeof o.prototype) {\r\n                case &quot;undefined&quot;:\r\n                    break;\r\n                default:\r\n                    sb.append(serializeObject(o.prototype, level + 1, &quot;prototype&quot;));\r\n                    break;\r\n            } // end switch (typeof o.prototype)\r\n            break;\r\n    } // end switch (typeof o)\r\n    return sb.toString();\r\n};\r\n\r\nvar o = {\r\n    a: 2,\r\n    b: 3,\r\n    c: {\r\n        prop1: &quot;abc&quot;,\r\n        prop2: &quot;bcd&quot;,\r\n        prop3: {\r\n            key1: &quot;key1&quot;,\r\n            key2: &quot;key2&quot;\r\n        },\r\n        prop4: &quot;cde&quot;\r\n    },\r\n    d: &quot;Hello&quot;\r\n};\r\n\r\nalert(serializeObject(o));\r\nalert(serializeObject(o, 4));\r\nalert(serializeObject(o, &quot;o&quot;));\r\nalert(serializeObject(o, 4, &quot;o&quot;));</pre>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"Made with Stackbit.","url":"https://www.stackbit.com","style":"link","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[]}