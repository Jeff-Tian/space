{"componentChunkName":"component---src-templates-post-js","path":"/posts/tv61xg/","result":{"data":{"sitePage":null},"pageContext":{"url":"posts/tv61xg","relativePath":"posts/tv61xg","frontmatter":{"title":"TypeScript 实现对不同类的通用扩展","stackbit_url_path":"posts/tv61xg","date":"2021-05-27T12:02:47","excerpt":"","tags":[],"categories":[],"template":"post"},"html":"<p>有个奇怪的需求，对项目中存在的不同的类，给它们扩展出一个相同的方法，以供消费者调用。也就是说，要求从原来的类派生出来的新类，除了拥有原来类的方法外，还额外多出了一个新的通用方法。</p>\n<p>比如对于这样两个类，假如可以通过一个名字叫做 genericExtend() 的函数扩展，那么其扩展出的新类会多出一个 genericMethod 方法：\ntypescript\nclass A {\na() {\n// ...\n}\n}</p>\n<p>class B {\nb() {\n// ...\n}\n}</p>\n<p>const instanceofA = new (genericExtend(A))()\nconst instanceofB = new (genericExtend(B))()</p>\n<p>instanceofA.a() // ok\ninstanceofA.genericMethod() // ok</p>\n<p>instanceofB.b() // ok\ninstanceofB.genericMethod() // ok</p>\n<p>这个需求看起来很奇怪，但也不是完全不合理，比如原始的 A 和 B，甚至 C 以及 D 等等类，是第三方来的依赖，虽然不完全一样，但是又有一些类似的地方，可以被通用处理。同时项目中又大量存在直接调用它们的原始方法的地方，不能全部替换，因此，可以将这些实例替换为被扩展后的实例，由于被扩展后的实例是原始类的子类，所以原有调用不用改变。而对于新的希望应用通用处理逻辑的地方，可以直接调用新的方法 genericMethod()。</p>\n<p><a name=Q27gP></a></p>\n<h2>一个幼稚的实现</h2>\n<p>具体实现如下：</p>\n<p>typescript\ntype Constructor = new (...args: any[]) => any</p>\n<p>function genericExtend<T extends Constructor>(target: T) {\nreturn class GenericExtended extends target {\nconstructor(...args: any[]) {\nsuper(...args)\n}</p>\n<pre><code>genericMethod() {\n  ...\n}\n</code></pre>\n<p>}\n}</p>\n<p>这个实现完全能满足最初提出的需求，并且，可以通过联合类型，实现静态类型检查，比如对 instanceofA 定义一个联合类型，那么无论调用原始方法还是新的通用方法，都能享受到静态类型的约束：\ntypescript\nconst instanceofA: GenericExtended &#x26; A = new (genericExtend(A))()\nconst instanceofB = new (genericExtend(B))()</p>\n<p>instanceofA.a() // ok，有代码智能提示\ninstanceofA.genericMethod() // ok，有代码智能提示</p>\n<p>instanceofB.b() // ok，不报错，但是没有静态类型检查\ninstanceofB.genericMethod() // ok，不报错，但是没有静态类型检查</p>\n<p><a name=baXz4></a></p>\n<h2></h2>\n<p><a name=eSHeY></a></p>\n<h2>幼稚实现不好的地方</h2>\n<p>虽然幼稚的实现完全能够工作，并且我将它用在了实际的工程里，但是它有这些缺点：</p>\n<ul>\n<li>在实现上使用了 any 关键字</li>\n<li>在声明实例的类型时，需要使用联合类型的方式，比较丑</li>\n<li>不显式声明类型，就没有类型检查，没有触发 TypeScript 的类型自动推断</li>\n</ul>\n<p>不知道这个需求会不会是某种通用模式？从而有现成的更加优雅的实现方案？可能受制于自己的认知，网上搜索了很久，没有找到优雅的通用的实现。希望有高人能指点指点。</p>","pages":[],"site":{"siteMetadata":{"title":"Jeff Tian","author":"@zizhujy","description":"A wild full stack developer","palette":"yellow","header":{"title":"Jeff Tian","tagline":"A wild developer","logo_img":"https://images.ctfassets.net/qixg1o8tujmf/7z1ua3nTOC5B7DwwzAki8I/4e1a05f8db770c285a492eeb1eaa398f/imageedit_3_2509022194.png","background_img":"https://images.ctfassets.net/qixg1o8tujmf/7m0jrKYaDBwEvlc5lo8nt6/6d50a5050d9cdc0d4d2047e35feac292/10648733_696750647079056_2800539603462658695_o.jpg","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link","type":"action"},{"label":"About","url":"/about","style":"link","type":"action"},{"label":"关于","url":"https://ggyy.pa-pa.me/about","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"},{"label":"Contact","url":"/contact","style":"link","type":"action"},{"label":"Support Me","url":"/support-me","style":"link","type":"action"},{"label":"叽叽歪歪","url":"https://ggyy.pa-pa.me/","style":"link","icon_class":"lorem-ipsum","new_window":true,"type":"action"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/zizhujy","style":"icon","icon_class":"fa-twitter","new_window":true,"type":"action"},{"label":"Instagram","url":"https://www.instagram.com/jefftian5","style":"icon","icon_class":"fa-instagram","new_window":true,"type":"action"},{"label":"GitHub","url":"https://github.com/jeff-tian","style":"icon","icon_class":"fa-github","new_window":true,"type":"action"},{"label":"LinkedIn","url":"https://www.linkedin.com/jeff~tian","style":"icon","icon_class":"fa-linkedin","new_window":true,"type":"action"},{"label":"DEV","url":"https://dev.to/jefftian","style":"icon","icon_class":"fa-dev","new_window":true,"type":"action"},{"label":"知乎","url":"https://www.zhihu.com/people/jefftian","style":"icon","icon_class":"fa-zhihu","new_window":true,"type":"action"}],"type":"header"},"footer":{"content":"&copy; All rights reserved.","links":[{"label":"Made with Stackbit.","url":"https://www.stackbit.com","style":"link","new_window":true,"type":"action"},{"label":"紫竹叽歪","url":"https://zizhujy.apphb.com","style":"link","icon_class":"http://zizhujy.apphb.com/Content/Images/logo.png","new_window":true,"type":"action"}],"type":"footer"}},"pathPrefix":"","data":{"data":{"author":{"name":"Jeff Tian","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--a5qDZLv3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/318420/3bfd2d99-430c-4049-8dd5-e2adc961e1e0.png"},"social":{"devto":{"username":"jefftian"},"twitter":{"username":"zizhujy"},"github":{"username":"Jeff-Tian"}}}}},"menus":{}}},"staticQueryHashes":[],"slicesMap":{}}